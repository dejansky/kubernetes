apiVersion: v1
items:
- apiVersion: v1
  conditions:
  - message: ok
    status: "True"
    type: Healthy
  kind: ComponentStatus
  metadata:
    creationTimestamp: null
    name: etcd-0
- apiVersion: v1
  conditions:
  - message: ok
    status: "True"
    type: Healthy
  kind: ComponentStatus
  metadata:
    creationTimestamp: null
    name: controller-manager
- apiVersion: v1
  conditions:
  - message: ok
    status: "True"
    type: Healthy
  kind: ComponentStatus
  metadata:
    creationTimestamp: null
    name: scheduler
- apiVersion: v1
  data:
    config.yaml: |
      ---
      originRequest:
        originServerName: "external.afamiljen.se"

      ingress:
        - hostname: "afamiljen.se"
          service: https://external-ingress-nginx-controller.network.svc.cluster.local:443
        - hostname: "*.afamiljen.se"
          service: https://external-ingress-nginx-controller.network.svc.cluster.local:443
        - service: http_status:404
  kind: ConfigMap
  metadata:
    creationTimestamp: "2025-02-02T18:16:56Z"
    labels:
      app.kubernetes.io/name: cloudflared
      kustomize.toolkit.fluxcd.io/name: cloudflared
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: cloudflared-configmap
    namespace: network
    resourceVersion: "78054"
    uid: fa7831af-d21d-4315-8d25-9907ebbe0165
- apiVersion: v1
  data:
    allow-snippet-annotations: "true"
    annotations-risk-level: Critical
    client-body-buffer-size: 100M
    client-body-timeout: "120"
    client-header-timeout: "120"
    enable-brotli: "true"
    enable-ocsp: "true"
    enable-real-ip: "true"
    force-ssl-redirect: "true"
    hide-headers: Server,X-Powered-By
    hsts-max-age: "3.14496e+07"
    keep-alive: "120"
    keep-alive-requests: "10000"
    log-format-escape-json: "true"
    log-format-upstream: |
      {"time": "$time_iso8601", "remote_addr": "$proxy_protocol_addr", "x_forwarded_for": "$proxy_add_x_forwarded_for", "request_id": "$req_id", "remote_user": "$remote_user", "bytes_sent": $bytes_sent, "request_time": $request_time, "status": $status, "vhost": "$host", "request_proto": "$server_protocol", "path": "$uri", "request_query": "$args", "request_length": $request_length, "duration": $request_time,"method": "$request_method", "http_referrer": "$http_referer", "http_user_agent": "$http_user_agent"}
    proxy-body-size: "0"
    proxy-buffer-size: 16k
    ssl-protocols: TLSv1.3 TLSv1.2
    use-forwarded-headers: "true"
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: external-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:51:37Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: external-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: external-ingress-nginx-controller
    namespace: network
    resourceVersion: "14938"
    uid: 5c1cbf6e-9842-4acb-aaac-b5d22fa15f06
- apiVersion: v1
  data:
    allow-snippet-annotations: "true"
    annotations-risk-level: Critical
    block-user-agents: AdsBot-Google,Amazonbot,anthropic-ai,Applebot-Extended,Bytespider,CCBot,ChatGPT-User,ClaudeBot,Claude-Web,cohere-ai,Diffbot,FacebookBot,FriendlyCrawler,Google-Extended,GoogleOther,GPTBot,img2dataset,omgili,omgilibot,peer39_crawler,peer39_crawler/1.0,PerplexityBot,YouBot,
    client-body-buffer-size: 100M
    client-body-timeout: "120"
    client-header-timeout: "120"
    enable-brotli: "true"
    enable-ocsp: "true"
    enable-real-ip: "true"
    force-ssl-redirect: "true"
    hide-headers: Server,X-Powered-By
    hsts-max-age: "3.14496e+07"
    keep-alive: "120"
    keep-alive-requests: "10000"
    log-format-escape-json: "true"
    log-format-upstream: |
      {"time": "$time_iso8601", "remote_addr": "$proxy_protocol_addr", "x_forwarded_for": "$proxy_add_x_forwarded_for", "request_id": "$req_id", "remote_user": "$remote_user", "bytes_sent": $bytes_sent, "request_time": $request_time, "status": $status, "vhost": "$host", "request_proto": "$server_protocol", "path": "$uri", "request_query": "$args", "request_length": $request_length, "duration": $request_time, "method": "$request_method", "http_referrer": "$http_referer", "http_user_agent": "$http_user_agent"}
    proxy-body-size: "0"
    proxy-buffer-size: 16k
    ssl-protocols: TLSv1.3 TLSv1.2
    use-forwarded-headers: "true"
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: internal-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T19:07:36Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: internal-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: internal-ingress-nginx-controller
    namespace: network
    resourceVersion: "21714"
    uid: 29f9fcff-4faf-4dc0-a19f-93656c18092e
- apiVersion: v1
  data:
    Corefile: ".:1053 {\n    k8s_gateway afamiljen.se {\n      apex k8s-gateway.network\n
      \     ttl 1\n      resources Ingress Service\n    }\n    log\n    errors\n    health
      { \n      lameduck 5s\n    }\n    ready\n    prometheus 0.0.0.0:9153\n    forward
      . /etc/resolv.conf\n    loop\n    reload\n    loadbalance\n}"
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: k8s-gateway
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:16:03Z"
    labels:
      app.kubernetes.io/instance: k8s-gateway
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: k8s-gateway
      app.kubernetes.io/version: 0.4.0
      helm.sh/chart: k8s-gateway-2.4.0
      helm.toolkit.fluxcd.io/name: k8s-gateway
      helm.toolkit.fluxcd.io/namespace: network
    name: k8s-gateway
    namespace: network
    resourceVersion: "2891"
    uid: b2b4591b-9e96-4091-b541-08e91bfbb697
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIBijCCATCgAwIBAgIRANgqqIExaeMgowZYcqxwC2IwCgYIKoZIzj0EAwIwFTET
      MBEGA1UEChMKa3ViZXJuZXRlczAeFw0yNTAyMDIxNzA4MDFaFw0zNTAxMzExNzA4
      MDFaMBUxEzARBgNVBAoTCmt1YmVybmV0ZXMwWTATBgcqhkjOPQIBBggqhkjOPQMB
      BwNCAAS+zNQdb0keCnVUs9ROGQxm+oIVPFAzf3VR0Dw+FWBVyZX8P+TszU5U8kfK
      9lHaUIa9SbITN+NDPFnqX8rHx7Zio2EwXzAOBgNVHQ8BAf8EBAMCAoQwHQYDVR0l
      BBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0O
      BBYEFOgu+CxfvtMlZEIHJ0bNrISfM3YEMAoGCCqGSM49BAMCA0gAMEUCIAUj+DMs
      e6Y8w+GryASLHPIETpEBQyHQrjuFwS9z25puAiEAyZGZen7WhK74zsuT8TDNhBF5
      Vj/Rt17hOzvNjW7UqnM=
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2025-02-02T18:15:54Z"
    name: kube-root-ca.crt
    namespace: network
    resourceVersion: "2352"
    uid: 69a613a4-1513-4017-b3c6-7962188d5e80
- apiVersion: v1
  kind: Namespace
  metadata:
    creationTimestamp: "2025-02-04T17:06:22Z"
    labels:
      kubernetes.io/metadata.name: argocd
    name: argocd
    resourceVersion: "1256275"
    uid: 74904ef8-168c-4016-9483-1864c7e8a3a9
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    creationTimestamp: "2025-02-08T17:53:44Z"
    labels:
      kubernetes.io/metadata.name: argowf
    name: argowf
    resourceVersion: "4486502"
    uid: ad54b6ea-a2bd-437c-80f5-0031e709c50f
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    annotations:
      kustomize.toolkit.fluxcd.io/prune: disabled
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      argocd.argoproj.io/instance: ldit-web
      kubernetes.io/metadata.name: cert-manager
      kustomize.toolkit.fluxcd.io/name: cluster-apps
      kustomize.toolkit.fluxcd.io/namespace: flux-system
      name: cert-manager
    name: cert-manager
    resourceVersion: "4171218"
    uid: 7482cbda-72f0-4a39-bd43-4fddbce9b57d
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    annotations:
      kustomize.toolkit.fluxcd.io/prune: disabled
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kubernetes.io/metadata.name: default
      kustomize.toolkit.fluxcd.io/name: cluster-apps
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: default
    resourceVersion: "2344"
    uid: 8c5a7c6c-226d-4d0b-811b-b1e8da35ddd6
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    annotations:
      fluxcd.controlplane.io/prune: disabled
      kustomize.toolkit.fluxcd.io/ssa: Ignore
    creationTimestamp: "2025-02-02T18:12:52Z"
    labels:
      app.kubernetes.io/instance: flux-system
      app.kubernetes.io/managed-by: flux-operator
      app.kubernetes.io/part-of: flux
      app.kubernetes.io/version: v2.4.0
      fluxcd.controlplane.io/name: flux
      fluxcd.controlplane.io/namespace: flux-system
      kubernetes.io/metadata.name: flux-system
      pod-security.kubernetes.io/warn: restricted
      pod-security.kubernetes.io/warn-version: latest
    name: flux-system
    resourceVersion: "1905"
    uid: 8e319920-6956-4b34-a6af-3368ba1816ab
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    creationTimestamp: "2025-02-10T21:00:16Z"
    labels:
      kubernetes.io/metadata.name: harbor
    name: harbor
    resourceVersion: "6251396"
    uid: f24df79d-4a63-492b-b48e-d8ece5f74ddf
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kubernetes.io/metadata.name: kube-node-lease
    name: kube-node-lease
    resourceVersion: "71"
    uid: 07d1ad6f-c389-44e4-8eb1-ea24e9c5f79a
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kubernetes.io/metadata.name: kube-public
    name: kube-public
    resourceVersion: "58"
    uid: 4f3d0bca-432d-40df-934a-8c0504afc682
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    annotations:
      kustomize.toolkit.fluxcd.io/prune: disabled
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kubernetes.io/metadata.name: kube-system
      kustomize.toolkit.fluxcd.io/name: cluster-apps
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: kube-system
    resourceVersion: "2347"
    uid: e0a42519-b475-4abb-9264-07e8ba72c4cd
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"creationTimestamp":null,"name":"ldit-web"},"spec":{},"status":{}}
    creationTimestamp: "2025-02-05T21:20:05Z"
    labels:
      kubernetes.io/metadata.name: ldit-web
    name: ldit-web
    resourceVersion: "2109831"
    uid: 81c18d73-8551-4fd7-8325-baa08e536f83
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    creationTimestamp: "2025-02-03T17:17:02Z"
    labels:
      kubernetes.io/metadata.name: longhorn-system
    name: longhorn-system
    resourceVersion: "555644"
    uid: 06c408a5-99e6-43bb-a2bf-f3f72d20d91f
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    creationTimestamp: "2025-02-08T13:25:18Z"
    labels:
      kubernetes.io/metadata.name: mail
    name: mail
    resourceVersion: "4328199"
    uid: 33d32082-58e2-4673-9657-2ad283d3c61a
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    annotations:
      kustomize.toolkit.fluxcd.io/prune: disabled
    creationTimestamp: "2025-02-02T18:15:54Z"
    labels:
      kubernetes.io/metadata.name: network
      kustomize.toolkit.fluxcd.io/name: cluster-apps
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: network
    resourceVersion: "2349"
    uid: de4945e7-f4d1-444f-a158-50fcd46a3e76
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    annotations:
      kustomize.toolkit.fluxcd.io/prune: disabled
    creationTimestamp: "2025-02-02T18:12:56Z"
    labels:
      kubernetes.io/metadata.name: observability
      kustomize.toolkit.fluxcd.io/name: cluster-apps
      kustomize.toolkit.fluxcd.io/namespace: flux-system
      name: observability
    name: observability
    resourceVersion: "2351"
    uid: 786adcfa-b8a3-4005-9f37-6905baed3108
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    annotations:
      kustomize.toolkit.fluxcd.io/prune: disabled
    creationTimestamp: "2025-02-02T18:15:54Z"
    labels:
      kubernetes.io/metadata.name: openebs-system
      kustomize.toolkit.fluxcd.io/name: cluster-apps
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: openebs-system
    resourceVersion: "2354"
    uid: aaa9c4e5-be94-4237-b155-326bfa74837d
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"creationTimestamp":null,"name":"test1"},"spec":{},"status":{}}
    creationTimestamp: "2025-02-05T19:28:06Z"
    labels:
      kubernetes.io/metadata.name: test1
    name: test1
    resourceVersion: "2052988"
    uid: 3adce81d-d79c-4965-a7d0-c2f8f05f6a8c
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Node
  metadata:
    annotations:
      csi.volume.kubernetes.io/nodeid: '{"driver.longhorn.io":"ldit1"}'
      extensions.talos.dev/schematic: 941f6f168103ddd4a6a3233d0ba4f5db7c821192ed025ce8a8f9975d16b14873
      node.alpha.kubernetes.io/ttl: "0"
      talos.dev/owned-annotations: '["extensions.talos.dev/schematic"]'
      talos.dev/owned-labels: '["extensions.talos.dev/amd-ucode","extensions.talos.dev/amdgpu","extensions.talos.dev/i915","extensions.talos.dev/intel-ice-firmware","extensions.talos.dev/intel-ucode","extensions.talos.dev/iscsi-tools","extensions.talos.dev/modules.dep","extensions.talos.dev/util-linux-tools","node-role.kubernetes.io/control-plane","node.kubernetes.io/exclude-from-external-load-balancers"]'
      volumes.kubernetes.io/controller-managed-attach-detach: "true"
    creationTimestamp: "2025-02-02T18:10:41Z"
    labels:
      beta.kubernetes.io/arch: amd64
      beta.kubernetes.io/os: linux
      extensions.talos.dev/amd-ucode: "20250109"
      extensions.talos.dev/amdgpu: 20250109-v1.9.3
      extensions.talos.dev/i915: 20250109-v1.9.3
      extensions.talos.dev/intel-ice-firmware: "20250109"
      extensions.talos.dev/intel-ucode: "20241112"
      extensions.talos.dev/iscsi-tools: v0.1.6
      extensions.talos.dev/modules.dep: 6.12.11-talos
      extensions.talos.dev/util-linux-tools: 2.40.4
      kubernetes.io/arch: amd64
      kubernetes.io/hostname: ldit1
      kubernetes.io/os: linux
      node-role.kubernetes.io/control-plane: ""
      node.kubernetes.io/exclude-from-external-load-balancers: ""
    name: ldit1
    resourceVersion: "10547395"
    uid: 3ef9a61c-5531-4cb3-a0b4-a8d0308d8408
  spec:
    podCIDR: 10.69.2.0/24
    podCIDRs:
    - 10.69.2.0/24
  status:
    addresses:
    - address: 192.168.20.20
      type: InternalIP
    - address: ldit1
      type: Hostname
    allocatable:
      cpu: 31950m
      ephemeral-storage: "1726097657046"
      hugepages-1Gi: "0"
      hugepages-2Mi: "0"
      memory: 64775020Ki
      pods: "110"
    capacity:
      cpu: "32"
      ephemeral-storage: 1873227100Ki
      hugepages-1Gi: "0"
      hugepages-2Mi: "0"
      memory: 65401708Ki
      pods: "110"
    conditions:
    - lastHeartbeatTime: "2025-02-02T18:13:54Z"
      lastTransitionTime: "2025-02-02T18:13:54Z"
      message: Cilium is running on this node
      reason: CiliumIsUp
      status: "False"
      type: NetworkUnavailable
    - lastHeartbeatTime: "2025-02-15T13:06:41Z"
      lastTransitionTime: "2025-02-03T16:25:19Z"
      message: kubelet has sufficient memory available
      reason: KubeletHasSufficientMemory
      status: "False"
      type: MemoryPressure
    - lastHeartbeatTime: "2025-02-15T13:06:41Z"
      lastTransitionTime: "2025-02-03T16:25:19Z"
      message: kubelet has no disk pressure
      reason: KubeletHasNoDiskPressure
      status: "False"
      type: DiskPressure
    - lastHeartbeatTime: "2025-02-15T13:06:41Z"
      lastTransitionTime: "2025-02-03T16:25:19Z"
      message: kubelet has sufficient PID available
      reason: KubeletHasSufficientPID
      status: "False"
      type: PIDPressure
    - lastHeartbeatTime: "2025-02-15T13:06:41Z"
      lastTransitionTime: "2025-02-03T19:11:49Z"
      message: kubelet is posting ready status
      reason: KubeletReady
      status: "True"
      type: Ready
    daemonEndpoints:
      kubeletEndpoint:
        Port: 10250
    images:
    - names:
      - docker.io/longhornio/longhorn-instance-manager@sha256:411804ef7be19d4b303728dcbef0462e88f813233b932f2a89b6d1942dcace76
      - docker.io/longhornio/longhorn-instance-manager:v1.8.0
      sizeBytes: 357574362
    - names:
      - docker.io/bitnami/jenkins@sha256:e9a4c08982a9297e6664125076e3a687560a138070311a93badf28015df2ab5a
      - docker.io/bitnami/jenkins:2.479.3-debian-12-r2
      sizeBytes: 248196465
    - names:
      - quay.io/cilium/cilium@sha256:1e0896b1c4c188b4812c7e0bed7ec3f5631388ca88325c1391a0ef9172c448da
      sizeBytes: 224362848
    - names:
      - docker.io/longhornio/longhorn-engine@sha256:e4d94d4026c3508d3c68b46e7c82c41c76cf3ec533a8430f6144170a555b8965
      - docker.io/longhornio/longhorn-engine:v1.8.0
      sizeBytes: 156303986
    - names:
      - docker.io/longhornio/longhorn-manager@sha256:3b8289b3e3bce156665748c3faa89b75a3f68b6bead377d708be544a70ed3b20
      - docker.io/longhornio/longhorn-manager:v1.8.0
      sizeBytes: 119353022
    - names:
      - docker.io/bitnami/harbor-adapter-trivy@sha256:5a0ef6b9653f7a94eda2e73a32afd61425c1dc42f18cb84cef0674756b33a8fe
      - docker.io/bitnami/harbor-adapter-trivy:2.12.2-debian-12-r0
      sizeBytes: 92186975
    - names:
      - docker.io/longhornio/longhorn-share-manager@sha256:92c05080cb1589060b6c5c58f8012022b9a792aac6e548d122d2986dc84e53be
      - docker.io/longhornio/longhorn-share-manager:v1.8.0
      sizeBytes: 87779495
    - names:
      - docker.io/library/nginx@sha256:9ff236ed47fe39cf1f0acf349d0e5137f8b8a6fd0b46e5117a401010e56222e1
      - docker.io/library/nginx:1.25.4
      sizeBytes: 70542235
    - names:
      - docker.io/bitnami/harbor-jobservice@sha256:d22dd097bd1ab516028a4b2472097b153a4688be28693895637b075cb9bac5d4
      - docker.io/bitnami/harbor-jobservice:2.12.2-debian-12-r1
      sizeBytes: 65318720
    - names:
      - docker.io/roundcube/roundcubemail@sha256:204e7ce50dcd8ee5eaaae28baeeeab0a1f22785908fca2115335aba33af4531e
      - docker.io/roundcube/roundcubemail:1.6.9-fpm-alpine
      sizeBytes: 62321511
    - names:
      - docker.io/bitnami/node-exporter@sha256:2b46b5cbd3f7f8980f74cb673e7ec822a3e6ce266e0feb8049efd4a9ecd2e5ac
      - docker.io/bitnami/node-exporter:1.8.2-debian-12-r14
      sizeBytes: 51244595
    - names:
      - ghcr.io/spegel-org/spegel@sha256:aee8841c5039df075bc8fdaf1e0f9d9d0943294c3a6fd7df5392ea037de36048
      sizeBytes: 43279218
    - names:
      - registry.k8s.io/external-dns/external-dns@sha256:4f3ba4c2bd28030caad05bb7b47fbf47549a46d5e8443b74f0be463550b4fc2b
      - registry.k8s.io/external-dns/external-dns:v0.15.1
      sizeBytes: 33661299
    - names:
      - ghcr.io/fluxcd/source-controller@sha256:3c5f0f022f990ffc0daf00e5b199548fc0fa6e7119e972318f0267081a332963
      sizeBytes: 32386205
    - names:
      - registry.k8s.io/kube-apiserver@sha256:b88ede8e7c3ce354ca0c45c448c48c094781ce692883ee56f181fa569338c0ac
      - registry.k8s.io/kube-apiserver:v1.32.1
      sizeBytes: 28671624
    - names:
      - docker.io/cloudflare/cloudflared@sha256:bc2b3edd9eb0257a1a1fc58113e97426afe524e04b898173cd7df01442bcb4b3
      - docker.io/cloudflare/cloudflared:2025.1.1
      sizeBytes: 28152096
    - names:
      - registry.k8s.io/kube-controller-manager@sha256:7e86b2b274365bbc5f5d1e08f0d32d8bb04b8484ac6a92484c298dc695025954
      - registry.k8s.io/kube-controller-manager:v1.32.1
      sizeBytes: 26258470
    - names:
      - docker.io/coredns/coredns@sha256:40384aa1f5ea6bfdc77997d243aec73da05f27aed0c5e9d65bfa98933c519d97
      - docker.io/coredns/coredns:1.12.0
      sizeBytes: 20939036
    - names:
      - registry.k8s.io/kube-scheduler@sha256:b8fcbcd2afe44acf368b24b61813686f64be4d7fff224d305d78a05bac38f72e
      - registry.k8s.io/kube-scheduler:v1.32.1
      sizeBytes: 20657536
    - names:
      - docker.io/bitnami/argo-workflow-controller@sha256:9f8618983a8959331096320f995fafa81b22ab7d9798e6f334afb6092f62580e
      - docker.io/bitnami/argo-workflow-controller:3.6.3-debian-12-r0
      sizeBytes: 20590229
    - names:
      - registry.k8s.io/metrics-server/metrics-server@sha256:ffcb2bf004d6aa0a17d90e0247cf94f2865c8901dcab4427034c341951c239f9
      - registry.k8s.io/metrics-server/metrics-server:v0.7.2
      sizeBytes: 19494617
    - names:
      - docker.io/longhornio/livenessprobe@sha256:8ced2d04e57e44cfba0b9901e984d8f063c72133a1fde3eb607cc634cd2c8244
      - docker.io/longhornio/livenessprobe:v2.15.0
      sizeBytes: 14995918
    - names:
      - docker.io/longhornio/csi-node-driver-registrar@sha256:69cd0517dcd5ca916ad9c8297d3d5370df93c84619cec3d977e8770edf70874f
      - docker.io/longhornio/csi-node-driver-registrar:v2.13.0
      sizeBytes: 14780983
    - names:
      - registry.k8s.io/pause@sha256:ee6521f290b2168b6e0935a181d4cff9be1ac3f505666ef0e3c98fae8199917a
      - registry.k8s.io/pause:3.10
      sizeBytes: 320368
    nodeInfo:
      architecture: amd64
      bootID: 37171b43-0576-4b65-98b9-7cfdf4ba418f
      containerRuntimeVersion: containerd://2.0.2
      kernelVersion: 6.12.11-talos
      kubeProxyVersion: v1.32.1
      kubeletVersion: v1.32.1
      machineID: 9c59afe27b7068d2baeb85fb1f2f0778
      operatingSystem: linux
      osImage: Talos (v1.9.3)
      systemUUID: 4c4c4544-0035-4c10-8038-b8c04f595732
    runtimeHandlers:
    - features:
        recursiveReadOnlyMounts: true
        userNamespaces: true
      name: runc
    - features:
        recursiveReadOnlyMounts: true
        userNamespaces: true
      name: ""
    volumesAttached:
    - devicePath: ""
      name: kubernetes.io/csi/driver.longhorn.io^pvc-2faa6a05-6ec3-4013-923a-e744f046299d
    volumesInUse:
    - kubernetes.io/csi/driver.longhorn.io^pvc-2faa6a05-6ec3-4013-923a-e744f046299d
- apiVersion: v1
  kind: Node
  metadata:
    annotations:
      csi.volume.kubernetes.io/nodeid: '{"driver.longhorn.io":"ldit2"}'
      extensions.talos.dev/schematic: 941f6f168103ddd4a6a3233d0ba4f5db7c821192ed025ce8a8f9975d16b14873
      node.alpha.kubernetes.io/ttl: "0"
      node.longhorn.io/default-disks-config: '[{"path":"/var/lib/longhorn","allowScheduling":true,
        "tags":["ssd", "fast"]},{name:"sdb","path":"var/mnt/disk2","allowScheduling":true,"storageReserved":1024,"tags":["ssd","fast"]}]'
      node.longhorn.io/default-node-tags: '["fast", "storage"]'
      talos.dev/owned-annotations: '["extensions.talos.dev/schematic","node.longhorn.io/default-disks-config","node.longhorn.io/default-node-tags"]'
      talos.dev/owned-labels: '["extensions.talos.dev/amd-ucode","extensions.talos.dev/amdgpu","extensions.talos.dev/i915","extensions.talos.dev/intel-ice-firmware","extensions.talos.dev/intel-ucode","extensions.talos.dev/iscsi-tools","extensions.talos.dev/modules.dep","extensions.talos.dev/util-linux-tools","node-role.kubernetes.io/control-plane","node.longhorn.io/create-default-disk"]'
      volumes.kubernetes.io/controller-managed-attach-detach: "true"
    creationTimestamp: "2025-02-02T18:10:37Z"
    labels:
      beta.kubernetes.io/arch: amd64
      beta.kubernetes.io/os: linux
      extensions.talos.dev/amd-ucode: "20250109"
      extensions.talos.dev/amdgpu: 20250109-v1.9.3
      extensions.talos.dev/i915: 20250109-v1.9.3
      extensions.talos.dev/intel-ice-firmware: "20250109"
      extensions.talos.dev/intel-ucode: "20241112"
      extensions.talos.dev/iscsi-tools: v0.1.6
      extensions.talos.dev/modules.dep: 6.12.11-talos
      extensions.talos.dev/util-linux-tools: 2.40.4
      kubernetes.io/arch: amd64
      kubernetes.io/hostname: ldit2
      kubernetes.io/os: linux
      node-role.kubernetes.io/control-plane: ""
      node.longhorn.io/create-default-disk: config
    name: ldit2
    resourceVersion: "10548740"
    uid: d1aa63a0-ee4b-4e35-8f1e-99d1387eb318
  spec:
    podCIDR: 10.69.0.0/24
    podCIDRs:
    - 10.69.0.0/24
  status:
    addresses:
    - address: 192.168.20.21
      type: InternalIP
    - address: ldit2
      type: Hostname
    allocatable:
      cpu: 31950m
      ephemeral-storage: "1798076703429"
      hugepages-1Gi: "0"
      hugepages-2Mi: "0"
      memory: 64775008Ki
      pods: "110"
    capacity:
      cpu: "32"
      ephemeral-storage: 1951329364Ki
      hugepages-1Gi: "0"
      hugepages-2Mi: "0"
      memory: 65401696Ki
      pods: "110"
    conditions:
    - lastHeartbeatTime: "2025-02-02T18:13:56Z"
      lastTransitionTime: "2025-02-02T18:13:56Z"
      message: Cilium is running on this node
      reason: CiliumIsUp
      status: "False"
      type: NetworkUnavailable
    - lastHeartbeatTime: "2025-02-15T13:08:51Z"
      lastTransitionTime: "2025-02-03T18:59:38Z"
      message: kubelet has sufficient memory available
      reason: KubeletHasSufficientMemory
      status: "False"
      type: MemoryPressure
    - lastHeartbeatTime: "2025-02-15T13:08:51Z"
      lastTransitionTime: "2025-02-03T18:59:38Z"
      message: kubelet has no disk pressure
      reason: KubeletHasNoDiskPressure
      status: "False"
      type: DiskPressure
    - lastHeartbeatTime: "2025-02-15T13:08:51Z"
      lastTransitionTime: "2025-02-03T18:59:38Z"
      message: kubelet has sufficient PID available
      reason: KubeletHasSufficientPID
      status: "False"
      type: PIDPressure
    - lastHeartbeatTime: "2025-02-15T13:08:51Z"
      lastTransitionTime: "2025-02-03T18:59:38Z"
      message: kubelet is posting ready status
      reason: KubeletReady
      status: "True"
      type: Ready
    daemonEndpoints:
      kubeletEndpoint:
        Port: 10250
    images:
    - names:
      - docker.io/longhornio/longhorn-instance-manager@sha256:411804ef7be19d4b303728dcbef0462e88f813233b932f2a89b6d1942dcace76
      - docker.io/longhornio/longhorn-instance-manager:v1.8.0
      sizeBytes: 357574362
    - names:
      - quay.io/cilium/cilium@sha256:1e0896b1c4c188b4812c7e0bed7ec3f5631388ca88325c1391a0ef9172c448da
      sizeBytes: 224362848
    - names:
      - docker.io/longhornio/longhorn-engine@sha256:e4d94d4026c3508d3c68b46e7c82c41c76cf3ec533a8430f6144170a555b8965
      - docker.io/longhornio/longhorn-engine:v1.8.0
      sizeBytes: 156303986
    - names:
      - docker.io/longhornio/longhorn-manager@sha256:3b8289b3e3bce156665748c3faa89b75a3f68b6bead377d708be544a70ed3b20
      - docker.io/longhornio/longhorn-manager:v1.8.0
      sizeBytes: 119353022
    - names:
      - docker.io/bitnami/postgresql@sha256:0f853baf3d0606ec4d749d8fdc38044a03b256e23ef4cebf58a2367f38565b8a
      - docker.io/bitnami/postgresql:14.15.0-debian-12-r8
      sizeBytes: 109396155
    - names:
      - docker.io/longhornio/longhorn-share-manager@sha256:92c05080cb1589060b6c5c58f8012022b9a792aac6e548d122d2986dc84e53be
      - docker.io/longhornio/longhorn-share-manager:v1.8.0
      sizeBytes: 87779495
    - names:
      - docker.io/longhornio/longhorn-ui@sha256:fe7a7a918535d20b030f7969b93d0d97c31db6dd2a6ed5db4e1b484344972755
      - docker.io/longhornio/longhorn-ui:v1.8.0
      sizeBytes: 73235277
    - names:
      - docker.io/library/nginx@sha256:9ff236ed47fe39cf1f0acf349d0e5137f8b8a6fd0b46e5117a401010e56222e1
      - docker.io/library/nginx:1.25.4
      sizeBytes: 70542235
    - names:
      - docker.io/bitnami/harbor-jobservice@sha256:d22dd097bd1ab516028a4b2472097b153a4688be28693895637b075cb9bac5d4
      - docker.io/bitnami/harbor-jobservice:2.12.2-debian-12-r1
      sizeBytes: 65318720
    - names:
      - docker.io/roundcube/roundcubemail@sha256:204e7ce50dcd8ee5eaaae28baeeeab0a1f22785908fca2115335aba33af4531e
      - docker.io/roundcube/roundcubemail:1.6.9-fpm-alpine
      sizeBytes: 62321511
    - names:
      - docker.io/bitnami/node-exporter@sha256:2b46b5cbd3f7f8980f74cb673e7ec822a3e6ce266e0feb8049efd4a9ecd2e5ac
      - docker.io/bitnami/node-exporter:1.8.2-debian-12-r14
      sizeBytes: 51244595
    - names:
      - docker.io/bitnami/redis@sha256:0527618c31c4fe1c01ed6159c0422e72dd70a83a7a3c393b07a40ba300a31415
      - docker.io/bitnami/redis:7.4.2-debian-12-r1
      sizeBytes: 50936828
    - names:
      - docker.io/bitnami/redis@sha256:65f55fefc0acd7f1a1da44b39be3044bcfbc03f4a49c4689453097f929f07132
      - docker.io/bitnami/redis:7.4.2-debian-12-r0
      sizeBytes: 50910951
    - names:
      - ghcr.io/spegel-org/spegel@sha256:aee8841c5039df075bc8fdaf1e0f9d9d0943294c3a6fd7df5392ea037de36048
      sizeBytes: 43279218
    - names:
      - registry.k8s.io/external-dns/external-dns@sha256:4f3ba4c2bd28030caad05bb7b47fbf47549a46d5e8443b74f0be463550b4fc2b
      - registry.k8s.io/external-dns/external-dns:v0.15.1
      sizeBytes: 33661299
    - names:
      - docker.io/longhornio/csi-resizer@sha256:94763536d2c408efb2a43d3e1c5a56ed1e38dd2c1b63659ff2418c0602651d37
      - docker.io/longhornio/csi-resizer:v1.13.1
      sizeBytes: 32400492
    - names:
      - docker.io/longhornio/csi-provisioner@sha256:efc6445ad5875a49a69615b46a7edb19e42fefdc73a2abb9dfe7b2fd21efe7ad
      - docker.io/longhornio/csi-provisioner:v5.1.0-20241220
      sizeBytes: 32239934
    - names:
      - docker.io/longhornio/csi-attacher@sha256:86afa429db9da56ff7b1b53541ff508a0b71ed5dd8c57e392d93f6d4174f1abd
      - docker.io/longhornio/csi-attacher:v4.8.0
      sizeBytes: 32230986
    - names:
      - docker.io/longhornio/csi-snapshotter@sha256:dff0c369ad0dbea80f9c657ae817122c036d2775e3c98c2c62ab6138d2a9d6ec
      - docker.io/longhornio/csi-snapshotter:v8.2.0
      sizeBytes: 31142597
    - names:
      - registry.k8s.io/kube-apiserver@sha256:b88ede8e7c3ce354ca0c45c448c48c094781ce692883ee56f181fa569338c0ac
      - registry.k8s.io/kube-apiserver:v1.32.1
      sizeBytes: 28671624
    - names:
      - registry.k8s.io/kube-controller-manager@sha256:7e86b2b274365bbc5f5d1e08f0d32d8bb04b8484ac6a92484c298dc695025954
      - registry.k8s.io/kube-controller-manager:v1.32.1
      sizeBytes: 26258470
    - names:
      - docker.io/coredns/coredns@sha256:40384aa1f5ea6bfdc77997d243aec73da05f27aed0c5e9d65bfa98933c519d97
      - docker.io/coredns/coredns:1.12.0
      sizeBytes: 20939036
    - names:
      - registry.k8s.io/kube-scheduler@sha256:b8fcbcd2afe44acf368b24b61813686f64be4d7fff224d305d78a05bac38f72e
      - registry.k8s.io/kube-scheduler:v1.32.1
      sizeBytes: 20657536
    - names:
      - docker.io/bitnami/argo-workflow-controller@sha256:9f8618983a8959331096320f995fafa81b22ab7d9798e6f334afb6092f62580e
      - docker.io/bitnami/argo-workflow-controller:3.6.3-debian-12-r0
      sizeBytes: 20590229
    - names:
      - docker.io/longhornio/livenessprobe@sha256:8ced2d04e57e44cfba0b9901e984d8f063c72133a1fde3eb607cc634cd2c8244
      - docker.io/longhornio/livenessprobe:v2.15.0
      sizeBytes: 14995918
    - names:
      - docker.io/longhornio/csi-node-driver-registrar@sha256:69cd0517dcd5ca916ad9c8297d3d5370df93c84619cec3d977e8770edf70874f
      - docker.io/longhornio/csi-node-driver-registrar:v2.13.0
      sizeBytes: 14780983
    - names:
      - registry.k8s.io/pause@sha256:ee6521f290b2168b6e0935a181d4cff9be1ac3f505666ef0e3c98fae8199917a
      - registry.k8s.io/pause:3.10
      sizeBytes: 320368
    nodeInfo:
      architecture: amd64
      bootID: 0f3aa03a-d08b-4331-ae87-a486e4091224
      containerRuntimeVersion: containerd://2.0.2
      kernelVersion: 6.12.11-talos
      kubeProxyVersion: v1.32.1
      kubeletVersion: v1.32.1
      machineID: 9005fc912e29f7765460a4b32641ac35
      operatingSystem: linux
      osImage: Talos (v1.9.3)
      systemUUID: 4c4c4544-0035-4c10-8038-b6c04f595732
    runtimeHandlers:
    - features:
        recursiveReadOnlyMounts: true
        userNamespaces: true
      name: runc
    - features:
        recursiveReadOnlyMounts: true
        userNamespaces: true
      name: ""
    volumesAttached:
    - devicePath: ""
      name: kubernetes.io/csi/driver.longhorn.io^pvc-f30a4328-12ae-429d-b673-5e6be31b2a1d
    - devicePath: ""
      name: kubernetes.io/csi/driver.longhorn.io^pvc-17e2804d-3d1e-402b-a1c2-f29db3a2a16f
    volumesInUse:
    - kubernetes.io/csi/driver.longhorn.io^pvc-17e2804d-3d1e-402b-a1c2-f29db3a2a16f
    - kubernetes.io/csi/driver.longhorn.io^pvc-41cff22a-126e-4d0f-bde8-74aa06671c3d
    - kubernetes.io/csi/driver.longhorn.io^pvc-f30a4328-12ae-429d-b673-5e6be31b2a1d
- apiVersion: v1
  kind: Node
  metadata:
    annotations:
      csi.volume.kubernetes.io/nodeid: '{"driver.longhorn.io":"lditdb"}'
      extensions.talos.dev/schematic: 941f6f168103ddd4a6a3233d0ba4f5db7c821192ed025ce8a8f9975d16b14873
      node.alpha.kubernetes.io/ttl: "0"
      node.longhorn.io/default-disks-config: '[{"path":"/var/lib/longhorn","allowScheduling":true,
        "tags":["ssd", "fast"]},{name:"sda","path":"var/mnt/disk2","allowScheduling":true,"storageReserved":1024,"tags":["ssd","fast"]}]'
      node.longhorn.io/default-node-tags: '["fast", "storage"]'
      talos.dev/owned-annotations: '["extensions.talos.dev/schematic","node.longhorn.io/default-disks-config","node.longhorn.io/default-node-tags"]'
      talos.dev/owned-labels: '["extensions.talos.dev/amd-ucode","extensions.talos.dev/amdgpu","extensions.talos.dev/i915","extensions.talos.dev/intel-ice-firmware","extensions.talos.dev/intel-ucode","extensions.talos.dev/iscsi-tools","extensions.talos.dev/modules.dep","extensions.talos.dev/util-linux-tools","node.longhorn.io/create-default-disk"]'
      volumes.kubernetes.io/controller-managed-attach-detach: "true"
    creationTimestamp: "2025-02-02T18:10:38Z"
    labels:
      beta.kubernetes.io/arch: amd64
      beta.kubernetes.io/os: linux
      extensions.talos.dev/amd-ucode: "20250109"
      extensions.talos.dev/amdgpu: 20250109-v1.9.3
      extensions.talos.dev/i915: 20250109-v1.9.3
      extensions.talos.dev/intel-ice-firmware: "20250109"
      extensions.talos.dev/intel-ucode: "20241112"
      extensions.talos.dev/iscsi-tools: v0.1.6
      extensions.talos.dev/modules.dep: 6.12.11-talos
      extensions.talos.dev/util-linux-tools: 2.40.4
      kubernetes.io/arch: amd64
      kubernetes.io/hostname: lditdb
      kubernetes.io/os: linux
      node.longhorn.io/create-default-disk: config
    name: lditdb
    resourceVersion: "10548766"
    uid: a4172af2-d0ac-4e74-853c-5c066d5eb89f
  spec:
    podCIDR: 10.69.1.0/24
    podCIDRs:
    - 10.69.1.0/24
  status:
    addresses:
    - address: 192.168.20.50
      type: InternalIP
    - address: lditdb
      type: Hostname
    allocatable:
      cpu: 31950m
      ephemeral-storage: "3597496210415"
      hugepages-1Gi: "0"
      hugepages-2Mi: "0"
      memory: 263332936Ki
      pods: "110"
    capacity:
      cpu: "32"
      ephemeral-storage: 3903824492Ki
      hugepages-1Gi: "0"
      hugepages-2Mi: "0"
      memory: 263828552Ki
      pods: "110"
    conditions:
    - lastHeartbeatTime: "2025-02-02T18:13:44Z"
      lastTransitionTime: "2025-02-02T18:13:44Z"
      message: Cilium is running on this node
      reason: CiliumIsUp
      status: "False"
      type: NetworkUnavailable
    - lastHeartbeatTime: "2025-02-15T13:08:52Z"
      lastTransitionTime: "2025-02-04T17:59:18Z"
      message: kubelet has sufficient memory available
      reason: KubeletHasSufficientMemory
      status: "False"
      type: MemoryPressure
    - lastHeartbeatTime: "2025-02-15T13:08:52Z"
      lastTransitionTime: "2025-02-04T17:59:18Z"
      message: kubelet has no disk pressure
      reason: KubeletHasNoDiskPressure
      status: "False"
      type: DiskPressure
    - lastHeartbeatTime: "2025-02-15T13:08:52Z"
      lastTransitionTime: "2025-02-04T17:59:18Z"
      message: kubelet has sufficient PID available
      reason: KubeletHasSufficientPID
      status: "False"
      type: PIDPressure
    - lastHeartbeatTime: "2025-02-15T13:08:52Z"
      lastTransitionTime: "2025-02-04T18:04:24Z"
      message: kubelet is posting ready status
      reason: KubeletReady
      status: "True"
      type: Ready
    daemonEndpoints:
      kubeletEndpoint:
        Port: 10250
    images:
    - names:
      - docker.io/longhornio/longhorn-instance-manager@sha256:411804ef7be19d4b303728dcbef0462e88f813233b932f2a89b6d1942dcace76
      - docker.io/longhornio/longhorn-instance-manager:v1.8.0
      sizeBytes: 357574362
    - names:
      - quay.io/cilium/cilium@sha256:1e0896b1c4c188b4812c7e0bed7ec3f5631388ca88325c1391a0ef9172c448da
      sizeBytes: 224362848
    - names:
      - docker.io/bitnami/wordpress@sha256:0b4e3486d9d18e76ad9556115a546d962a6fa09ca6b75f9656d8aaa47091aa75
      - docker.io/bitnami/wordpress:6.7.1-debian-12-r14
      sizeBytes: 216256446
    - names:
      - docker.io/bitnami/argo-cd@sha256:80ff62f26fa1c5b33afc30afb0d3c82eae2477c9ed42d68253a99f7b8bad4bc0
      - docker.io/bitnami/argo-cd:2.14.2-debian-12-r0
      sizeBytes: 170412782
    - names:
      - docker.io/bitnami/argo-cd@sha256:b08a4c794a0910e5cc8473604dab729750f507532418ada11db2468e180b5b2a
      - docker.io/bitnami/argo-cd:2.14.1-debian-12-r0
      sizeBytes: 170409663
    - names:
      - docker.io/longhornio/longhorn-engine@sha256:e4d94d4026c3508d3c68b46e7c82c41c76cf3ec533a8430f6144170a555b8965
      - docker.io/longhornio/longhorn-engine:v1.8.0
      sizeBytes: 156303986
    - names:
      - docker.io/bitnami/mariadb@sha256:6aeaf9df16595d7dea92280e1c5e1c38b7565cad67f713b707787dba96c95c1f
      - docker.io/bitnami/mariadb:11.4.4-debian-12-r3
      sizeBytes: 131531367
    - names:
      - docker.io/longhornio/longhorn-manager@sha256:3b8289b3e3bce156665748c3faa89b75a3f68b6bead377d708be544a70ed3b20
      - docker.io/longhornio/longhorn-manager:v1.8.0
      sizeBytes: 119353022
    - names:
      - docker.io/bitnami/postgresql@sha256:089eae04d854b51162aadc48b3c29748fc4f28d8c7d992a6c3d7def490757223
      - docker.io/bitnami/postgresql:17.2.0-debian-12-r10
      sizeBytes: 110041928
    - names:
      - docker.io/bitnami/postgresql@sha256:0f853baf3d0606ec4d749d8fdc38044a03b256e23ef4cebf58a2367f38565b8a
      - docker.io/bitnami/postgresql:14.15.0-debian-12-r8
      sizeBytes: 109396155
    - names:
      - docker.io/longhornio/longhorn-share-manager@sha256:92c05080cb1589060b6c5c58f8012022b9a792aac6e548d122d2986dc84e53be
      - docker.io/longhornio/longhorn-share-manager:v1.8.0
      sizeBytes: 87779495
    - names:
      - docker.io/library/nginx@sha256:9ff236ed47fe39cf1f0acf349d0e5137f8b8a6fd0b46e5117a401010e56222e1
      - docker.io/library/nginx:1.25.4
      sizeBytes: 70542235
    - names:
      - docker.io/bitnami/harbor-core@sha256:3b6012b6361154a7fdd320f446a31780a03e7c238c1d98f593ae4b297e4f130b
      - docker.io/bitnami/harbor-core:2.12.2-debian-12-r1
      sizeBytes: 68777130
    - names:
      - docker.io/roundcube/roundcubemail@sha256:204e7ce50dcd8ee5eaaae28baeeeab0a1f22785908fca2115335aba33af4531e
      - docker.io/roundcube/roundcubemail:1.6.9-fpm-alpine
      sizeBytes: 62321511
    - names:
      - docker.io/bitnami/node-exporter@sha256:2b46b5cbd3f7f8980f74cb673e7ec822a3e6ce266e0feb8049efd4a9ecd2e5ac
      - docker.io/bitnami/node-exporter:1.8.2-debian-12-r14
      sizeBytes: 51244595
    - names:
      - docker.io/bitnami/redis@sha256:0527618c31c4fe1c01ed6159c0422e72dd70a83a7a3c393b07a40ba300a31415
      - docker.io/bitnami/redis:7.4.2-debian-12-r1
      sizeBytes: 50936828
    - names:
      - docker.io/bitnami/redis@sha256:65f55fefc0acd7f1a1da44b39be3044bcfbc03f4a49c4689453097f929f07132
      - docker.io/bitnami/redis:7.4.2-debian-12-r0
      sizeBytes: 50910951
    - names:
      - ghcr.io/spegel-org/spegel@sha256:aee8841c5039df075bc8fdaf1e0f9d9d0943294c3a6fd7df5392ea037de36048
      sizeBytes: 43279218
    - names:
      - docker.io/bitnami/argo-workflow-cli@sha256:49b8cb11b0d1a3f0d24e419476a9a05512a25eb2d6301d61e59ad7a60f2a40a0
      - docker.io/bitnami/argo-workflow-cli:3.6.3-debian-12-r0
      sizeBytes: 33795901
    - names:
      - registry.k8s.io/external-dns/external-dns@sha256:4f3ba4c2bd28030caad05bb7b47fbf47549a46d5e8443b74f0be463550b4fc2b
      - registry.k8s.io/external-dns/external-dns:v0.15.1
      sizeBytes: 33661299
    - names:
      - docker.io/bitnami/argo-workflow-controller@sha256:9f8618983a8959331096320f995fafa81b22ab7d9798e6f334afb6092f62580e
      - docker.io/bitnami/argo-workflow-controller:3.6.3-debian-12-r0
      sizeBytes: 20590229
    - names:
      - docker.io/longhornio/livenessprobe@sha256:8ced2d04e57e44cfba0b9901e984d8f063c72133a1fde3eb607cc634cd2c8244
      - docker.io/longhornio/livenessprobe:v2.15.0
      sizeBytes: 14995918
    - names:
      - docker.io/longhornio/csi-node-driver-registrar@sha256:69cd0517dcd5ca916ad9c8297d3d5370df93c84619cec3d977e8770edf70874f
      - docker.io/longhornio/csi-node-driver-registrar:v2.13.0
      sizeBytes: 14780983
    - names:
      - registry.k8s.io/pause@sha256:ee6521f290b2168b6e0935a181d4cff9be1ac3f505666ef0e3c98fae8199917a
      - registry.k8s.io/pause:3.10
      sizeBytes: 320368
    nodeInfo:
      architecture: amd64
      bootID: 5adc4e05-840c-44e6-abc6-def60a79ef5e
      containerRuntimeVersion: containerd://2.0.2
      kernelVersion: 6.12.11-talos
      kubeProxyVersion: v1.32.1
      kubeletVersion: v1.32.1
      machineID: ee2cf78e6c8c20804e54d1b2f86188ba
      operatingSystem: linux
      osImage: Talos (v1.9.3)
      systemUUID: 30373637-3233-584d-5135-343130363958
    runtimeHandlers:
    - features:
        recursiveReadOnlyMounts: true
        userNamespaces: true
      name: runc
    - features:
        recursiveReadOnlyMounts: true
        userNamespaces: true
      name: ""
    volumesAttached:
    - devicePath: ""
      name: kubernetes.io/csi/driver.longhorn.io^pvc-82d6bed5-323b-41de-bef0-aeea180fd2ef
    - devicePath: ""
      name: kubernetes.io/csi/driver.longhorn.io^pvc-70431a4a-aa41-4079-b7ff-f319c245241b
    - devicePath: ""
      name: kubernetes.io/csi/driver.longhorn.io^pvc-8e559de1-d158-43f9-81f9-8f7f00d2d799
    - devicePath: ""
      name: kubernetes.io/csi/driver.longhorn.io^pvc-c556995f-79bb-44f1-a4a3-e50beb7f415a
    volumesInUse:
    - kubernetes.io/csi/driver.longhorn.io^pvc-70431a4a-aa41-4079-b7ff-f319c245241b
    - kubernetes.io/csi/driver.longhorn.io^pvc-82d6bed5-323b-41de-bef0-aeea180fd2ef
    - kubernetes.io/csi/driver.longhorn.io^pvc-8e559de1-d158-43f9-81f9-8f7f00d2d799
    - kubernetes.io/csi/driver.longhorn.io^pvc-b0728dfa-49bb-4c8e-a317-ad0ee2be2bc4
    - kubernetes.io/csi/driver.longhorn.io^pvc-c556995f-79bb-44f1-a4a3-e50beb7f415a
- apiVersion: v1
  kind: Node
  metadata:
    annotations:
      csi.volume.kubernetes.io/nodeid: '{"driver.longhorn.io":"ldite1"}'
      extensions.talos.dev/schematic: 941f6f168103ddd4a6a3233d0ba4f5db7c821192ed025ce8a8f9975d16b14873
      node.alpha.kubernetes.io/ttl: "0"
      talos.dev/owned-annotations: '["extensions.talos.dev/schematic"]'
      talos.dev/owned-labels: '["extensions.talos.dev/amd-ucode","extensions.talos.dev/amdgpu","extensions.talos.dev/i915","extensions.talos.dev/intel-ice-firmware","extensions.talos.dev/intel-ucode","extensions.talos.dev/iscsi-tools","extensions.talos.dev/modules.dep","extensions.talos.dev/util-linux-tools","node-role.kubernetes.io/control-plane","node.kubernetes.io/exclude-from-external-load-balancers"]'
      volumes.kubernetes.io/controller-managed-attach-detach: "true"
    creationTimestamp: "2025-02-02T18:11:02Z"
    labels:
      beta.kubernetes.io/arch: amd64
      beta.kubernetes.io/os: linux
      extensions.talos.dev/amd-ucode: "20250109"
      extensions.talos.dev/amdgpu: 20250109-v1.9.3
      extensions.talos.dev/i915: 20250109-v1.9.3
      extensions.talos.dev/intel-ice-firmware: "20250109"
      extensions.talos.dev/intel-ucode: "20241112"
      extensions.talos.dev/iscsi-tools: v0.1.6
      extensions.talos.dev/modules.dep: 6.12.11-talos
      extensions.talos.dev/util-linux-tools: 2.40.4
      kubernetes.io/arch: amd64
      kubernetes.io/hostname: ldite1
      kubernetes.io/os: linux
      node-role.kubernetes.io/control-plane: ""
      node.kubernetes.io/exclude-from-external-load-balancers: ""
    name: ldite1
    resourceVersion: "10548880"
    uid: 5094814a-de49-4f04-8eea-696a9373c8d6
  spec:
    podCIDR: 10.69.5.0/24
    podCIDRs:
    - 10.69.5.0/24
  status:
    addresses:
    - address: 192.168.20.30
      type: InternalIP
    - address: ldite1
      type: Hostname
    allocatable:
      cpu: 127950m
      ephemeral-storage: "898023547032"
      hugepages-1Gi: "0"
      hugepages-2Mi: "0"
      memory: 131174712Ki
      pods: "110"
    capacity:
      cpu: "128"
      ephemeral-storage: 974709184Ki
      hugepages-1Gi: "0"
      hugepages-2Mi: "0"
      memory: 131801400Ki
      pods: "110"
    conditions:
    - lastHeartbeatTime: "2025-02-02T18:13:36Z"
      lastTransitionTime: "2025-02-02T18:13:36Z"
      message: Cilium is running on this node
      reason: CiliumIsUp
      status: "False"
      type: NetworkUnavailable
    - lastHeartbeatTime: "2025-02-15T13:09:03Z"
      lastTransitionTime: "2025-02-02T18:11:02Z"
      message: kubelet has sufficient memory available
      reason: KubeletHasSufficientMemory
      status: "False"
      type: MemoryPressure
    - lastHeartbeatTime: "2025-02-15T13:09:03Z"
      lastTransitionTime: "2025-02-02T18:11:02Z"
      message: kubelet has no disk pressure
      reason: KubeletHasNoDiskPressure
      status: "False"
      type: DiskPressure
    - lastHeartbeatTime: "2025-02-15T13:09:03Z"
      lastTransitionTime: "2025-02-02T18:11:02Z"
      message: kubelet has sufficient PID available
      reason: KubeletHasSufficientPID
      status: "False"
      type: PIDPressure
    - lastHeartbeatTime: "2025-02-15T13:09:03Z"
      lastTransitionTime: "2025-02-03T17:08:28Z"
      message: kubelet is posting ready status
      reason: KubeletReady
      status: "True"
      type: Ready
    daemonEndpoints:
      kubeletEndpoint:
        Port: 10250
    images:
    - names:
      - docker.io/mailserver/docker-mailserver@sha256:01b82c6c1c64d5b73ba161c0107e5d7d038ebdce85eb9ed084f043e9c2a7943b
      - docker.io/mailserver/docker-mailserver:14.0.0
      sizeBytes: 397916453
    - names:
      - docker.io/longhornio/longhorn-instance-manager@sha256:411804ef7be19d4b303728dcbef0462e88f813233b932f2a89b6d1942dcace76
      - docker.io/longhornio/longhorn-instance-manager:v1.8.0
      sizeBytes: 357574362
    - names:
      - docker.io/bitnami/jenkins@sha256:e9a4c08982a9297e6664125076e3a687560a138070311a93badf28015df2ab5a
      - docker.io/bitnami/jenkins:2.479.3-debian-12-r2
      sizeBytes: 248196465
    - names:
      - quay.io/cilium/cilium@sha256:1e0896b1c4c188b4812c7e0bed7ec3f5631388ca88325c1391a0ef9172c448da
      sizeBytes: 224362848
    - names:
      - docker.io/bitnami/argo-cd@sha256:b08a4c794a0910e5cc8473604dab729750f507532418ada11db2468e180b5b2a
      - docker.io/bitnami/argo-cd:2.14.1-debian-12-r0
      sizeBytes: 170409663
    - names:
      - docker.io/longhornio/longhorn-engine@sha256:e4d94d4026c3508d3c68b46e7c82c41c76cf3ec533a8430f6144170a555b8965
      - docker.io/longhornio/longhorn-engine:v1.8.0
      sizeBytes: 156303986
    - names:
      - docker.io/longhornio/longhorn-manager@sha256:3b8289b3e3bce156665748c3faa89b75a3f68b6bead377d708be544a70ed3b20
      - docker.io/longhornio/longhorn-manager:v1.8.0
      sizeBytes: 119353022
    - names:
      - docker.io/bitnami/postgresql@sha256:089eae04d854b51162aadc48b3c29748fc4f28d8c7d992a6c3d7def490757223
      - docker.io/bitnami/postgresql:17.2.0-debian-12-r10
      sizeBytes: 110041928
    - names:
      - registry.k8s.io/ingress-nginx/controller@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
      sizeBytes: 107894584
    - names:
      - docker.io/bitnami/prometheus@sha256:9f2868d2c10b9c6eb2473fd6f133bdcf4acccf7b958d804d6143ba71322816e1
      - docker.io/bitnami/prometheus:2.55.1-debian-12-r7
      sizeBytes: 103161855
    - names:
      - docker.io/longhornio/longhorn-share-manager@sha256:92c05080cb1589060b6c5c58f8012022b9a792aac6e548d122d2986dc84e53be
      - docker.io/longhornio/longhorn-share-manager:v1.8.0
      sizeBytes: 87779495
    - names:
      - docker.io/bitnami/prometheus-operator@sha256:8da0402d264f7d7f35c9b65556bfb254a63976a9554083381de953d8678ec6eb
      - docker.io/bitnami/prometheus-operator:0.79.2-debian-12-r2
      sizeBytes: 77180459
    - names:
      - docker.io/longhornio/longhorn-ui@sha256:fe7a7a918535d20b030f7969b93d0d97c31db6dd2a6ed5db4e1b484344972755
      - docker.io/longhornio/longhorn-ui:v1.8.0
      sizeBytes: 73235277
    - names:
      - docker.io/library/nginx@sha256:9ff236ed47fe39cf1f0acf349d0e5137f8b8a6fd0b46e5117a401010e56222e1
      - docker.io/library/nginx:1.25.4
      sizeBytes: 70542235
    - names:
      - docker.io/bitnami/harbor-portal@sha256:72df93fe77e46767213f1d42639e56c913f18d7b8680534de7ac7cb59af90ce6
      - docker.io/bitnami/harbor-portal:2.12.2-debian-12-r0
      sizeBytes: 69270629
    - names:
      - docker.io/bitnami/harbor-core@sha256:3b6012b6361154a7fdd320f446a31780a03e7c238c1d98f593ae4b297e4f130b
      - docker.io/bitnami/harbor-core:2.12.2-debian-12-r1
      sizeBytes: 68777130
    - names:
      - docker.io/bitnami/nginx@sha256:c02e18884badbd9482fd731668f75a3033124c748bc709651fb06062d0ab38c1
      - docker.io/bitnami/nginx:1.27.3-debian-12-r5
      sizeBytes: 67094807
    - names:
      - docker.io/bitnami/harbor-jobservice@sha256:d22dd097bd1ab516028a4b2472097b153a4688be28693895637b075cb9bac5d4
      - docker.io/bitnami/harbor-jobservice:2.12.2-debian-12-r1
      sizeBytes: 65318720
    - names:
      - docker.io/bitnami/harbor-registryctl@sha256:30f734e7d7cb9b79d0500278241de01a8595219ccee73bd91ee977fe59d3f96f
      - docker.io/bitnami/harbor-registryctl:2.12.2-debian-12-r1
      sizeBytes: 65233081
    - names:
      - docker.io/bitnami/alertmanager@sha256:48b628143248ecb846468dc74761ba814c49ac90ae3d8925b27d1687b5090a1f
      - docker.io/bitnami/alertmanager:0.28.0-debian-12-r2
      sizeBytes: 63893985
    - names:
      - docker.io/roundcube/roundcubemail@sha256:204e7ce50dcd8ee5eaaae28baeeeab0a1f22785908fca2115335aba33af4531e
      - docker.io/roundcube/roundcubemail:1.6.9-fpm-alpine
      sizeBytes: 62321511
    - names:
      - docker.io/bitnami/kube-state-metrics@sha256:2ac11d811861e3e6b2e2f35534409d35e4a0ada315512d34af52a123e83ab0b0
      - docker.io/bitnami/kube-state-metrics:2.14.0-debian-12-r5
      sizeBytes: 60412686
    - names:
      - ghcr.io/fluxcd/kustomize-controller@sha256:e3b0cf847e9cdf47b19af0fbcfe22786b80b598e0caeea8b6d2a5f9c26a48a24
      sizeBytes: 54969920
    - names:
      - docker.io/bitnami/harbor-registry@sha256:96bdb1cb6ddbe69de06343993781bf7f6c2b05e01073684095843668884edd8c
      - docker.io/bitnami/harbor-registry:2.12.2-debian-12-r1
      sizeBytes: 52349360
    - names:
      - docker.io/bitnami/blackbox-exporter@sha256:a924bf138d86050ef3def014d1b65757755efe9d9cc7a9fcd0ee8129d74ca077
      - docker.io/bitnami/blackbox-exporter:0.25.0-debian-12-r24
      sizeBytes: 51609586
    - names:
      - docker.io/bitnami/node-exporter@sha256:2b46b5cbd3f7f8980f74cb673e7ec822a3e6ce266e0feb8049efd4a9ecd2e5ac
      - docker.io/bitnami/node-exporter:1.8.2-debian-12-r14
      sizeBytes: 51244595
    - names:
      - docker.io/bitnami/redis@sha256:0527618c31c4fe1c01ed6159c0422e72dd70a83a7a3c393b07a40ba300a31415
      - docker.io/bitnami/redis:7.4.2-debian-12-r1
      sizeBytes: 50936828
    - names:
      - docker.io/bitnami/memcached@sha256:5213bae337a3f6e087860a3236300d091f0697bfbf3bd1c00403bbf7122b2f4f
      - docker.io/bitnami/memcached:1.6.34-debian-12-r0
      sizeBytes: 47567705
    - names:
      - ghcr.io/mendhak/http-https-echo@sha256:440ca6b810bc04606aac700e461caca5543eaa882c4e0af96a33424d05a23592
      - ghcr.io/mendhak/http-https-echo:35
      sizeBytes: 47315759
    - names:
      - ghcr.io/fluxcd/notification-controller@sha256:425309a159b15e07f7d97622effc79bc432a37ed55289dd465d37fa217a92a7d
      sizeBytes: 43654595
    - names:
      - ghcr.io/spegel-org/spegel@sha256:aee8841c5039df075bc8fdaf1e0f9d9d0943294c3a6fd7df5392ea037de36048
      sizeBytes: 43279218
    - names:
      - ghcr.io/fluxcd/helm-controller@sha256:4c75ca6c24ceb1f1bd7e935d9287a93e4f925c512f206763ec5a47de3ef3ff48
      sizeBytes: 40818921
    - names:
      - quay.io/openebs/provisioner-localpv@sha256:072f20d5217eca8347afe5a6e464cb36cd32465983f7824f043b58308d7171d2
      - quay.io/openebs/provisioner-localpv:4.1.4
      sizeBytes: 33822131
    - names:
      - docker.io/bitnami/argo-workflow-cli@sha256:49b8cb11b0d1a3f0d24e419476a9a05512a25eb2d6301d61e59ad7a60f2a40a0
      - docker.io/bitnami/argo-workflow-cli:3.6.3-debian-12-r0
      sizeBytes: 33795901
    - names:
      - registry.k8s.io/external-dns/external-dns@sha256:4f3ba4c2bd28030caad05bb7b47fbf47549a46d5e8443b74f0be463550b4fc2b
      - registry.k8s.io/external-dns/external-dns:v0.15.1
      sizeBytes: 33661299
    - names:
      - ghcr.io/controlplaneio-fluxcd/flux-operator@sha256:8230f8e0357cf79bc0337b7e429e20134eacec6b0ac6906bc87fd66c39700d9e
      - ghcr.io/controlplaneio-fluxcd/flux-operator:v0.13.0
      sizeBytes: 33597569
    - names:
      - docker.io/longhornio/csi-resizer@sha256:94763536d2c408efb2a43d3e1c5a56ed1e38dd2c1b63659ff2418c0602651d37
      - docker.io/longhornio/csi-resizer:v1.13.1
      sizeBytes: 32400492
    - names:
      - docker.io/longhornio/csi-provisioner@sha256:efc6445ad5875a49a69615b46a7edb19e42fefdc73a2abb9dfe7b2fd21efe7ad
      - docker.io/longhornio/csi-provisioner:v5.1.0-20241220
      sizeBytes: 32239934
    - names:
      - docker.io/longhornio/csi-attacher@sha256:86afa429db9da56ff7b1b53541ff508a0b71ed5dd8c57e392d93f6d4174f1abd
      - docker.io/longhornio/csi-attacher:v4.8.0
      sizeBytes: 32230986
    - names:
      - docker.io/longhornio/csi-snapshotter@sha256:dff0c369ad0dbea80f9c657ae817122c036d2775e3c98c2c62ab6138d2a9d6ec
      - docker.io/longhornio/csi-snapshotter:v8.2.0
      sizeBytes: 31142597
    - names:
      - ghcr.io/stakater/reloader@sha256:e989909133e9fa2b0e69d814b7d1f313696b626a54e3e9b53626f3d968cf15c8
      - ghcr.io/stakater/reloader:v1.2.1
      sizeBytes: 29467276
    - names:
      - registry.k8s.io/kube-apiserver@sha256:b88ede8e7c3ce354ca0c45c448c48c094781ce692883ee56f181fa569338c0ac
      - registry.k8s.io/kube-apiserver:v1.32.1
      sizeBytes: 28671624
    - names:
      - docker.io/cloudflare/cloudflared@sha256:bc2b3edd9eb0257a1a1fc58113e97426afe524e04b898173cd7df01442bcb4b3
      - docker.io/cloudflare/cloudflared:2025.1.1
      sizeBytes: 28152096
    - names:
      - registry.k8s.io/ingress-nginx/kube-webhook-certgen@sha256:aaafd456bda110628b2d4ca6296f38731a3aaf0bf7581efae824a41c770a8fc4
      sizeBytes: 26959944
    - names:
      - registry.k8s.io/kube-controller-manager@sha256:7e86b2b274365bbc5f5d1e08f0d32d8bb04b8484ac6a92484c298dc695025954
      - registry.k8s.io/kube-controller-manager:v1.32.1
      sizeBytes: 26258470
    - names:
      - quay.io/jetstack/cert-manager-controller@sha256:771a117d226da28fb1fa600281a615fcf648ac743e56c6a9012d592c78a04995
      - quay.io/jetstack/cert-manager-controller:v1.16.3
      sizeBytes: 21200633
    - names:
      - docker.io/coredns/coredns@sha256:40384aa1f5ea6bfdc77997d243aec73da05f27aed0c5e9d65bfa98933c519d97
      - docker.io/coredns/coredns:1.12.0
      sizeBytes: 20939036
    - names:
      - registry.k8s.io/kube-scheduler@sha256:b8fcbcd2afe44acf368b24b61813686f64be4d7fff224d305d78a05bac38f72e
      - registry.k8s.io/kube-scheduler:v1.32.1
      sizeBytes: 20657536
    - names:
      - docker.io/bitnami/argo-workflow-controller@sha256:9f8618983a8959331096320f995fafa81b22ab7d9798e6f334afb6092f62580e
      - docker.io/bitnami/argo-workflow-controller:3.6.3-debian-12-r0
      sizeBytes: 20590229
    - names:
      - quay.io/jetstack/cert-manager-webhook@sha256:c86dd3ad1efd98889f3d79c6aaa3e43a76e103fa8c27f207c3cb88452aff95e4
      - quay.io/jetstack/cert-manager-webhook:v1.16.3
      sizeBytes: 18204442
    nodeInfo:
      architecture: amd64
      bootID: a355bba4-7d47-44ea-8f4d-7a948d229a86
      containerRuntimeVersion: containerd://2.0.2
      kernelVersion: 6.12.11-talos
      kubeProxyVersion: v1.32.1
      kubeletVersion: v1.32.1
      machineID: 621d9d90b281a3c6429f3dc51d29f67d
      operatingSystem: linux
      osImage: Talos (v1.9.3)
      systemUUID: 00000000-0000-0000-0000-3cecef42f6b8
    runtimeHandlers:
    - features:
        recursiveReadOnlyMounts: true
        userNamespaces: true
      name: runc
    - features:
        recursiveReadOnlyMounts: true
        userNamespaces: true
      name: ""
    volumesAttached:
    - devicePath: ""
      name: kubernetes.io/csi/driver.longhorn.io^pvc-41cff22a-126e-4d0f-bde8-74aa06671c3d
    volumesInUse:
    - kubernetes.io/csi/driver.longhorn.io^pvc-41cff22a-126e-4d0f-bde8-74aa06671c3d
    - kubernetes.io/csi/driver.longhorn.io^pvc-ed0a9c28-0e66-4e9d-ae84-b1b62292e0c4
- apiVersion: v1
  kind: Node
  metadata:
    annotations:
      csi.volume.kubernetes.io/nodeid: '{"driver.longhorn.io":"ldite2"}'
      extensions.talos.dev/schematic: 941f6f168103ddd4a6a3233d0ba4f5db7c821192ed025ce8a8f9975d16b14873
      node.alpha.kubernetes.io/ttl: "0"
      talos.dev/owned-annotations: '["extensions.talos.dev/schematic"]'
      talos.dev/owned-labels: '["extensions.talos.dev/amd-ucode","extensions.talos.dev/amdgpu","extensions.talos.dev/i915","extensions.talos.dev/intel-ice-firmware","extensions.talos.dev/intel-ucode","extensions.talos.dev/iscsi-tools","extensions.talos.dev/modules.dep","extensions.talos.dev/util-linux-tools"]'
      volumes.kubernetes.io/controller-managed-attach-detach: "true"
    creationTimestamp: "2025-02-02T18:10:42Z"
    labels:
      beta.kubernetes.io/arch: amd64
      beta.kubernetes.io/os: linux
      extensions.talos.dev/amd-ucode: "20250109"
      extensions.talos.dev/amdgpu: 20250109-v1.9.3
      extensions.talos.dev/i915: 20250109-v1.9.3
      extensions.talos.dev/intel-ice-firmware: "20250109"
      extensions.talos.dev/intel-ucode: "20241112"
      extensions.talos.dev/iscsi-tools: v0.1.6
      extensions.talos.dev/modules.dep: 6.12.11-talos
      extensions.talos.dev/util-linux-tools: 2.40.4
      kubernetes.io/arch: amd64
      kubernetes.io/hostname: ldite2
      kubernetes.io/os: linux
    name: ldite2
    resourceVersion: "10549114"
    uid: d0af6d97-77a5-469b-acfe-e9fba8b4dc6b
  spec:
    podCIDR: 10.69.3.0/24
    podCIDRs:
    - 10.69.3.0/24
  status:
    addresses:
    - address: 192.168.20.31
      type: InternalIP
    - address: ldite2
      type: Hostname
    allocatable:
      cpu: 127950m
      ephemeral-storage: "898023547032"
      hugepages-1Gi: "0"
      hugepages-2Mi: "0"
      memory: 131305816Ki
      pods: "110"
    capacity:
      cpu: "128"
      ephemeral-storage: 974709184Ki
      hugepages-1Gi: "0"
      hugepages-2Mi: "0"
      memory: 131801432Ki
      pods: "110"
    conditions:
    - lastHeartbeatTime: "2025-02-02T18:13:42Z"
      lastTransitionTime: "2025-02-02T18:13:42Z"
      message: Cilium is running on this node
      reason: CiliumIsUp
      status: "False"
      type: NetworkUnavailable
    - lastHeartbeatTime: "2025-02-15T13:09:25Z"
      lastTransitionTime: "2025-02-03T19:22:41Z"
      message: kubelet has sufficient memory available
      reason: KubeletHasSufficientMemory
      status: "False"
      type: MemoryPressure
    - lastHeartbeatTime: "2025-02-15T13:09:25Z"
      lastTransitionTime: "2025-02-03T19:22:41Z"
      message: kubelet has no disk pressure
      reason: KubeletHasNoDiskPressure
      status: "False"
      type: DiskPressure
    - lastHeartbeatTime: "2025-02-15T13:09:25Z"
      lastTransitionTime: "2025-02-03T19:22:41Z"
      message: kubelet has sufficient PID available
      reason: KubeletHasSufficientPID
      status: "False"
      type: PIDPressure
    - lastHeartbeatTime: "2025-02-15T13:09:25Z"
      lastTransitionTime: "2025-02-03T19:22:41Z"
      message: kubelet is posting ready status
      reason: KubeletReady
      status: "True"
      type: Ready
    daemonEndpoints:
      kubeletEndpoint:
        Port: 10250
    images:
    - names:
      - docker.io/longhornio/longhorn-instance-manager@sha256:411804ef7be19d4b303728dcbef0462e88f813233b932f2a89b6d1942dcace76
      - docker.io/longhornio/longhorn-instance-manager:v1.8.0
      sizeBytes: 357574362
    - names:
      - quay.io/cilium/cilium@sha256:1e0896b1c4c188b4812c7e0bed7ec3f5631388ca88325c1391a0ef9172c448da
      sizeBytes: 224362848
    - names:
      - docker.io/bitnami/wordpress@sha256:0b4e3486d9d18e76ad9556115a546d962a6fa09ca6b75f9656d8aaa47091aa75
      - docker.io/bitnami/wordpress:6.7.1-debian-12-r14
      sizeBytes: 216256446
    - names:
      - docker.io/bitnami/argo-cd@sha256:b08a4c794a0910e5cc8473604dab729750f507532418ada11db2468e180b5b2a
      - docker.io/bitnami/argo-cd:2.14.1-debian-12-r0
      sizeBytes: 170409663
    - names:
      - docker.io/bitnami/argo-cd@sha256:e85c0629990009b6bf7590871221bc8aa0061db2528305adca58e4f06445a9ee
      - docker.io/bitnami/argo-cd:2.13.4-debian-12-r0
      sizeBytes: 169824967
    - names:
      - docker.io/longhornio/longhorn-engine@sha256:e4d94d4026c3508d3c68b46e7c82c41c76cf3ec533a8430f6144170a555b8965
      - docker.io/longhornio/longhorn-engine:v1.8.0
      sizeBytes: 156303986
    - names:
      - docker.io/bitnami/mariadb@sha256:6aeaf9df16595d7dea92280e1c5e1c38b7565cad67f713b707787dba96c95c1f
      - docker.io/bitnami/mariadb:11.4.4-debian-12-r3
      sizeBytes: 131531367
    - names:
      - docker.io/longhornio/longhorn-manager@sha256:3b8289b3e3bce156665748c3faa89b75a3f68b6bead377d708be544a70ed3b20
      - docker.io/longhornio/longhorn-manager:v1.8.0
      sizeBytes: 119353022
    - names:
      - registry.k8s.io/ingress-nginx/controller@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
      sizeBytes: 107894584
    - names:
      - docker.io/bitnami/prometheus@sha256:9f2868d2c10b9c6eb2473fd6f133bdcf4acccf7b958d804d6143ba71322816e1
      - docker.io/bitnami/prometheus:2.55.1-debian-12-r7
      sizeBytes: 103161855
    - names:
      - docker.io/bitnami/harbor-adapter-trivy@sha256:5a0ef6b9653f7a94eda2e73a32afd61425c1dc42f18cb84cef0674756b33a8fe
      - docker.io/bitnami/harbor-adapter-trivy:2.12.2-debian-12-r0
      sizeBytes: 92186975
    - names:
      - docker.io/longhornio/longhorn-share-manager@sha256:92c05080cb1589060b6c5c58f8012022b9a792aac6e548d122d2986dc84e53be
      - docker.io/longhornio/longhorn-share-manager:v1.8.0
      sizeBytes: 87779495
    - names:
      - docker.io/bitnami/prometheus-operator@sha256:8da0402d264f7d7f35c9b65556bfb254a63976a9554083381de953d8678ec6eb
      - docker.io/bitnami/prometheus-operator:0.79.2-debian-12-r2
      sizeBytes: 77180459
    - names:
      - docker.io/longhornio/longhorn-ui@sha256:fe7a7a918535d20b030f7969b93d0d97c31db6dd2a6ed5db4e1b484344972755
      - docker.io/longhornio/longhorn-ui:v1.8.0
      sizeBytes: 73235277
    - names:
      - docker.io/bitnami/harbor-core@sha256:3b6012b6361154a7fdd320f446a31780a03e7c238c1d98f593ae4b297e4f130b
      - docker.io/bitnami/harbor-core:2.12.2-debian-12-r1
      sizeBytes: 68777130
    - names:
      - docker.io/bitnami/nginx@sha256:c02e18884badbd9482fd731668f75a3033124c748bc709651fb06062d0ab38c1
      - docker.io/bitnami/nginx:1.27.3-debian-12-r5
      sizeBytes: 67094807
    - names:
      - docker.io/bitnami/harbor-registryctl@sha256:30f734e7d7cb9b79d0500278241de01a8595219ccee73bd91ee977fe59d3f96f
      - docker.io/bitnami/harbor-registryctl:2.12.2-debian-12-r1
      sizeBytes: 65233081
    - names:
      - docker.io/bitnami/alertmanager@sha256:48b628143248ecb846468dc74761ba814c49ac90ae3d8925b27d1687b5090a1f
      - docker.io/bitnami/alertmanager:0.28.0-debian-12-r2
      sizeBytes: 63893985
    - names:
      - docker.io/bitnami/kube-state-metrics@sha256:2ac11d811861e3e6b2e2f35534409d35e4a0ada315512d34af52a123e83ab0b0
      - docker.io/bitnami/kube-state-metrics:2.14.0-debian-12-r5
      sizeBytes: 60412686
    - names:
      - ghcr.io/fluxcd/kustomize-controller@sha256:e3b0cf847e9cdf47b19af0fbcfe22786b80b598e0caeea8b6d2a5f9c26a48a24
      sizeBytes: 54969920
    - names:
      - docker.io/bitnami/harbor-registry@sha256:96bdb1cb6ddbe69de06343993781bf7f6c2b05e01073684095843668884edd8c
      - docker.io/bitnami/harbor-registry:2.12.2-debian-12-r1
      sizeBytes: 52349360
    - names:
      - docker.io/bitnami/blackbox-exporter@sha256:a924bf138d86050ef3def014d1b65757755efe9d9cc7a9fcd0ee8129d74ca077
      - docker.io/bitnami/blackbox-exporter:0.25.0-debian-12-r24
      sizeBytes: 51609586
    - names:
      - docker.io/bitnami/node-exporter@sha256:2b46b5cbd3f7f8980f74cb673e7ec822a3e6ce266e0feb8049efd4a9ecd2e5ac
      - docker.io/bitnami/node-exporter:1.8.2-debian-12-r14
      sizeBytes: 51244595
    - names:
      - docker.io/bitnami/redis@sha256:0527618c31c4fe1c01ed6159c0422e72dd70a83a7a3c393b07a40ba300a31415
      - docker.io/bitnami/redis:7.4.2-debian-12-r1
      sizeBytes: 50936828
    - names:
      - docker.io/bitnami/redis@sha256:65f55fefc0acd7f1a1da44b39be3044bcfbc03f4a49c4689453097f929f07132
      - docker.io/bitnami/redis:7.4.2-debian-12-r0
      sizeBytes: 50910951
    - names:
      - docker.io/bitnami/memcached@sha256:5213bae337a3f6e087860a3236300d091f0697bfbf3bd1c00403bbf7122b2f4f
      - docker.io/bitnami/memcached:1.6.34-debian-12-r0
      sizeBytes: 47567705
    - names:
      - ghcr.io/mendhak/http-https-echo@sha256:440ca6b810bc04606aac700e461caca5543eaa882c4e0af96a33424d05a23592
      - ghcr.io/mendhak/http-https-echo:35
      sizeBytes: 47315759
    - names:
      - ghcr.io/fluxcd/notification-controller@sha256:425309a159b15e07f7d97622effc79bc432a37ed55289dd465d37fa217a92a7d
      sizeBytes: 43654595
    - names:
      - ghcr.io/spegel-org/spegel@sha256:aee8841c5039df075bc8fdaf1e0f9d9d0943294c3a6fd7df5392ea037de36048
      sizeBytes: 43279218
    - names:
      - ghcr.io/fluxcd/helm-controller@sha256:4c75ca6c24ceb1f1bd7e935d9287a93e4f925c512f206763ec5a47de3ef3ff48
      sizeBytes: 40818921
    - names:
      - quay.io/openebs/provisioner-localpv@sha256:072f20d5217eca8347afe5a6e464cb36cd32465983f7824f043b58308d7171d2
      - quay.io/openebs/provisioner-localpv:4.1.4
      sizeBytes: 33822131
    - names:
      - registry.k8s.io/external-dns/external-dns@sha256:4f3ba4c2bd28030caad05bb7b47fbf47549a46d5e8443b74f0be463550b4fc2b
      - registry.k8s.io/external-dns/external-dns:v0.15.1
      sizeBytes: 33661299
    - names:
      - ghcr.io/controlplaneio-fluxcd/flux-operator@sha256:8230f8e0357cf79bc0337b7e429e20134eacec6b0ac6906bc87fd66c39700d9e
      - ghcr.io/controlplaneio-fluxcd/flux-operator:v0.13.0
      sizeBytes: 33597569
    - names:
      - docker.io/longhornio/csi-resizer@sha256:94763536d2c408efb2a43d3e1c5a56ed1e38dd2c1b63659ff2418c0602651d37
      - docker.io/longhornio/csi-resizer:v1.13.1
      sizeBytes: 32400492
    - names:
      - ghcr.io/fluxcd/source-controller@sha256:3c5f0f022f990ffc0daf00e5b199548fc0fa6e7119e972318f0267081a332963
      sizeBytes: 32386205
    - names:
      - docker.io/longhornio/csi-provisioner@sha256:efc6445ad5875a49a69615b46a7edb19e42fefdc73a2abb9dfe7b2fd21efe7ad
      - docker.io/longhornio/csi-provisioner:v5.1.0-20241220
      sizeBytes: 32239934
    - names:
      - docker.io/longhornio/csi-attacher@sha256:86afa429db9da56ff7b1b53541ff508a0b71ed5dd8c57e392d93f6d4174f1abd
      - docker.io/longhornio/csi-attacher:v4.8.0
      sizeBytes: 32230986
    - names:
      - quay.io/cilium/operator-generic@sha256:13d32071d5a52c069fb7c35959a56009c6914439adc73e99e098917646d154fc
      sizeBytes: 31231047
    - names:
      - docker.io/longhornio/csi-snapshotter@sha256:dff0c369ad0dbea80f9c657ae817122c036d2775e3c98c2c62ab6138d2a9d6ec
      - docker.io/longhornio/csi-snapshotter:v8.2.0
      sizeBytes: 31142597
    - names:
      - ghcr.io/stakater/reloader@sha256:e989909133e9fa2b0e69d814b7d1f313696b626a54e3e9b53626f3d968cf15c8
      - ghcr.io/stakater/reloader:v1.2.1
      sizeBytes: 29467276
    - names:
      - docker.io/cloudflare/cloudflared@sha256:bc2b3edd9eb0257a1a1fc58113e97426afe524e04b898173cd7df01442bcb4b3
      - docker.io/cloudflare/cloudflared:2025.1.1
      sizeBytes: 28152096
    - names:
      - registry.k8s.io/ingress-nginx/kube-webhook-certgen@sha256:aaafd456bda110628b2d4ca6296f38731a3aaf0bf7581efae824a41c770a8fc4
      sizeBytes: 26959944
    - names:
      - registry.k8s.io/metrics-server/metrics-server@sha256:ffcb2bf004d6aa0a17d90e0247cf94f2865c8901dcab4427034c341951c239f9
      - registry.k8s.io/metrics-server/metrics-server:v0.7.2
      sizeBytes: 19494617
    - names:
      - quay.io/jetstack/cert-manager-webhook@sha256:c86dd3ad1efd98889f3d79c6aaa3e43a76e103fa8c27f207c3cb88452aff95e4
      - quay.io/jetstack/cert-manager-webhook:v1.16.3
      sizeBytes: 18204442
    - names:
      - quay.io/oriedge/k8s_gateway@sha256:7bdbd447c0244b8f89de9cd6f4826ed0ac66c9406fac3a4ac80081020c251c6b
      - quay.io/oriedge/k8s_gateway:v0.4.0
      sizeBytes: 17450682
    - names:
      - docker.io/longhornio/livenessprobe@sha256:8ced2d04e57e44cfba0b9901e984d8f063c72133a1fde3eb607cc634cd2c8244
      - docker.io/longhornio/livenessprobe:v2.15.0
      sizeBytes: 14995918
    - names:
      - docker.io/longhornio/csi-node-driver-registrar@sha256:69cd0517dcd5ca916ad9c8297d3d5370df93c84619cec3d977e8770edf70874f
      - docker.io/longhornio/csi-node-driver-registrar:v2.13.0
      sizeBytes: 14780983
    - names:
      - registry.k8s.io/pause@sha256:ee6521f290b2168b6e0935a181d4cff9be1ac3f505666ef0e3c98fae8199917a
      - registry.k8s.io/pause:3.10
      sizeBytes: 320368
    nodeInfo:
      architecture: amd64
      bootID: ed4b0512-9980-483a-a2a2-3bd431ead324
      containerRuntimeVersion: containerd://2.0.2
      kernelVersion: 6.12.11-talos
      kubeProxyVersion: v1.32.1
      kubeletVersion: v1.32.1
      machineID: 0564e0f8f0e8bd91316da00b923802d3
      operatingSystem: linux
      osImage: Talos (v1.9.3)
      systemUUID: 00000000-0000-0000-0000-3cecef42f632
    runtimeHandlers:
    - features:
        recursiveReadOnlyMounts: true
        userNamespaces: true
      name: runc
    - features:
        recursiveReadOnlyMounts: true
        userNamespaces: true
      name: ""
    volumesAttached:
    - devicePath: ""
      name: kubernetes.io/csi/driver.longhorn.io^pvc-6bcfff4b-1640-4573-b1e7-c43cd6af9a85
    - devicePath: ""
      name: kubernetes.io/csi/driver.longhorn.io^pvc-36a1ff41-148d-4dc2-8a10-a380f8d08b7f
    - devicePath: ""
      name: kubernetes.io/csi/driver.longhorn.io^pvc-e0f6bc34-46fd-4f9f-8f90-d3c8aef8b286
    - devicePath: ""
      name: kubernetes.io/csi/driver.longhorn.io^pvc-b0728dfa-49bb-4c8e-a317-ad0ee2be2bc4
    - devicePath: ""
      name: kubernetes.io/csi/driver.longhorn.io^pvc-ed0a9c28-0e66-4e9d-ae84-b1b62292e0c4
    volumesInUse:
    - kubernetes.io/csi/driver.longhorn.io^pvc-36a1ff41-148d-4dc2-8a10-a380f8d08b7f
    - kubernetes.io/csi/driver.longhorn.io^pvc-6bcfff4b-1640-4573-b1e7-c43cd6af9a85
    - kubernetes.io/csi/driver.longhorn.io^pvc-b0728dfa-49bb-4c8e-a317-ad0ee2be2bc4
    - kubernetes.io/csi/driver.longhorn.io^pvc-e0f6bc34-46fd-4f9f-8f90-d3c8aef8b286
    - kubernetes.io/csi/driver.longhorn.io^pvc-ed0a9c28-0e66-4e9d-ae84-b1b62292e0c4
- apiVersion: v1
  kind: Node
  metadata:
    annotations:
      csi.volume.kubernetes.io/nodeid: '{"driver.longhorn.io":"ldite3"}'
      extensions.talos.dev/schematic: 941f6f168103ddd4a6a3233d0ba4f5db7c821192ed025ce8a8f9975d16b14873
      node.alpha.kubernetes.io/ttl: "0"
      node.longhorn.io/default-disks-config: '[{"path":"/var/lib/longhorn","allowScheduling":true,
        "tags":["ssd", "fast"]},{name:"sda","path":"var/mnt/disk2","allowScheduling":true,"storageReserved":1024,"tags":["ssd","fast"]},{"path":"/var/lib/longhorn","allowScheduling":true,
        "tags":["ssd", "fast"]},{name:"sdb","path":"var/mnt/disk3","allowScheduling":true,"storageReserved":1024,"tags":["ssd","fast"]}]'
      node.longhorn.io/default-node-tags: '["fast", "storage"]'
      talos.dev/owned-annotations: '["extensions.talos.dev/schematic","node.longhorn.io/default-disks-config","node.longhorn.io/default-node-tags"]'
      talos.dev/owned-labels: '["extensions.talos.dev/amd-ucode","extensions.talos.dev/amdgpu","extensions.talos.dev/i915","extensions.talos.dev/intel-ice-firmware","extensions.talos.dev/intel-ucode","extensions.talos.dev/iscsi-tools","extensions.talos.dev/modules.dep","extensions.talos.dev/util-linux-tools","node.longhorn.io/create-default-disk"]'
      volumes.kubernetes.io/controller-managed-attach-detach: "true"
    creationTimestamp: "2025-02-02T18:10:57Z"
    labels:
      beta.kubernetes.io/arch: amd64
      beta.kubernetes.io/os: linux
      extensions.talos.dev/amd-ucode: "20250109"
      extensions.talos.dev/amdgpu: 20250109-v1.9.3
      extensions.talos.dev/i915: 20250109-v1.9.3
      extensions.talos.dev/intel-ice-firmware: "20250109"
      extensions.talos.dev/intel-ucode: "20241112"
      extensions.talos.dev/iscsi-tools: v0.1.6
      extensions.talos.dev/modules.dep: 6.12.11-talos
      extensions.talos.dev/util-linux-tools: 2.40.4
      kubernetes.io/arch: amd64
      kubernetes.io/hostname: ldite3
      kubernetes.io/os: linux
      node.longhorn.io/create-default-disk: config
    name: ldite3
    resourceVersion: "10548221"
    uid: c2bd72f7-b22a-4ea3-a736-1845770425d1
  spec:
    podCIDR: 10.69.4.0/24
    podCIDRs:
    - 10.69.4.0/24
  status:
    addresses:
    - address: 192.168.20.32
      type: InternalIP
    - address: ldite3
      type: Hostname
    allocatable:
      cpu: 47950m
      ephemeral-storage: "898340949757"
      hugepages-1Gi: "0"
      hugepages-2Mi: "0"
      memory: 65175956Ki
      pods: "110"
    capacity:
      cpu: "48"
      ephemeral-storage: 975053588Ki
      hugepages-1Gi: "0"
      hugepages-2Mi: "0"
      memory: 65671572Ki
      pods: "110"
    conditions:
    - lastHeartbeatTime: "2025-02-02T18:13:40Z"
      lastTransitionTime: "2025-02-02T18:13:40Z"
      message: Cilium is running on this node
      reason: CiliumIsUp
      status: "False"
      type: NetworkUnavailable
    - lastHeartbeatTime: "2025-02-15T13:08:01Z"
      lastTransitionTime: "2025-02-03T19:14:08Z"
      message: kubelet has sufficient memory available
      reason: KubeletHasSufficientMemory
      status: "False"
      type: MemoryPressure
    - lastHeartbeatTime: "2025-02-15T13:08:01Z"
      lastTransitionTime: "2025-02-03T19:14:08Z"
      message: kubelet has no disk pressure
      reason: KubeletHasNoDiskPressure
      status: "False"
      type: DiskPressure
    - lastHeartbeatTime: "2025-02-15T13:08:01Z"
      lastTransitionTime: "2025-02-03T19:14:08Z"
      message: kubelet has sufficient PID available
      reason: KubeletHasSufficientPID
      status: "False"
      type: PIDPressure
    - lastHeartbeatTime: "2025-02-15T13:08:01Z"
      lastTransitionTime: "2025-02-03T19:14:08Z"
      message: kubelet is posting ready status
      reason: KubeletReady
      status: "True"
      type: Ready
    daemonEndpoints:
      kubeletEndpoint:
        Port: 10250
    images:
    - names:
      - docker.io/longhornio/longhorn-instance-manager@sha256:411804ef7be19d4b303728dcbef0462e88f813233b932f2a89b6d1942dcace76
      - docker.io/longhornio/longhorn-instance-manager:v1.8.0
      sizeBytes: 357574362
    - names:
      - quay.io/cilium/cilium@sha256:1e0896b1c4c188b4812c7e0bed7ec3f5631388ca88325c1391a0ef9172c448da
      sizeBytes: 224362848
    - names:
      - docker.io/longhornio/longhorn-engine@sha256:e4d94d4026c3508d3c68b46e7c82c41c76cf3ec533a8430f6144170a555b8965
      - docker.io/longhornio/longhorn-engine:v1.8.0
      sizeBytes: 156303986
    - names:
      - docker.io/longhornio/longhorn-manager@sha256:3b8289b3e3bce156665748c3faa89b75a3f68b6bead377d708be544a70ed3b20
      - docker.io/longhornio/longhorn-manager:v1.8.0
      sizeBytes: 119353022
    - names:
      - registry.k8s.io/ingress-nginx/controller@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
      sizeBytes: 107894584
    - names:
      - docker.io/bitnami/prometheus@sha256:9f2868d2c10b9c6eb2473fd6f133bdcf4acccf7b958d804d6143ba71322816e1
      - docker.io/bitnami/prometheus:2.55.1-debian-12-r7
      sizeBytes: 103161855
    - names:
      - docker.io/longhornio/longhorn-share-manager@sha256:92c05080cb1589060b6c5c58f8012022b9a792aac6e548d122d2986dc84e53be
      - docker.io/longhornio/longhorn-share-manager:v1.8.0
      sizeBytes: 87779495
    - names:
      - docker.io/bitnami/prometheus-operator@sha256:8da0402d264f7d7f35c9b65556bfb254a63976a9554083381de953d8678ec6eb
      - docker.io/bitnami/prometheus-operator:0.79.2-debian-12-r2
      sizeBytes: 77180459
    - names:
      - docker.io/longhornio/longhorn-ui@sha256:fe7a7a918535d20b030f7969b93d0d97c31db6dd2a6ed5db4e1b484344972755
      - docker.io/longhornio/longhorn-ui:v1.8.0
      sizeBytes: 73235277
    - names:
      - docker.io/bitnami/blackbox-exporter@sha256:a924bf138d86050ef3def014d1b65757755efe9d9cc7a9fcd0ee8129d74ca077
      - docker.io/bitnami/blackbox-exporter:0.25.0-debian-12-r24
      sizeBytes: 51609586
    - names:
      - docker.io/bitnami/node-exporter@sha256:2b46b5cbd3f7f8980f74cb673e7ec822a3e6ce266e0feb8049efd4a9ecd2e5ac
      - docker.io/bitnami/node-exporter:1.8.2-debian-12-r14
      sizeBytes: 51244595
    - names:
      - ghcr.io/mendhak/http-https-echo@sha256:440ca6b810bc04606aac700e461caca5543eaa882c4e0af96a33424d05a23592
      - ghcr.io/mendhak/http-https-echo:35
      sizeBytes: 47315759
    - names:
      - ghcr.io/spegel-org/spegel@sha256:aee8841c5039df075bc8fdaf1e0f9d9d0943294c3a6fd7df5392ea037de36048
      sizeBytes: 43279218
    - names:
      - ghcr.io/fluxcd/helm-controller@sha256:4c75ca6c24ceb1f1bd7e935d9287a93e4f925c512f206763ec5a47de3ef3ff48
      sizeBytes: 40818921
    - names:
      - quay.io/openebs/provisioner-localpv@sha256:072f20d5217eca8347afe5a6e464cb36cd32465983f7824f043b58308d7171d2
      - quay.io/openebs/provisioner-localpv:4.1.4
      sizeBytes: 33822131
    - names:
      - docker.io/longhornio/csi-resizer@sha256:94763536d2c408efb2a43d3e1c5a56ed1e38dd2c1b63659ff2418c0602651d37
      - docker.io/longhornio/csi-resizer:v1.13.1
      sizeBytes: 32400492
    - names:
      - docker.io/longhornio/csi-provisioner@sha256:efc6445ad5875a49a69615b46a7edb19e42fefdc73a2abb9dfe7b2fd21efe7ad
      - docker.io/longhornio/csi-provisioner:v5.1.0-20241220
      sizeBytes: 32239934
    - names:
      - docker.io/longhornio/csi-attacher@sha256:86afa429db9da56ff7b1b53541ff508a0b71ed5dd8c57e392d93f6d4174f1abd
      - docker.io/longhornio/csi-attacher:v4.8.0
      sizeBytes: 32230986
    - names:
      - docker.io/longhornio/csi-snapshotter@sha256:dff0c369ad0dbea80f9c657ae817122c036d2775e3c98c2c62ab6138d2a9d6ec
      - docker.io/longhornio/csi-snapshotter:v8.2.0
      sizeBytes: 31142597
    - names:
      - registry.k8s.io/ingress-nginx/kube-webhook-certgen@sha256:aaafd456bda110628b2d4ca6296f38731a3aaf0bf7581efae824a41c770a8fc4
      sizeBytes: 26959944
    - names:
      - quay.io/jetstack/cert-manager-controller@sha256:771a117d226da28fb1fa600281a615fcf648ac743e56c6a9012d592c78a04995
      - quay.io/jetstack/cert-manager-controller:v1.16.3
      sizeBytes: 21200633
    - names:
      - quay.io/jetstack/cert-manager-cainjector@sha256:9c8cc638ca9724d60da2dc293f863bad53608d23bac3c0eda64bba097990ba16
      - quay.io/jetstack/cert-manager-cainjector:v1.16.3
      sizeBytes: 15438090
    - names:
      - docker.io/longhornio/livenessprobe@sha256:8ced2d04e57e44cfba0b9901e984d8f063c72133a1fde3eb607cc634cd2c8244
      - docker.io/longhornio/livenessprobe:v2.15.0
      sizeBytes: 14995918
    - names:
      - docker.io/longhornio/csi-node-driver-registrar@sha256:69cd0517dcd5ca916ad9c8297d3d5370df93c84619cec3d977e8770edf70874f
      - docker.io/longhornio/csi-node-driver-registrar:v2.13.0
      sizeBytes: 14780983
    - names:
      - quay.io/jetstack/cert-manager-startupapicheck@sha256:587ac889826b20485249e064e3f047d729b91dfe5e7d0c26ec1b4fb4e1539abd
      - quay.io/jetstack/cert-manager-startupapicheck:v1.16.3
      sizeBytes: 14107691
    - names:
      - registry.k8s.io/pause@sha256:ee6521f290b2168b6e0935a181d4cff9be1ac3f505666ef0e3c98fae8199917a
      - registry.k8s.io/pause:3.10
      sizeBytes: 320368
    nodeInfo:
      architecture: amd64
      bootID: 79b599f2-42eb-4ad2-9884-2fa7063072e2
      containerRuntimeVersion: containerd://2.0.2
      kernelVersion: 6.12.11-talos
      kubeProxyVersion: v1.32.1
      kubeletVersion: v1.32.1
      machineID: ffa5a9dc1872050d323fbc55a40f11d9
      operatingSystem: linux
      osImage: Talos (v1.9.3)
      systemUUID: 00000000-0000-0000-0000-002590bc9928
    runtimeHandlers:
    - features:
        recursiveReadOnlyMounts: true
        userNamespaces: true
      name: runc
    - features:
        recursiveReadOnlyMounts: true
        userNamespaces: true
      name: ""
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      longhorn.io/volume-scheduling-error: ""
      pv.kubernetes.io/provisioned-by: driver.longhorn.io
      volume.kubernetes.io/provisioner-deletion-secret-name: ""
      volume.kubernetes.io/provisioner-deletion-secret-namespace: ""
    creationTimestamp: "2025-02-10T21:02:50Z"
    finalizers:
    - external-provisioner.volume.kubernetes.io/finalizer
    - kubernetes.io/pv-protection
    - external-attacher/driver-longhorn-io
    name: pvc-17e2804d-3d1e-402b-a1c2-f29db3a2a16f
    resourceVersion: "6253426"
    uid: 5aaf6b13-c7cc-4133-bb39-bb4461743ad8
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 8Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: data-harbor-1739221352-postgresql-0
      namespace: default
      resourceVersion: "6253069"
      uid: 17e2804d-3d1e-402b-a1c2-f29db3a2a16f
    csi:
      driver: driver.longhorn.io
      fsType: ext4
      volumeAttributes:
        dataEngine: v1
        dataLocality: disabled
        disableRevisionCounter: "true"
        fromBackup: ""
        fsType: ext4
        numberOfReplicas: "3"
        staleReplicaTimeout: "30"
        storage.kubernetes.io/csiProvisionerIdentity: 1738610014120-9061-driver.longhorn.io
        unmapMarkSnapChainRemoved: ignored
      volumeHandle: pvc-17e2804d-3d1e-402b-a1c2-f29db3a2a16f
    persistentVolumeReclaimPolicy: Delete
    storageClassName: longhorn
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-02-10T21:02:50Z"
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      longhorn.io/volume-scheduling-error: ""
      pv.kubernetes.io/provisioned-by: driver.longhorn.io
      volume.kubernetes.io/provisioner-deletion-secret-name: ""
      volume.kubernetes.io/provisioner-deletion-secret-namespace: ""
    creationTimestamp: "2025-02-10T21:02:50Z"
    finalizers:
    - external-provisioner.volume.kubernetes.io/finalizer
    - kubernetes.io/pv-protection
    - external-attacher/driver-longhorn-io
    name: pvc-2faa6a05-6ec3-4013-923a-e744f046299d
    resourceVersion: "6253382"
    uid: 562ae511-c457-4aa3-9fb8-19784626337c
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 5Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: data-harbor-1739221352-trivy-0
      namespace: default
      resourceVersion: "6253061"
      uid: 2faa6a05-6ec3-4013-923a-e744f046299d
    csi:
      driver: driver.longhorn.io
      fsType: ext4
      volumeAttributes:
        dataEngine: v1
        dataLocality: disabled
        disableRevisionCounter: "true"
        fromBackup: ""
        fsType: ext4
        numberOfReplicas: "3"
        staleReplicaTimeout: "30"
        storage.kubernetes.io/csiProvisionerIdentity: 1738610014120-9061-driver.longhorn.io
        unmapMarkSnapChainRemoved: ignored
      volumeHandle: pvc-2faa6a05-6ec3-4013-923a-e744f046299d
    persistentVolumeReclaimPolicy: Delete
    storageClassName: longhorn
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-02-10T21:02:50Z"
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      longhorn.io/volume-scheduling-error: ""
      pv.kubernetes.io/provisioned-by: driver.longhorn.io
      volume.kubernetes.io/provisioner-deletion-secret-name: ""
      volume.kubernetes.io/provisioner-deletion-secret-namespace: ""
    creationTimestamp: "2025-02-03T20:55:55Z"
    finalizers:
    - external-provisioner.volume.kubernetes.io/finalizer
    - kubernetes.io/pv-protection
    - external-attacher/driver-longhorn-io
    name: pvc-36a1ff41-148d-4dc2-8a10-a380f8d08b7f
    resourceVersion: "663117"
    uid: 049c2495-ad00-436f-8480-0dc43e2e64de
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 8Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: data-wordpress-1738616146-mariadb-0
      namespace: default
      resourceVersion: "662928"
      uid: 36a1ff41-148d-4dc2-8a10-a380f8d08b7f
    csi:
      driver: driver.longhorn.io
      fsType: ext4
      volumeAttributes:
        dataEngine: v1
        dataLocality: disabled
        disableRevisionCounter: "true"
        fromBackup: ""
        fsType: ext4
        numberOfReplicas: "3"
        staleReplicaTimeout: "30"
        storage.kubernetes.io/csiProvisionerIdentity: 1738610014120-9061-driver.longhorn.io
        unmapMarkSnapChainRemoved: ignored
      volumeHandle: pvc-36a1ff41-148d-4dc2-8a10-a380f8d08b7f
    persistentVolumeReclaimPolicy: Delete
    storageClassName: longhorn
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-02-03T20:55:55Z"
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      longhorn.io/volume-scheduling-error: ""
      pv.kubernetes.io/provisioned-by: driver.longhorn.io
      volume.kubernetes.io/provisioner-deletion-secret-name: ""
      volume.kubernetes.io/provisioner-deletion-secret-namespace: ""
    creationTimestamp: "2025-02-10T21:02:50Z"
    finalizers:
    - external-provisioner.volume.kubernetes.io/finalizer
    - kubernetes.io/pv-protection
    - external-attacher/driver-longhorn-io
    name: pvc-41cff22a-126e-4d0f-bde8-74aa06671c3d
    resourceVersion: "6253423"
    uid: 70076eca-0ee9-462a-9341-c4797eca9e0e
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 1Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: harbor-1739221352-jobservice
      namespace: default
      resourceVersion: "6252927"
      uid: 41cff22a-126e-4d0f-bde8-74aa06671c3d
    csi:
      driver: driver.longhorn.io
      fsType: ext4
      volumeAttributes:
        dataEngine: v1
        dataLocality: disabled
        disableRevisionCounter: "true"
        fromBackup: ""
        fsType: ext4
        numberOfReplicas: "3"
        staleReplicaTimeout: "30"
        storage.kubernetes.io/csiProvisionerIdentity: 1738610014120-9061-driver.longhorn.io
        unmapMarkSnapChainRemoved: ignored
      volumeHandle: pvc-41cff22a-126e-4d0f-bde8-74aa06671c3d
    persistentVolumeReclaimPolicy: Delete
    storageClassName: longhorn
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-02-10T21:02:50Z"
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      longhorn.io/volume-scheduling-error: ""
      pv.kubernetes.io/provisioned-by: driver.longhorn.io
      volume.kubernetes.io/provisioner-deletion-secret-name: ""
      volume.kubernetes.io/provisioner-deletion-secret-namespace: ""
    creationTimestamp: "2025-02-05T17:33:59Z"
    finalizers:
    - external-provisioner.volume.kubernetes.io/finalizer
    - kubernetes.io/pv-protection
    - external-attacher/driver-longhorn-io
    name: pvc-6bcfff4b-1640-4573-b1e7-c43cd6af9a85
    resourceVersion: "1994546"
    uid: 16ca40a2-7efe-4b3b-b662-d029c0dd82ec
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 8Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: data-wordpress-mariadb-0
      namespace: default
      resourceVersion: "1994382"
      uid: 6bcfff4b-1640-4573-b1e7-c43cd6af9a85
    csi:
      driver: driver.longhorn.io
      fsType: ext4
      volumeAttributes:
        dataEngine: v1
        dataLocality: disabled
        disableRevisionCounter: "true"
        fromBackup: ""
        fsType: ext4
        numberOfReplicas: "3"
        staleReplicaTimeout: "30"
        storage.kubernetes.io/csiProvisionerIdentity: 1738610014120-9061-driver.longhorn.io
        unmapMarkSnapChainRemoved: ignored
      volumeHandle: pvc-6bcfff4b-1640-4573-b1e7-c43cd6af9a85
    persistentVolumeReclaimPolicy: Delete
    storageClassName: longhorn
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-02-05T17:33:59Z"
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      longhorn.io/volume-scheduling-error: ""
      pv.kubernetes.io/provisioned-by: driver.longhorn.io
      volume.kubernetes.io/provisioner-deletion-secret-name: ""
      volume.kubernetes.io/provisioner-deletion-secret-namespace: ""
    creationTimestamp: "2025-02-10T21:02:50Z"
    finalizers:
    - external-provisioner.volume.kubernetes.io/finalizer
    - kubernetes.io/pv-protection
    - external-attacher/driver-longhorn-io
    name: pvc-70431a4a-aa41-4079-b7ff-f319c245241b
    resourceVersion: "6253424"
    uid: 4c279c80-0bca-4b9e-a0b8-9077c9820087
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 8Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: redis-data-harbor-1739221352-redis-master-0
      namespace: default
      resourceVersion: "6253067"
      uid: 70431a4a-aa41-4079-b7ff-f319c245241b
    csi:
      driver: driver.longhorn.io
      fsType: ext4
      volumeAttributes:
        dataEngine: v1
        dataLocality: disabled
        disableRevisionCounter: "true"
        fromBackup: ""
        fsType: ext4
        numberOfReplicas: "3"
        staleReplicaTimeout: "30"
        storage.kubernetes.io/csiProvisionerIdentity: 1738610014120-9061-driver.longhorn.io
        unmapMarkSnapChainRemoved: ignored
      volumeHandle: pvc-70431a4a-aa41-4079-b7ff-f319c245241b
    persistentVolumeReclaimPolicy: Delete
    storageClassName: longhorn
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-02-10T21:02:50Z"
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      longhorn.io/volume-scheduling-error: ""
      pv.kubernetes.io/provisioned-by: driver.longhorn.io
      volume.kubernetes.io/provisioner-deletion-secret-name: ""
      volume.kubernetes.io/provisioner-deletion-secret-namespace: ""
    creationTimestamp: "2025-02-08T17:58:51Z"
    finalizers:
    - external-provisioner.volume.kubernetes.io/finalizer
    - kubernetes.io/pv-protection
    - external-attacher/driver-longhorn-io
    name: pvc-82d6bed5-323b-41de-bef0-aeea180fd2ef
    resourceVersion: "4489433"
    uid: 430f7947-c73f-4d67-8cbb-f105c84ceb94
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 8Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: data-argowf-postgresql-0
      namespace: argowf
      resourceVersion: "4489334"
      uid: 82d6bed5-323b-41de-bef0-aeea180fd2ef
    csi:
      driver: driver.longhorn.io
      fsType: ext4
      volumeAttributes:
        dataEngine: v1
        dataLocality: disabled
        disableRevisionCounter: "true"
        fromBackup: ""
        fsType: ext4
        numberOfReplicas: "3"
        staleReplicaTimeout: "30"
        storage.kubernetes.io/csiProvisionerIdentity: 1738610014120-9061-driver.longhorn.io
        unmapMarkSnapChainRemoved: ignored
      volumeHandle: pvc-82d6bed5-323b-41de-bef0-aeea180fd2ef
    persistentVolumeReclaimPolicy: Delete
    storageClassName: longhorn
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-02-08T17:58:51Z"
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      longhorn.io/volume-scheduling-error: ""
      pv.kubernetes.io/provisioned-by: driver.longhorn.io
      volume.kubernetes.io/provisioner-deletion-secret-name: ""
      volume.kubernetes.io/provisioner-deletion-secret-namespace: ""
    creationTimestamp: "2025-02-10T21:58:49Z"
    finalizers:
    - external-provisioner.volume.kubernetes.io/finalizer
    - kubernetes.io/pv-protection
    - external-attacher/driver-longhorn-io
    name: pvc-8e559de1-d158-43f9-81f9-8f7f00d2d799
    resourceVersion: "6288579"
    uid: 2e1943fc-2dd8-4fa2-afca-c08232400a47
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 8Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: data-wordpress-1739224720-mariadb-0
      namespace: default
      resourceVersion: "6288434"
      uid: 8e559de1-d158-43f9-81f9-8f7f00d2d799
    csi:
      driver: driver.longhorn.io
      fsType: ext4
      volumeAttributes:
        dataEngine: v1
        dataLocality: disabled
        disableRevisionCounter: "true"
        fromBackup: ""
        fsType: ext4
        numberOfReplicas: "3"
        staleReplicaTimeout: "30"
        storage.kubernetes.io/csiProvisionerIdentity: 1738610014120-9061-driver.longhorn.io
        unmapMarkSnapChainRemoved: ignored
      volumeHandle: pvc-8e559de1-d158-43f9-81f9-8f7f00d2d799
    persistentVolumeReclaimPolicy: Delete
    storageClassName: longhorn
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-02-10T21:58:49Z"
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      longhorn.io/volume-scheduling-error: ""
      pv.kubernetes.io/provisioned-by: driver.longhorn.io
      volume.kubernetes.io/provisioner-deletion-secret-name: ""
      volume.kubernetes.io/provisioner-deletion-secret-namespace: ""
    creationTimestamp: "2025-02-03T20:55:55Z"
    finalizers:
    - external-provisioner.volume.kubernetes.io/finalizer
    - kubernetes.io/pv-protection
    - external-attacher/driver-longhorn-io
    name: pvc-b0728dfa-49bb-4c8e-a317-ad0ee2be2bc4
    resourceVersion: "663118"
    uid: 47df13ce-a28d-4f71-ba5f-3a3e37a036c1
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 10Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: wordpress-1738616146
      namespace: default
      resourceVersion: "662865"
      uid: b0728dfa-49bb-4c8e-a317-ad0ee2be2bc4
    csi:
      driver: driver.longhorn.io
      fsType: ext4
      volumeAttributes:
        dataEngine: v1
        dataLocality: disabled
        disableRevisionCounter: "true"
        fromBackup: ""
        fsType: ext4
        numberOfReplicas: "3"
        staleReplicaTimeout: "30"
        storage.kubernetes.io/csiProvisionerIdentity: 1738610014120-9061-driver.longhorn.io
        unmapMarkSnapChainRemoved: ignored
      volumeHandle: pvc-b0728dfa-49bb-4c8e-a317-ad0ee2be2bc4
    persistentVolumeReclaimPolicy: Delete
    storageClassName: longhorn
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-02-03T20:55:55Z"
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      longhorn.io/volume-scheduling-error: ""
      pv.kubernetes.io/provisioned-by: driver.longhorn.io
      volume.kubernetes.io/provisioner-deletion-secret-name: ""
      volume.kubernetes.io/provisioner-deletion-secret-namespace: ""
    creationTimestamp: "2025-02-10T21:58:48Z"
    finalizers:
    - external-provisioner.volume.kubernetes.io/finalizer
    - kubernetes.io/pv-protection
    - external-attacher/driver-longhorn-io
    name: pvc-c556995f-79bb-44f1-a4a3-e50beb7f415a
    resourceVersion: "6288636"
    uid: 98e5e546-065e-4e6d-999f-dda1b5598276
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 10Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: wordpress-1739224720
      namespace: default
      resourceVersion: "6288394"
      uid: c556995f-79bb-44f1-a4a3-e50beb7f415a
    csi:
      driver: driver.longhorn.io
      fsType: ext4
      volumeAttributes:
        dataEngine: v1
        dataLocality: disabled
        disableRevisionCounter: "true"
        fromBackup: ""
        fsType: ext4
        numberOfReplicas: "3"
        staleReplicaTimeout: "30"
        storage.kubernetes.io/csiProvisionerIdentity: 1738610014120-9061-driver.longhorn.io
        unmapMarkSnapChainRemoved: ignored
      volumeHandle: pvc-c556995f-79bb-44f1-a4a3-e50beb7f415a
    persistentVolumeReclaimPolicy: Delete
    storageClassName: longhorn
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-02-10T21:58:48Z"
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      longhorn.io/volume-scheduling-error: ""
      pv.kubernetes.io/provisioned-by: driver.longhorn.io
      volume.kubernetes.io/provisioner-deletion-secret-name: ""
      volume.kubernetes.io/provisioner-deletion-secret-namespace: ""
    creationTimestamp: "2025-02-05T17:33:59Z"
    finalizers:
    - external-provisioner.volume.kubernetes.io/finalizer
    - kubernetes.io/pv-protection
    - external-attacher/driver-longhorn-io
    name: pvc-e0f6bc34-46fd-4f9f-8f90-d3c8aef8b286
    resourceVersion: "1994545"
    uid: b797a6e7-667a-4b00-ac17-4a1ec5090480
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 10Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: wordpress
      namespace: default
      resourceVersion: "1994343"
      uid: e0f6bc34-46fd-4f9f-8f90-d3c8aef8b286
    csi:
      driver: driver.longhorn.io
      fsType: ext4
      volumeAttributes:
        dataEngine: v1
        dataLocality: disabled
        disableRevisionCounter: "true"
        fromBackup: ""
        fsType: ext4
        numberOfReplicas: "3"
        staleReplicaTimeout: "30"
        storage.kubernetes.io/csiProvisionerIdentity: 1738610014120-9061-driver.longhorn.io
        unmapMarkSnapChainRemoved: ignored
      volumeHandle: pvc-e0f6bc34-46fd-4f9f-8f90-d3c8aef8b286
    persistentVolumeReclaimPolicy: Delete
    storageClassName: longhorn
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-02-05T17:33:59Z"
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      longhorn.io/volume-scheduling-error: ""
      pv.kubernetes.io/provisioned-by: driver.longhorn.io
      volume.kubernetes.io/provisioner-deletion-secret-name: ""
      volume.kubernetes.io/provisioner-deletion-secret-namespace: ""
    creationTimestamp: "2025-02-10T21:02:50Z"
    finalizers:
    - external-provisioner.volume.kubernetes.io/finalizer
    - kubernetes.io/pv-protection
    - external-attacher/driver-longhorn-io
    name: pvc-ed0a9c28-0e66-4e9d-ae84-b1b62292e0c4
    resourceVersion: "6253425"
    uid: 61f26804-0166-4439-954f-f0c0cf7c1968
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 5Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: harbor-1739221352-registry
      namespace: default
      resourceVersion: "6252926"
      uid: ed0a9c28-0e66-4e9d-ae84-b1b62292e0c4
    csi:
      driver: driver.longhorn.io
      fsType: ext4
      volumeAttributes:
        dataEngine: v1
        dataLocality: disabled
        disableRevisionCounter: "true"
        fromBackup: ""
        fsType: ext4
        numberOfReplicas: "3"
        staleReplicaTimeout: "30"
        storage.kubernetes.io/csiProvisionerIdentity: 1738610014120-9061-driver.longhorn.io
        unmapMarkSnapChainRemoved: ignored
      volumeHandle: pvc-ed0a9c28-0e66-4e9d-ae84-b1b62292e0c4
    persistentVolumeReclaimPolicy: Delete
    storageClassName: longhorn
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-02-10T21:02:50Z"
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      longhorn.io/volume-scheduling-error: ""
      pv.kubernetes.io/provisioned-by: driver.longhorn.io
      volume.kubernetes.io/provisioner-deletion-secret-name: ""
      volume.kubernetes.io/provisioner-deletion-secret-namespace: ""
    creationTimestamp: "2025-02-08T09:40:57Z"
    finalizers:
    - external-provisioner.volume.kubernetes.io/finalizer
    - kubernetes.io/pv-protection
    - external-attacher/driver-longhorn-io
    name: pvc-f30a4328-12ae-429d-b673-5e6be31b2a1d
    resourceVersion: "4204718"
    uid: 250a90e4-bf5a-484a-8ca3-53decfadb36f
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 8Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: redis-data-argocd-redis-master-0
      namespace: argocd
      resourceVersion: "4204592"
      uid: f30a4328-12ae-429d-b673-5e6be31b2a1d
    csi:
      driver: driver.longhorn.io
      fsType: ext4
      volumeAttributes:
        dataEngine: v1
        dataLocality: disabled
        disableRevisionCounter: "true"
        fromBackup: ""
        fsType: ext4
        numberOfReplicas: "3"
        staleReplicaTimeout: "30"
        storage.kubernetes.io/csiProvisionerIdentity: 1738610014120-9061-driver.longhorn.io
        unmapMarkSnapChainRemoved: ignored
      volumeHandle: pvc-f30a4328-12ae-429d-b673-5e6be31b2a1d
    persistentVolumeReclaimPolicy: Delete
    storageClassName: longhorn
    volumeMode: Filesystem
  status:
    lastPhaseTransitionTime: "2025-02-08T09:40:57Z"
    phase: Bound
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/restartedAt: "2025-02-13T17:37:07Z"
    creationTimestamp: "2025-02-13T17:37:07Z"
    generateName: cloudflared-744d6dc766-
    labels:
      app.kubernetes.io/component: cloudflared
      app.kubernetes.io/instance: cloudflared
      app.kubernetes.io/name: cloudflared
      pod-template-hash: 744d6dc766
    name: cloudflared-744d6dc766-8g4bs
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cloudflared-744d6dc766
      uid: ec85ba84-eabc-4ba0-ab57-1b5237cb2d06
    resourceVersion: "8884124"
    uid: 6b49d7c5-8fbd-4cc4-988c-8f4942f1683e
  spec:
    automountServiceAccountToken: true
    containers:
    - args:
      - tunnel
      - --config
      - /etc/cloudflared/config/config.yaml
      - run
      - $(TUNNEL_ID)
      env:
      - name: NO_AUTOUPDATE
        value: "true"
      - name: TUNNEL_CRED_FILE
        value: /etc/cloudflared/creds/credentials.json
      - name: TUNNEL_ID
        valueFrom:
          secretKeyRef:
            key: TUNNEL_ID
            name: cloudflared-secret
      - name: TUNNEL_METRICS
        value: 0.0.0.0:8080
      - name: TUNNEL_ORIGIN_ENABLE_HTTP2
        value: "true"
      - name: TUNNEL_POST_QUANTUM
        value: "true"
      - name: TUNNEL_TRANSPORT_PROTOCOL
        value: quic
      - name: STAKATER_CLOUDFLARED_CONFIGMAP_CONFIGMAP
        value: 639eae6e4f762cc424a7dd53fa4785520056ba0e
      image: docker.io/cloudflare/cloudflared:2025.1.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8080
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: app
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8080
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 256Mi
        requests:
          cpu: 10m
          memory: 256Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/cloudflared/config/config.yaml
        name: config
        readOnly: true
        subPath: config.yaml
      - mountPath: /etc/cloudflared/creds/credentials.json
        name: creds
        readOnly: true
        subPath: credentials.json
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qrbg5
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: false
    nodeName: ldit1
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: cloudflared-configmap
      name: config
    - name: creds
      secret:
        defaultMode: 420
        secretName: cloudflared-secret
    - name: kube-api-access-qrbg5
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-02-13T17:37:11Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-02-13T17:37:07Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-02-13T17:37:12Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-02-13T17:37:12Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-02-13T17:37:07Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://54fa51e7033b58f9e9879fd722227bd0d90d3df996cb0ff640da28728b6dccea
      image: docker.io/cloudflare/cloudflared:2025.1.1
      imageID: docker.io/cloudflare/cloudflared@sha256:bc2b3edd9eb0257a1a1fc58113e97426afe524e04b898173cd7df01442bcb4b3
      lastState: {}
      name: app
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-02-13T17:37:10Z"
      volumeMounts:
      - mountPath: /etc/cloudflared/config/config.yaml
        name: config
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /etc/cloudflared/creds/credentials.json
        name: creds
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qrbg5
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.20.20
    hostIPs:
    - ip: 192.168.20.20
    phase: Running
    podIP: 10.69.2.208
    podIPs:
    - ip: 10.69.2.208
    qosClass: Burstable
    startTime: "2025-02-13T17:37:07Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/restartedAt: "2025-02-04T18:52:54Z"
      secret.reloader.stakater.com/reload: external-dns-secret
    creationTimestamp: "2025-02-04T19:43:08Z"
    generateName: external-dns-757c77ff69-
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      pod-template-hash: 757c77ff69
    name: external-dns-757c77ff69-288ll
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: external-dns-757c77ff69
      uid: a9f2091a-8548-46b9-be21-56d51f6ea412
    resourceVersion: "7101392"
    uid: 7a78e9f7-1481-47a0-a526-72ea321881d8
  spec:
    containers:
    - args:
      - --log-level=info
      - --log-format=text
      - --interval=1m
      - --source=crd
      - --source=ingress
      - --policy=sync
      - --registry=txt
      - --txt-owner-id=default
      - --txt-prefix=k8s.
      - --domain-filter=afamiljen.se
      - --provider=cloudflare
      - --cloudflare-dns-records-per-page=1000
      - --cloudflare-proxied
      - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
      - --crd-source-kind=DNSEndpoint
      - --events
      - --ignore-ingress-tls-spec
      - --ingress-class=external
      env:
      - name: CF_API_TOKEN
        valueFrom:
          secretKeyRef:
            key: api-token
            name: external-dns-secret
      image: registry.k8s.io/external-dns/external-dns:v0.15.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 2
        httpGet:
          path: /healthz
          port: http
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: external-dns
      ports:
      - containerPort: 7979
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 6
        httpGet:
          path: /healthz
          port: http
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        limits:
          cpu: "1"
          memory: 1Gi
        requests:
          cpu: 250m
          memory: 256Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2dqgs
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: lditdb
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: external-dns
    serviceAccountName: external-dns
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-2dqgs
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-02-04T19:43:10Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-02-04T19:43:08Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-02-11T19:06:35Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-02-11T19:06:35Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-02-04T19:43:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://b7733c80a18dee3924353f56e1c9de67bf07e8625e96d2021d444d8f01f46d7e
      image: registry.k8s.io/external-dns/external-dns:v0.15.1
      imageID: registry.k8s.io/external-dns/external-dns@sha256:4f3ba4c2bd28030caad05bb7b47fbf47549a46d5e8443b74f0be463550b4fc2b
      lastState:
        terminated:
          containerID: containerd://065eefe8f057e76b28a09bf3cdc620ca0963ed85a8730a3751e96398a4a7b74e
          exitCode: 1
          finishedAt: "2025-02-11T19:01:18Z"
          reason: Error
          startedAt: "2025-02-11T19:01:07Z"
      name: external-dns
      ready: true
      restartCount: 75
      started: true
      state:
        running:
          startedAt: "2025-02-11T19:06:23Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2dqgs
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.20.50
    hostIPs:
    - ip: 192.168.20.50
    phase: Running
    podIP: 10.69.1.117
    podIPs:
    - ip: 10.69.1.117
    qosClass: Burstable
    startTime: "2025-02-04T19:43:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/restartedAt: "2025-02-04T18:52:54Z"
      secret.reloader.stakater.com/reload: external-dns-secret
    creationTimestamp: "2025-02-04T19:43:08Z"
    generateName: external-dns-757c77ff69-
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      pod-template-hash: 757c77ff69
    name: external-dns-757c77ff69-cg42l
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: external-dns-757c77ff69
      uid: a9f2091a-8548-46b9-be21-56d51f6ea412
    resourceVersion: "7101878"
    uid: d0371e3a-7f87-416c-9777-a911ed52f172
  spec:
    containers:
    - args:
      - --log-level=info
      - --log-format=text
      - --interval=1m
      - --source=crd
      - --source=ingress
      - --policy=sync
      - --registry=txt
      - --txt-owner-id=default
      - --txt-prefix=k8s.
      - --domain-filter=afamiljen.se
      - --provider=cloudflare
      - --cloudflare-dns-records-per-page=1000
      - --cloudflare-proxied
      - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
      - --crd-source-kind=DNSEndpoint
      - --events
      - --ignore-ingress-tls-spec
      - --ingress-class=external
      env:
      - name: CF_API_TOKEN
        valueFrom:
          secretKeyRef:
            key: api-token
            name: external-dns-secret
      image: registry.k8s.io/external-dns/external-dns:v0.15.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 2
        httpGet:
          path: /healthz
          port: http
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: external-dns
      ports:
      - containerPort: 7979
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 6
        httpGet:
          path: /healthz
          port: http
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        limits:
          cpu: "1"
          memory: 1Gi
        requests:
          cpu: 250m
          memory: 256Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-445dm
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ldite2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: external-dns
    serviceAccountName: external-dns
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-445dm
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-02-04T19:43:09Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-02-04T19:43:08Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-02-11T19:07:19Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-02-11T19:07:19Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-02-04T19:43:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://569a5f69f222fe06ea533bda6ef2ec0ae5c0bddd18ff9b4e761904a8b4ffc057
      image: registry.k8s.io/external-dns/external-dns:v0.15.1
      imageID: registry.k8s.io/external-dns/external-dns@sha256:4f3ba4c2bd28030caad05bb7b47fbf47549a46d5e8443b74f0be463550b4fc2b
      lastState:
        terminated:
          containerID: containerd://ef874734fe35ab1e36acd76d1b214d3a5a3226f2afe5494c69a4338d519eab2d
          exitCode: 1
          finishedAt: "2025-02-11T19:02:00Z"
          reason: Error
          startedAt: "2025-02-11T19:01:50Z"
      name: external-dns
      ready: true
      restartCount: 75
      started: true
      state:
        running:
          startedAt: "2025-02-11T19:07:08Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-445dm
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.20.31
    hostIPs:
    - ip: 192.168.20.31
    phase: Running
    podIP: 10.69.3.246
    podIPs:
    - ip: 10.69.3.246
    qosClass: Burstable
    startTime: "2025-02-04T19:43:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-02-03T20:15:31Z"
    generateName: external-ingress-nginx-controller-66d7c6f9f8-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 66d7c6f9f8
    name: external-ingress-nginx-controller-66d7c6f9f8-8r28d
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: external-ingress-nginx-controller-66d7c6f9f8
      uid: b65dd9c6-29b3-441d-a7d7-701465c030cd
    resourceVersion: "8998919"
    uid: b91527d2-5004-4bde-a068-82cacdd6db4b
  spec:
    containers:
    - args:
      - /nginx-ingress-controller
      - --publish-service=$(POD_NAMESPACE)/external-ingress-nginx-controller
      - --election-id=external-ingress-nginx-leader
      - --controller-class=k8s.io/external
      - --ingress-class=nginx
      - --configmap=$(POD_NAMESPACE)/external-ingress-nginx-controller
      - --validating-webhook=:8443
      - --validating-webhook-certificate=/usr/local/certificates/cert
      - --validating-webhook-key=/usr/local/certificates/key
      - --enable-metrics=true
      - --default-ssl-certificate=cert-manager/afamiljen-se-production-tls
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: LD_PRELOAD
        value: /usr/local/lib/libmimalloc.so
      image: registry.k8s.io/ingress-nginx/controller:v1.12.0@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 10254
        name: metrics
        protocol: TCP
      - containerPort: 8443
        name: webhook
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 2000Mi
        requests:
          cpu: "1"
          memory: 200Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: false
        runAsGroup: 82
        runAsNonRoot: true
        runAsUser: 101
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-pj96s
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ldite2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: external-ingress-nginx
    serviceAccountName: external-ingress-nginx
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: external-ingress-nginx-admission
    - name: kube-api-access-pj96s
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:15:33Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:15:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-02-13T20:36:05Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-02-13T20:36:05Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:15:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://0b31e61224a436b18c31d0d8554e592d0945f411dcee6b4d5ba545627e19cdc7
      image: sha256:a4a8af0db08902e65347157c5efef6d1f9e261f03c8aa14b1b40bc182b947fe7
      imageID: registry.k8s.io/ingress-nginx/controller@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
      lastState:
        terminated:
          containerID: containerd://2570a3bec56964465386706eb0c37a333bd3d01541c29b4b8840732ab77c42d5
          exitCode: 137
          finishedAt: "2025-02-13T20:35:52Z"
          reason: OOMKilled
          startedAt: "2025-02-13T19:58:37Z"
      name: controller
      ready: true
      restartCount: 49
      started: true
      state:
        running:
          startedAt: "2025-02-13T20:35:53Z"
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-pj96s
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.20.31
    hostIPs:
    - ip: 192.168.20.31
    phase: Running
    podIP: 10.69.3.189
    podIPs:
    - ip: 10.69.3.189
    qosClass: Burstable
    startTime: "2025-02-03T20:15:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-02-03T20:15:56Z"
    generateName: external-ingress-nginx-controller-66d7c6f9f8-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 66d7c6f9f8
    name: external-ingress-nginx-controller-66d7c6f9f8-fqnzj
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: external-ingress-nginx-controller-66d7c6f9f8
      uid: b65dd9c6-29b3-441d-a7d7-701465c030cd
    resourceVersion: "643915"
    uid: 8b0f69b0-032b-4a07-a576-64f0416281f1
  spec:
    containers:
    - args:
      - /nginx-ingress-controller
      - --publish-service=$(POD_NAMESPACE)/external-ingress-nginx-controller
      - --election-id=external-ingress-nginx-leader
      - --controller-class=k8s.io/external
      - --ingress-class=nginx
      - --configmap=$(POD_NAMESPACE)/external-ingress-nginx-controller
      - --validating-webhook=:8443
      - --validating-webhook-certificate=/usr/local/certificates/cert
      - --validating-webhook-key=/usr/local/certificates/key
      - --enable-metrics=true
      - --default-ssl-certificate=cert-manager/afamiljen-se-production-tls
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: LD_PRELOAD
        value: /usr/local/lib/libmimalloc.so
      image: registry.k8s.io/ingress-nginx/controller:v1.12.0@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 10254
        name: metrics
        protocol: TCP
      - containerPort: 8443
        name: webhook
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 2000Mi
        requests:
          cpu: "1"
          memory: 200Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: false
        runAsGroup: 82
        runAsNonRoot: true
        runAsUser: 101
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-z6pxx
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ldite3
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: external-ingress-nginx
    serviceAccountName: external-ingress-nginx
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: external-ingress-nginx-admission
    - name: kube-api-access-z6pxx
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:15:57Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:15:56Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:16:08Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:16:08Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:15:56Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://6314c921bf065dc1e13b28c2e0c0300fa310484b0ce3f9061ae0abb1da05c379
      image: sha256:a4a8af0db08902e65347157c5efef6d1f9e261f03c8aa14b1b40bc182b947fe7
      imageID: registry.k8s.io/ingress-nginx/controller@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
      lastState: {}
      name: controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-02-03T20:15:57Z"
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-z6pxx
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.20.32
    hostIPs:
    - ip: 192.168.20.32
    phase: Running
    podIP: 10.69.4.146
    podIPs:
    - ip: 10.69.4.146
    qosClass: Burstable
    startTime: "2025-02-03T20:15:56Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-02-03T20:15:44Z"
    generateName: external-ingress-nginx-controller-66d7c6f9f8-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 66d7c6f9f8
    name: external-ingress-nginx-controller-66d7c6f9f8-zbb7w
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: external-ingress-nginx-controller-66d7c6f9f8
      uid: b65dd9c6-29b3-441d-a7d7-701465c030cd
    resourceVersion: "8998895"
    uid: a8af420f-c5d5-494b-b889-220d3a7914f7
  spec:
    containers:
    - args:
      - /nginx-ingress-controller
      - --publish-service=$(POD_NAMESPACE)/external-ingress-nginx-controller
      - --election-id=external-ingress-nginx-leader
      - --controller-class=k8s.io/external
      - --ingress-class=nginx
      - --configmap=$(POD_NAMESPACE)/external-ingress-nginx-controller
      - --validating-webhook=:8443
      - --validating-webhook-certificate=/usr/local/certificates/cert
      - --validating-webhook-key=/usr/local/certificates/key
      - --enable-metrics=true
      - --default-ssl-certificate=cert-manager/afamiljen-se-production-tls
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: LD_PRELOAD
        value: /usr/local/lib/libmimalloc.so
      image: registry.k8s.io/ingress-nginx/controller:v1.12.0@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 10254
        name: metrics
        protocol: TCP
      - containerPort: 8443
        name: webhook
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 2000Mi
        requests:
          cpu: "1"
          memory: 200Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: false
        runAsGroup: 82
        runAsNonRoot: true
        runAsUser: 101
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-9qzss
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ldite1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: external-ingress-nginx
    serviceAccountName: external-ingress-nginx
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: external-ingress-nginx-admission
    - name: kube-api-access-9qzss
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:15:45Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:15:44Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-02-13T20:36:04Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-02-13T20:36:04Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:15:44Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a8e3098d9c021259440120be8c1c1e774dfa319f5ff9ba36da854bc7beda0ea8
      image: sha256:a4a8af0db08902e65347157c5efef6d1f9e261f03c8aa14b1b40bc182b947fe7
      imageID: registry.k8s.io/ingress-nginx/controller@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
      lastState:
        terminated:
          containerID: containerd://300b0f10975369e9b542338461d2def97622f85e618b63941abe1a5aa6beda75
          exitCode: 137
          finishedAt: "2025-02-13T20:35:52Z"
          reason: OOMKilled
          startedAt: "2025-02-13T19:58:35Z"
      name: controller
      ready: true
      restartCount: 49
      started: true
      state:
        running:
          startedAt: "2025-02-13T20:35:52Z"
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-9qzss
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.20.30
    hostIPs:
    - ip: 192.168.20.30
    phase: Running
    podIP: 10.69.5.51
    podIPs:
    - ip: 10.69.5.51
    qosClass: Burstable
    startTime: "2025-02-03T20:15:44Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-02-03T20:14:47Z"
    generateName: internal-ingress-nginx-controller-5d6c6b87d-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 5d6c6b87d
    name: internal-ingress-nginx-controller-5d6c6b87d-4gmsx
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: internal-ingress-nginx-controller-5d6c6b87d
      uid: 93014a9b-ae84-45f1-98a2-77ceee80f3cd
    resourceVersion: "643226"
    uid: d2bb3df7-f88b-4d91-9f64-e56e0e85717b
  spec:
    containers:
    - args:
      - /nginx-ingress-controller
      - --publish-service=$(POD_NAMESPACE)/internal-ingress-nginx-controller
      - --election-id=internal-ingress-nginx-leader
      - --controller-class=k8s.io/internal
      - --ingress-class=nginx
      - --configmap=$(POD_NAMESPACE)/internal-ingress-nginx-controller
      - --validating-webhook=:8443
      - --validating-webhook-certificate=/usr/local/certificates/cert
      - --validating-webhook-key=/usr/local/certificates/key
      - --enable-metrics=true
      - --default-ssl-certificate=cert-manager/afamiljen-se-production-tls
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: LD_PRELOAD
        value: /usr/local/lib/libmimalloc.so
      image: registry.k8s.io/ingress-nginx/controller:v1.12.0@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 10254
        name: metrics
        protocol: TCP
      - containerPort: 8443
        name: webhook
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 2000Mi
        requests:
          cpu: "1"
          memory: 200Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: false
        runAsGroup: 82
        runAsNonRoot: true
        runAsUser: 101
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-sz4xw
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ldite3
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: internal-ingress-nginx
    serviceAccountName: internal-ingress-nginx
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: internal-ingress-nginx-admission
    - name: kube-api-access-sz4xw
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:14:48Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:14:47Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:14:59Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:14:59Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:14:47Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://ad2ed071bf0844956934f6018e568e14d015920d715ddcdb98108979668c76b1
      image: sha256:a4a8af0db08902e65347157c5efef6d1f9e261f03c8aa14b1b40bc182b947fe7
      imageID: registry.k8s.io/ingress-nginx/controller@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
      lastState: {}
      name: controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-02-03T20:14:48Z"
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-sz4xw
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.20.32
    hostIPs:
    - ip: 192.168.20.32
    phase: Running
    podIP: 10.69.4.239
    podIPs:
    - ip: 10.69.4.239
    qosClass: Burstable
    startTime: "2025-02-03T20:14:47Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-02-03T20:14:34Z"
    generateName: internal-ingress-nginx-controller-5d6c6b87d-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 5d6c6b87d
    name: internal-ingress-nginx-controller-5d6c6b87d-ltfdh
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: internal-ingress-nginx-controller-5d6c6b87d
      uid: 93014a9b-ae84-45f1-98a2-77ceee80f3cd
    resourceVersion: "643069"
    uid: cd3d770a-997e-4c8e-bbb7-922329caab4a
  spec:
    containers:
    - args:
      - /nginx-ingress-controller
      - --publish-service=$(POD_NAMESPACE)/internal-ingress-nginx-controller
      - --election-id=internal-ingress-nginx-leader
      - --controller-class=k8s.io/internal
      - --ingress-class=nginx
      - --configmap=$(POD_NAMESPACE)/internal-ingress-nginx-controller
      - --validating-webhook=:8443
      - --validating-webhook-certificate=/usr/local/certificates/cert
      - --validating-webhook-key=/usr/local/certificates/key
      - --enable-metrics=true
      - --default-ssl-certificate=cert-manager/afamiljen-se-production-tls
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: LD_PRELOAD
        value: /usr/local/lib/libmimalloc.so
      image: registry.k8s.io/ingress-nginx/controller:v1.12.0@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 10254
        name: metrics
        protocol: TCP
      - containerPort: 8443
        name: webhook
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 2000Mi
        requests:
          cpu: "1"
          memory: 200Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: false
        runAsGroup: 82
        runAsNonRoot: true
        runAsUser: 101
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-glbh7
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ldite1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: internal-ingress-nginx
    serviceAccountName: internal-ingress-nginx
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: internal-ingress-nginx-admission
    - name: kube-api-access-glbh7
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:14:36Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:14:34Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:14:47Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:14:47Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:14:34Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://0ec3ec48888c0ae4da39e36ea3ff48c239dc66cddf9f940d6d905b4ecea1a222
      image: sha256:a4a8af0db08902e65347157c5efef6d1f9e261f03c8aa14b1b40bc182b947fe7
      imageID: registry.k8s.io/ingress-nginx/controller@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
      lastState: {}
      name: controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-02-03T20:14:35Z"
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-glbh7
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.20.30
    hostIPs:
    - ip: 192.168.20.30
    phase: Running
    podIP: 10.69.5.80
    podIPs:
    - ip: 10.69.5.80
    qosClass: Burstable
    startTime: "2025-02-03T20:14:34Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-02-03T20:14:22Z"
    generateName: internal-ingress-nginx-controller-5d6c6b87d-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 5d6c6b87d
    name: internal-ingress-nginx-controller-5d6c6b87d-m4cvp
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: internal-ingress-nginx-controller-5d6c6b87d
      uid: 93014a9b-ae84-45f1-98a2-77ceee80f3cd
    resourceVersion: "642910"
    uid: 98494850-36a1-43b5-916c-12de1d330835
  spec:
    containers:
    - args:
      - /nginx-ingress-controller
      - --publish-service=$(POD_NAMESPACE)/internal-ingress-nginx-controller
      - --election-id=internal-ingress-nginx-leader
      - --controller-class=k8s.io/internal
      - --ingress-class=nginx
      - --configmap=$(POD_NAMESPACE)/internal-ingress-nginx-controller
      - --validating-webhook=:8443
      - --validating-webhook-certificate=/usr/local/certificates/cert
      - --validating-webhook-key=/usr/local/certificates/key
      - --enable-metrics=true
      - --default-ssl-certificate=cert-manager/afamiljen-se-production-tls
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: LD_PRELOAD
        value: /usr/local/lib/libmimalloc.so
      image: registry.k8s.io/ingress-nginx/controller:v1.12.0@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 10254
        name: metrics
        protocol: TCP
      - containerPort: 8443
        name: webhook
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 2000Mi
        requests:
          cpu: "1"
          memory: 200Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: false
        runAsGroup: 82
        runAsNonRoot: true
        runAsUser: 101
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-l8zqk
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ldite2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: internal-ingress-nginx
    serviceAccountName: internal-ingress-nginx
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: internal-ingress-nginx-admission
    - name: kube-api-access-l8zqk
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:14:23Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:14:22Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:14:34Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:14:34Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T20:14:22Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://c65e3411e9deeb419d68e3a30aeab6ba5cac9890875749981b0d7f38bc194db1
      image: sha256:a4a8af0db08902e65347157c5efef6d1f9e261f03c8aa14b1b40bc182b947fe7
      imageID: registry.k8s.io/ingress-nginx/controller@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
      lastState: {}
      name: controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-02-03T20:14:23Z"
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-l8zqk
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.20.31
    hostIPs:
    - ip: 192.168.20.31
    phase: Running
    podIP: 10.69.3.64
    podIPs:
    - ip: 10.69.3.64
    qosClass: Burstable
    startTime: "2025-02-03T20:14:22Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: bd2c04393b25e0b7d2235d9271917541bc0d1b500f9d225d0241fb56080d4696
    creationTimestamp: "2025-02-03T17:09:08Z"
    generateName: k8s-gateway-5867877686-
    labels:
      app.kubernetes.io/instance: k8s-gateway
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: k8s-gateway
      app.kubernetes.io/version: 0.4.0
      helm.sh/chart: k8s-gateway-2.4.0
      pod-template-hash: "5867877686"
    name: k8s-gateway-5867877686-ghpnt
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: k8s-gateway-5867877686
      uid: 7f000f96-e863-4033-b70c-5a6c31a889e6
    resourceVersion: "614826"
    uid: 7f264363-0c9d-4fd9-86b3-327be07c54a7
  spec:
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: quay.io/oriedge/k8s_gateway:v0.4.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: k8s-gateway
      ports:
      - containerPort: 1053
        name: dns-udp
        protocol: UDP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 5
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        runAsUser: 1000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vvchv
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ldite1
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: k8s-gateway
    serviceAccountName: k8s-gateway
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: k8s-gateway
      name: config-volume
    - name: kube-api-access-vvchv
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T19:12:50Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T17:09:08Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T19:13:01Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T19:13:01Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-02-03T17:09:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://42a117646218140e7c7278f2150f73371d28dd8376aacde3478722b3b225ae09
      image: quay.io/oriedge/k8s_gateway:v0.4.0
      imageID: quay.io/oriedge/k8s_gateway@sha256:7bdbd447c0244b8f89de9cd6f4826ed0ac66c9406fac3a4ac80081020c251c6b
      lastState:
        terminated:
          containerID: containerd://dc313cc55c7b0efaabe9f689dea63b1c41a38682bfe2f456e3a4a73de16df973
          exitCode: 255
          finishedAt: "2025-02-03T19:09:49Z"
          reason: Unknown
          startedAt: "2025-02-03T17:09:12Z"
      name: k8s-gateway
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2025-02-03T19:12:50Z"
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vvchv
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.20.30
    hostIPs:
    - ip: 192.168.20.30
    phase: Running
    podIP: 10.69.5.167
    podIPs:
    - ip: 10.69.5.167
    qosClass: BestEffort
    startTime: "2025-02-03T17:09:08Z"
- apiVersion: v1
  data:
    TUNNEL_ID: MzdhOTgxNTctMDI4My00NGU5LWE0YzctMDY3N2Q5YzZhNTAx
    credentials.json: ewogICJBY2NvdW50VGFnIjogIjE2NGIzNjk4ZmMwMjhiNjk1MDE1ZDM0MzdkZTNiZWNmIiwKICAiVHVubmVsU2VjcmV0IjogIndwVnhUVGk1YkJubVEvbXlWZm1uM1hONGJNUWNGUGF0MU8rN2R5Qm9EZWs9IiwKICAiVHVubmVsSUQiOiAiMzdhOTgxNTctMDI4My00NGU5LWE0YzctMDY3N2Q5YzZhNTAxIgp9Cg==
  kind: Secret
  metadata:
    creationTimestamp: "2025-02-02T18:16:56Z"
    labels:
      app.kubernetes.io/name: cloudflared
      kustomize.toolkit.fluxcd.io/name: cloudflared
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: cloudflared-secret
    namespace: network
    resourceVersion: "3733"
    uid: e8f15855-cff6-4198-98ae-3e5e7286a5c3
  type: Opaque
- apiVersion: v1
  data:
    api-token: WkNsWUNBV3pNRjh6UU5wQlI5VzJOZkpnLVk0RHgySHcyR29ldW0yQw==
  kind: Secret
  metadata:
    creationTimestamp: "2025-02-02T18:15:56Z"
    labels:
      app.kubernetes.io/name: external-external-dns
      kustomize.toolkit.fluxcd.io/name: external-external-dns
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: external-dns-secret
    namespace: network
    resourceVersion: "2475"
    uid: 62712476-98c8-4793-ab8a-40892c081fe2
  type: Opaque
- apiVersion: v1
  data:
    ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkakNDQVJ1Z0F3SUJBZ0lRYXprM0dxQ0J4MklibzJsTEx6QXdmakFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1J1YVd3eE1DQVhEVEkxTURJd01qRTRORFl6TkZvWUR6SXhNalV3TVRBNU1UZzBOak0wV2pBUApNUTB3Q3dZRFZRUUtFd1J1YVd3eE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRTZRdWVxdVB5CitvT085eExPQkExd1hoU2J5MGU2blFMMXNCTkJhT20wZFFQWHlxYUEzS3RvUUc4Yzl4TVhNNnNJTWVEaTdxMEoKSEFXSnJRK05VQThtbEtOWE1GVXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRgpCd01CTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRk9oQ3dnQllWZzV3UEYvUU91NmxDbjduCk5IeUdNQW9HQ0NxR1NNNDlCQU1DQTBrQU1FWUNJUURzYkZ6bjNpMFNYYTdJUC9mQWVoWEZKSWQ2Rzhra2RndGUKUzZGT1BxYWhJUUloQU1kU1hEQmwzNUt4eXM3YkRhRWY1enIyWXJUY05nek5Ub2pKQURQREptY1QKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ4VENDQVd5Z0F3SUJBZ0lRUDRNekJWY3lEc3dFVEFmRzh2SU4zREFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1J1YVd3eE1DQVhEVEkxTURJd01qRTRORFl6TkZvWUR6SXhNalV3TVRBNU1UZzBOak0wV2pBUApNUTB3Q3dZRFZRUUtFd1J1YVd3eU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRWErdzZuSEZMClNneGo2MXBmUG5FdHVDVVRVSHoxMzhFdHNwemlFK2pZTWgyWnI4c2JhVFQ5aGtyT3lucUY5WjdZelFZTFMydzUKY01panltTWFjMkhyWDZPQnB6Q0JwREFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQgpCUVVIQXdFd0RBWURWUjBUQVFIL0JBSXdBREJ2QmdOVkhSRUVhREJtZ2l0bGVIUmxjbTVoYkMxcGJtZHlaWE56CkxXNW5hVzU0TFdOdmJuUnliMnhzWlhJdFlXUnRhWE56YVc5dWdqZGxlSFJsY201aGJDMXBibWR5WlhOekxXNW4KYVc1NExXTnZiblJ5YjJ4c1pYSXRZV1J0YVhOemFXOXVMbTVsZEhkdmNtc3VjM1pqTUFvR0NDcUdTTTQ5QkFNQwpBMGNBTUVRQ0lBd1N6WDYvN0NrbEdieVJHYlNrb3pFalhya29HbmxsVDdKaVVUNU51QWhaQWlCWXlwMkhDa3hTCi9rOUN3endiTVQyMXhKY01RbERsaUpjRjFhVlhhTjVSREE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSURaZmlocXlLb3VCOFdjUGhVeWZ0YkVvVnMwdGFsYk5NRGIwNHcvSGtpWGFvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFYSt3Nm5IRkxTZ3hqNjFwZlBuRXR1Q1VUVUh6MTM4RXRzcHppRStqWU1oMlpyOHNiYVRUOQpoa3JPeW5xRjlaN1l6UVlMUzJ3NWNNaWp5bU1hYzJIclh3PT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
  kind: Secret
  metadata:
    creationTimestamp: "2025-02-02T18:51:34Z"
    name: external-ingress-nginx-admission
    namespace: network
    resourceVersion: "14911"
    uid: 095e201b-6d7b-4b17-a096-f9d83d72df15
  type: Opaque
- apiVersion: v1
  data:
    ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkRENDQVJ5Z0F3SUJBZ0lSQUx5Tm5kSHdQeTRHeCs4V3JOZXlISFl3Q2dZSUtvWkl6ajBFQXdJd0R6RU4KTUFzR0ExVUVDaE1FYm1sc01UQWdGdzB5TlRBeU1ESXhPRFEyTXpoYUdBOHlNVEkxTURFd09URTRORFl6T0ZvdwpEekVOTUFzR0ExVUVDaE1FYm1sc01UQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJJUi9tcUVFCjlCWFNlV1VrSnE0MTBPdFVML0pDMXRnTE04VkQvcVhjeStPZEZLSlMwZ1ZpV1diSWh6TFZpSXk3ZGw1dVpiT1kKeUtPaEhiOVFsVzVXZDVTalZ6QlZNQTRHQTFVZER3RUIvd1FFQXdJQ0JEQVRCZ05WSFNVRUREQUtCZ2dyQmdFRgpCUWNEQVRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJSQ3pZbHQ5Z2Z1cklKT3Z3aXAxbVhmCjNiR3BDekFLQmdncWhrak9QUVFEQWdOR0FEQkRBaUJnUTdFa2FlVHoyT1M3UEEzV3QxK2cyOHNGdDRaanFsNjgKRzVYcmRHVktuQUlmR2hJTDNacGloMGJzeUUzQUVVQ0plNWFtQ1N2VTk3MlVpSEQ3U3JhbStnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ4ekNDQVd5Z0F3SUJBZ0lRT3Z1Wmo0Zml6Z3I3MkpMd01yWHhlVEFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1J1YVd3eE1DQVhEVEkxTURJd01qRTRORFl6T0ZvWUR6SXhNalV3TVRBNU1UZzBOak00V2pBUApNUTB3Q3dZRFZRUUtFd1J1YVd3eU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRTFRYzhDUTJHClJnUmpGWDZoR2ZoTGVKR1RoZzE2K2UxR2tHOTZZV3VhZjBUalVLMCttVTdsT3h6ZnFoSHhLUnBxR0oxdGl1S3cKdFRkQUowZE5rb1JGZGFPQnB6Q0JwREFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQgpCUVVIQXdFd0RBWURWUjBUQVFIL0JBSXdBREJ2QmdOVkhSRUVhREJtZ2l0cGJuUmxjbTVoYkMxcGJtZHlaWE56CkxXNW5hVzU0TFdOdmJuUnliMnhzWlhJdFlXUnRhWE56YVc5dWdqZHBiblJsY201aGJDMXBibWR5WlhOekxXNW4KYVc1NExXTnZiblJ5YjJ4c1pYSXRZV1J0YVhOemFXOXVMbTVsZEhkdmNtc3VjM1pqTUFvR0NDcUdTTTQ5QkFNQwpBMGtBTUVZQ0lRQzFMOVFEYTlqYzdURHcvOWFrdmRYZnNZa3RoaGxscTArK0lZYlQ4N3Y2VFFJaEFNRWFnRnlaCnd5L3BJQjdwbkE1OC9DaEhEdlBHSzlNYTlEcnlGOEpMN2Y4NAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSU9yWFl5V2JPd1N0a3ZIU2M3WVBQaUYvWUdKNHJSU1Bwald4ZDV4dXRRU1hvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFMVFjOENRMkdSZ1JqRlg2aEdmaExlSkdUaGcxNitlMUdrRzk2WVd1YWYwVGpVSzArbVU3bApPeHpmcWhIeEtScHFHSjF0aXVLd3RUZEFKMGROa29SRmRRPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
  kind: Secret
  metadata:
    creationTimestamp: "2025-02-02T18:51:38Z"
    name: internal-ingress-nginx-admission
    namespace: network
    resourceVersion: "14994"
    uid: 39d06495-2c9b-40f1-9495-21f17ea69c8b
  type: Opaque
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2025-02-02T18:16:59Z"
    labels:
      modifiedAt: "1738520225"
      name: cloudflared
      owner: helm
      status: deployed
      version: "1"
    name: sh.helm.release.v1.cloudflared.v1
    namespace: network
    resourceVersion: "3846"
    uid: 1c74e8a7-34d1-471d-965e-efb6aa3b1230
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2025-02-02T18:16:01Z"
    labels:
      modifiedAt: "1738520190"
      name: external-dns
      owner: helm
      status: deployed
      version: "1"
    name: sh.helm.release.v1.external-dns.v1
    namespace: network
    resourceVersion: "3325"
    uid: decbdbec-284f-4ac8-a0f4-eb7aa6a4dadd
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2025-02-02T18:51:30Z"
    labels:
      modifiedAt: "1738522322"
      name: external-ingress-nginx
      owner: helm
      status: superseded
      version: "1"
    name: sh.helm.release.v1.external-ingress-nginx.v1
    namespace: network
    resourceVersion: "92718"
    uid: ac6839c1-3681-4ee5-a8da-375ee17f01d9
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2025-02-02T22:05:46Z"
    labels:
      modifiedAt: "1738522322"
      name: external-ingress-nginx
      owner: helm
      status: deployed
      version: "2"
    name: sh.helm.release.v1.external-ingress-nginx.v2
    namespace: network
    resourceVersion: "92719"
    uid: 114f3cec-c861-4faf-88ce-d08b1748acc3
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2025-02-02T19:07:31Z"
    labels:
      modifiedAt: "1738523276"
      name: internal-ingress-nginx
      owner: helm
      status: superseded
      version: "1"
    name: sh.helm.release.v1.internal-ingress-nginx.v1
    namespace: network
    resourceVersion: "92668"
    uid: da0e916e-8bc3-4366-b9d0-395e68752e39
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2025-02-02T22:05:45Z"
    labels:
      modifiedAt: "1738523276"
      name: internal-ingress-nginx
      owner: helm
      status: deployed
      version: "2"
    name: sh.helm.release.v1.internal-ingress-nginx.v2
    namespace: network
    resourceVersion: "92669"
    uid: e4f39db4-54f2-4f5e-ad40-fa117bc8741e
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2025-02-02T18:16:03Z"
    labels:
      modifiedAt: "1738520188"
      name: k8s-gateway
      owner: helm
      status: deployed
      version: "1"
    name: sh.helm.release.v1.k8s-gateway.v1
    namespace: network
    resourceVersion: "3268"
    uid: a799cfcc-3d22-4846-aca0-ed0ec84cca8f
  type: helm.sh/release.v1
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    creationTimestamp: "2025-02-02T18:15:54Z"
    name: default
    namespace: network
    resourceVersion: "2353"
    uid: 064d6855-60da-43ed-ad93-c2254cd7aa3d
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    annotations:
      meta.helm.sh/release-name: external-dns
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:16:01Z"
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: external-dns
      app.kubernetes.io/version: 0.15.1
      helm.sh/chart: external-dns-1.15.1
      helm.toolkit.fluxcd.io/name: external-dns
      helm.toolkit.fluxcd.io/namespace: network
    name: external-dns
    namespace: network
    resourceVersion: "2790"
    uid: 12cca5b0-7d3b-4c88-9729-d49a9e071e45
- apiVersion: v1
  automountServiceAccountToken: true
  kind: ServiceAccount
  metadata:
    annotations:
      meta.helm.sh/release-name: external-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:51:37Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: external-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: external-ingress-nginx
    namespace: network
    resourceVersion: "14936"
    uid: 808fc77e-03e8-48e8-9ead-63accad1b3dd
- apiVersion: v1
  automountServiceAccountToken: true
  kind: ServiceAccount
  metadata:
    annotations:
      meta.helm.sh/release-name: internal-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T19:07:36Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: internal-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: internal-ingress-nginx
    namespace: network
    resourceVersion: "21713"
    uid: 960097be-adba-42b3-803c-54ae169ffeb9
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    annotations:
      meta.helm.sh/release-name: k8s-gateway
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:16:03Z"
    labels:
      app.kubernetes.io/instance: k8s-gateway
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: k8s-gateway
      app.kubernetes.io/version: 0.4.0
      helm.sh/chart: k8s-gateway-2.4.0
      helm.toolkit.fluxcd.io/name: k8s-gateway
      helm.toolkit.fluxcd.io/namespace: network
    name: k8s-gateway
    namespace: network
    resourceVersion: "2890"
    uid: 1f1b2361-50a6-4084-a379-cf662767bdcb
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: cloudflared
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:16:59Z"
    labels:
      app.kubernetes.io/instance: cloudflared
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cloudflared
      app.kubernetes.io/service: cloudflared
      helm.sh/chart: app-template-3.6.1
      helm.toolkit.fluxcd.io/name: cloudflared
      helm.toolkit.fluxcd.io/namespace: network
    name: cloudflared
    namespace: network
    resourceVersion: "3776"
    uid: 1228b5a8-5d57-4e08-9749-e017f3b6aa69
  spec:
    clusterIP: 10.96.219.239
    clusterIPs:
    - 10.96.219.239
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app.kubernetes.io/component: cloudflared
      app.kubernetes.io/instance: cloudflared
      app.kubernetes.io/name: cloudflared
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: external-dns
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:16:01Z"
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: external-dns
      app.kubernetes.io/version: 0.15.1
      helm.sh/chart: external-dns-1.15.1
      helm.toolkit.fluxcd.io/name: external-dns
      helm.toolkit.fluxcd.io/namespace: network
    name: external-dns
    namespace: network
    resourceVersion: "2798"
    uid: c36324d6-48b4-4932-9a34-81c8b98d6613
  spec:
    clusterIP: 10.96.248.51
    clusterIPs:
    - 10.96.248.51
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 7979
      protocol: TCP
      targetPort: http
    selector:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      external-dns.alpha.kubernetes.io/hostname: external.afamiljen.se
      external-dns.alpha.kubernetes.io/ip: 46.235.236.132
      lbipam.cilium.io/ips: 192.168.20.13
      meta.helm.sh/release-name: external-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:51:37Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: external-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
      k8slens-edit-resource-version: v1
    name: external-ingress-nginx-controller
    namespace: network
    resourceVersion: "6278976"
    uid: 9887f61e-c2de-460d-8d58-a0a5f4525023
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 10.96.161.110
    clusterIPs:
    - 10.96.161.110
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: http
      name: http
      nodePort: 32137
      port: 80
      protocol: TCP
      targetPort: http
    - appProtocol: https
      name: https
      nodePort: 32351
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: LoadBalancer
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:51:37Z"
      message: ""
      reason: satisfied
      status: "True"
      type: cilium.io/IPAMRequestSatisfied
    loadBalancer:
      ingress:
      - ip: 192.168.20.13
        ipMode: VIP
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: external-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:51:37Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: external-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: external-ingress-nginx-controller-admission
    namespace: network
    resourceVersion: "14949"
    uid: bd9f48f2-60f9-4790-8493-9cff9276afab
  spec:
    clusterIP: 10.96.39.200
    clusterIPs:
    - 10.96.39.200
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: https
      name: https-webhook
      port: 443
      protocol: TCP
      targetPort: webhook
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: external-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:51:37Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: external-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: external-ingress-nginx-controller-metrics
    namespace: network
    resourceVersion: "14952"
    uid: af494461-1eb0-425d-ab6d-6e445abfa3ec
  spec:
    clusterIP: 10.96.13.233
    clusterIPs:
    - 10.96.13.233
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: metrics
      port: 10254
      protocol: TCP
      targetPort: metrics
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      lbipam.cilium.io/ips: 192.168.20.11
      meta.helm.sh/release-name: internal-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T19:07:36Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: internal-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: internal-ingress-nginx-controller
    namespace: network
    resourceVersion: "21736"
    uid: d6b43a37-8735-4f32-b282-0064e1d86161
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 10.96.42.178
    clusterIPs:
    - 10.96.42.178
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: http
      name: http
      nodePort: 30214
      port: 80
      protocol: TCP
      targetPort: http
    - appProtocol: https
      name: https
      nodePort: 32269
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: LoadBalancer
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T19:07:36Z"
      message: ""
      reason: satisfied
      status: "True"
      type: cilium.io/IPAMRequestSatisfied
    loadBalancer:
      ingress:
      - ip: 192.168.20.11
        ipMode: VIP
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: internal-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T19:07:36Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: internal-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: internal-ingress-nginx-controller-admission
    namespace: network
    resourceVersion: "21722"
    uid: ad5c1452-ebdd-46c6-80e3-65417f009c4a
  spec:
    clusterIP: 10.96.181.115
    clusterIPs:
    - 10.96.181.115
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: https
      name: https-webhook
      port: 443
      protocol: TCP
      targetPort: webhook
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: internal-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T19:07:36Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: internal-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: internal-ingress-nginx-controller-metrics
    namespace: network
    resourceVersion: "21728"
    uid: a0d1a453-e3c5-4d46-ac74-02969769f258
  spec:
    clusterIP: 10.96.28.61
    clusterIPs:
    - 10.96.28.61
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: metrics
      port: 10254
      protocol: TCP
      targetPort: metrics
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      lbipam.cilium.io/ips: 192.168.20.12
      meta.helm.sh/release-name: k8s-gateway
      meta.helm.sh/release-namespace: network
      prometheus.io/port: "9153"
      prometheus.io/scrape: "true"
    creationTimestamp: "2025-02-02T18:16:03Z"
    labels:
      app.kubernetes.io/instance: k8s-gateway
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: k8s-gateway
      app.kubernetes.io/version: 0.4.0
      helm.sh/chart: k8s-gateway-2.4.0
      helm.toolkit.fluxcd.io/name: k8s-gateway
      helm.toolkit.fluxcd.io/namespace: network
    name: k8s-gateway
    namespace: network
    resourceVersion: "3222"
    uid: 07f5d04b-942d-469d-bf42-cbc4ac9ce365
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 10.96.165.80
    clusterIPs:
    - 10.96.165.80
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: dns-udp
      nodePort: 30980
      port: 53
      protocol: UDP
      targetPort: dns-udp
    selector:
      app.kubernetes.io/instance: k8s-gateway
      app.kubernetes.io/name: k8s-gateway
    sessionAffinity: None
    type: LoadBalancer
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:16:26Z"
      message: ""
      reason: satisfied
      status: "True"
      type: cilium.io/IPAMRequestSatisfied
    loadBalancer:
      ingress:
      - ip: 192.168.20.12
        ipMode: VIP
- apiVersion: admissionregistration.k8s.io/v1
  kind: MutatingWebhookConfiguration
  metadata:
    annotations:
      cert-manager.io/inject-ca-from-secret: cert-manager/cert-manager-webhook-ca
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    generation: 2
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-webhook
    resourceVersion: "3008"
    uid: 28856963-0335-47d4-a317-2585002c48d9
  webhooks:
  - admissionReviewVersions:
    - v1
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ3ekNDQVVpZ0F3SUJBZ0lSQU5CY1pOa1pESFBqaFBBOVM3ZlBtTmN3Q2dZSUtvWkl6ajBFQXdNd0lqRWcKTUI0R0ExVUVBeE1YWTJWeWRDMXRZVzVoWjJWeUxYZGxZbWh2YjJzdFkyRXdIaGNOTWpVd01qQXlNVGd4TkRNeQpXaGNOTWpZd01qQXlNVGd4TkRNeVdqQWlNU0F3SGdZRFZRUURFeGRqWlhKMExXMWhibUZuWlhJdGQyVmlhRzl2CmF5MWpZVEIyTUJBR0J5cUdTTTQ5QWdFR0JTdUJCQUFpQTJJQUJNUGd2NFFZMThvV2daT01OeERiVDE0QmQrQWsKVldMQVpwbS9VY3ZGQTV0d21ObWNTZEluWStRaHJxNy9zUmtzdi9LdXU5a2oxRHFqcFh6R0ExUEZBN20rODVMeQpsSllkNE1pM2cxcmdmWTB0KzczN0xzV0VIVGdVM0VXejBOTVBtNk5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trCk1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZDc1pVVGJnSVZKL1VxZXh0UFZLOStEZjBnb2UKTUFvR0NDcUdTTTQ5QkFNREEya0FNR1lDTVFEQXgrWURNZkxnVUpaeXU3UDZvUFU4SGY0Mk14QURXL3hsWTVsZgp6VXh1OU1yN2Q2NmdlMVVCdnUwalJzcXg5SWdDTVFEcjNBL2pFeUJxTVhUd1ZZaDZxWmpZYlNxOUcxeWc0blkyCmc3Snl5NEc0d3p0ZXVVYklEb2tWeURITGNIT0JXV0E9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
      service:
        name: cert-manager-webhook
        namespace: cert-manager
        path: /mutate
        port: 443
    failurePolicy: Fail
    matchPolicy: Equivalent
    name: webhook.cert-manager.io
    namespaceSelector: {}
    objectSelector: {}
    reinvocationPolicy: Never
    rules:
    - apiGroups:
      - cert-manager.io
      apiVersions:
      - v1
      operations:
      - CREATE
      resources:
      - certificaterequests
      scope: '*'
    sideEffects: None
    timeoutSeconds: 30
- apiVersion: admissionregistration.k8s.io/v1
  kind: MutatingWebhookConfiguration
  metadata:
    annotations:
      objectset.rio.cattle.io/applied: H4sIAAAAAAAA/8yXQW/iOhDHv8rTnF0I0PJKpHd4pfRJvKpqoXBoxWHiDImL44lsh26F+O4rB6i2WnW3p01u4L9H85u/7dFkBwV5TNEjxDtAY9ijV2xc+MvJC0nvyHes4o5E7zV1FHdVCjGA+FTnV0P2LNtuIIbutif++l+Z9J85SUv+t2EGC4IYNJssZ2vOXinJmTdnEr8U6kqUH+Ldm/NUwF6AtFTX9qgKch6LEmJTaS1AY0L6lxXn6HKIYYiXuF73BoNR1MNRLxldDoYRXfaHw/7g7/NoEFH/4nx4PgzZPqujqDx6tmHLcclB/LwDTAvlnGIzo62i1yVZdziHZ9j2YCVAakXGj9msVRZYJV5VJtUhye088rfz3ni2SKeP6up6tpwu5oun6UN0s5jVWuTHm950vpj2l5O764dlev8U3Qzmi+nVU6THIMCR3arg3O4n8neyUw1wqO4zqwWU6PPD2XePId26bMUmqGw9xKOLqL/fC1ij0pWle9ZKvkEMN6g0CCjQy/x9cfINpYd3U48edk6ZO4pBgK00Hb0s1X+Wq7J278dNKxG0j94m5LEfFC7Jni7/M4xnk38fJyBgcX8dfqwEWHJcWVkngQTlJmRYCXCSy4B1dzIlhb34cxTKZKrAjNrEUqDBjGybkEKTO0nNUhlOG2fYsq6KxinIZMo0TmFJVtYqk71w0jTLwZFWvGe2ZY6maQqXo21TO6lKjzYj3w6WdjxjZ7B0OTfuiaVSK4lNY7iqDDNOUo9njcPUQ1k7ppXDbUXvUeYFmcbvizLOo5Htai9fGunCskppsl6H75UgsiHYr/bfAwAA//8lEaQ50Q0AAA
      objectset.rio.cattle.io/id: ""
      objectset.rio.cattle.io/owner-gvk: /v1, Kind=Secret
      objectset.rio.cattle.io/owner-name: longhorn-webhook-ca
      objectset.rio.cattle.io/owner-namespace: longhorn-system
    creationTimestamp: "2025-02-03T17:18:00Z"
    generation: 1
    labels:
      objectset.rio.cattle.io/hash: 6a8aff133901a91b98360e82662374030e254646
    name: longhorn-webhook-mutator
    resourceVersion: "556314"
    uid: 6df4335e-c45a-49c8-a949-6ff05036bc89
  webhooks:
  - admissionReviewVersions:
    - v1
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ2VENDQVdPZ0F3SUJBZ0lCQURBS0JnZ3Foa2pPUFFRREFqQkdNUnd3R2dZRFZRUUtFeE5rZVc1aGJXbGoKYkdsemRHVnVaWEl0YjNKbk1TWXdKQVlEVlFRRERCMWtlVzVoYldsamJHbHpkR1Z1WlhJdFkyRkFNVGN6T0RZdwpNekEzTWpBZUZ3MHlOVEF5TURNeE56RTNOVEphRncwek5UQXlNREV4TnpFM05USmFNRVl4SERBYUJnTlZCQW9UCkUyUjVibUZ0YVdOc2FYTjBaVzVsY2kxdmNtY3hKakFrQmdOVkJBTU1IV1I1Ym1GdGFXTnNhWE4wWlc1bGNpMWoKWVVBeE56TTROakF6TURjeU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRVZMekRqQXU5RVZhcQo1UUhIWktxb2tsTDN3VU1icFBIdms0QU5wZU5WcWV3WG1FV21lRTRRVEF1NW1MVXg2QzZtODJQSHkyQW8wT1N5CjJWKzBMbWk5R2FOQ01FQXdEZ1lEVlIwUEFRSC9CQVFEQWdLa01BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0hRWUQKVlIwT0JCWUVGSE50T01HU1dwNEl0WUw4VXNlTWpkNHhUZmNRTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSVFDUwpaNmN1L250OElSVTQzT2I0TmNtWmkvRkdjRk5PanFaa0JyRDNobXdIZUFJZ2NnVTdJbVRjUXBKVHlaRHZYU2FYClVhS2hQVXJsSnJIdUgrL3d3SWtOc3hFPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        name: longhorn-admission-webhook
        namespace: longhorn-system
        path: /v1/webhook/mutation
        port: 9502
    failurePolicy: Fail
    matchPolicy: Exact
    name: mutator.longhorn.io
    namespaceSelector: {}
    objectSelector: {}
    reinvocationPolicy: Never
    rules:
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - backups
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - backingimages
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - backingimagemanagers
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - backingimagedatasources
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - nodes
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - volumes
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - engines
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - recurringjobs
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - engineimages
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - orphans
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - sharemanagers
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - backuptargets
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - backupvolumes
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - snapshots
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - replicas
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - supportbundles
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - systembackups
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - volumeattachments
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - instancemanagers
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - backupbackingimages
      scope: Namespaced
    sideEffects: None
    timeoutSeconds: 10
- apiVersion: admissionregistration.k8s.io/v1
  kind: ValidatingWebhookConfiguration
  metadata:
    annotations:
      cert-manager.io/inject-ca-from-secret: cert-manager/cert-manager-webhook-ca
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    generation: 2
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-webhook
    resourceVersion: "3010"
    uid: b702140f-86df-4780-910c-4e0ab477170d
  webhooks:
  - admissionReviewVersions:
    - v1
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ3ekNDQVVpZ0F3SUJBZ0lSQU5CY1pOa1pESFBqaFBBOVM3ZlBtTmN3Q2dZSUtvWkl6ajBFQXdNd0lqRWcKTUI0R0ExVUVBeE1YWTJWeWRDMXRZVzVoWjJWeUxYZGxZbWh2YjJzdFkyRXdIaGNOTWpVd01qQXlNVGd4TkRNeQpXaGNOTWpZd01qQXlNVGd4TkRNeVdqQWlNU0F3SGdZRFZRUURFeGRqWlhKMExXMWhibUZuWlhJdGQyVmlhRzl2CmF5MWpZVEIyTUJBR0J5cUdTTTQ5QWdFR0JTdUJCQUFpQTJJQUJNUGd2NFFZMThvV2daT01OeERiVDE0QmQrQWsKVldMQVpwbS9VY3ZGQTV0d21ObWNTZEluWStRaHJxNy9zUmtzdi9LdXU5a2oxRHFqcFh6R0ExUEZBN20rODVMeQpsSllkNE1pM2cxcmdmWTB0KzczN0xzV0VIVGdVM0VXejBOTVBtNk5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trCk1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZDc1pVVGJnSVZKL1VxZXh0UFZLOStEZjBnb2UKTUFvR0NDcUdTTTQ5QkFNREEya0FNR1lDTVFEQXgrWURNZkxnVUpaeXU3UDZvUFU4SGY0Mk14QURXL3hsWTVsZgp6VXh1OU1yN2Q2NmdlMVVCdnUwalJzcXg5SWdDTVFEcjNBL2pFeUJxTVhUd1ZZaDZxWmpZYlNxOUcxeWc0blkyCmc3Snl5NEc0d3p0ZXVVYklEb2tWeURITGNIT0JXV0E9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
      service:
        name: cert-manager-webhook
        namespace: cert-manager
        path: /validate
        port: 443
    failurePolicy: Fail
    matchPolicy: Equivalent
    name: webhook.cert-manager.io
    namespaceSelector:
      matchExpressions:
      - key: cert-manager.io/disable-validation
        operator: NotIn
        values:
        - "true"
    objectSelector: {}
    rules:
    - apiGroups:
      - cert-manager.io
      - acme.cert-manager.io
      apiVersions:
      - v1
      operations:
      - CREATE
      - UPDATE
      resources:
      - '*/*'
      scope: '*'
    sideEffects: None
    timeoutSeconds: 30
- apiVersion: admissionregistration.k8s.io/v1
  kind: ValidatingWebhookConfiguration
  metadata:
    annotations:
      meta.helm.sh/release-name: external-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:51:37Z"
    generation: 2
    labels:
      app.kubernetes.io/component: admission-webhook
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: external-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: external-ingress-nginx-admission
    resourceVersion: "15263"
    uid: fd74ed01-a91b-4889-bacd-3994d494bfbc
  webhooks:
  - admissionReviewVersions:
    - v1
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkakNDQVJ1Z0F3SUJBZ0lRYXprM0dxQ0J4MklibzJsTEx6QXdmakFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1J1YVd3eE1DQVhEVEkxTURJd01qRTRORFl6TkZvWUR6SXhNalV3TVRBNU1UZzBOak0wV2pBUApNUTB3Q3dZRFZRUUtFd1J1YVd3eE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRTZRdWVxdVB5CitvT085eExPQkExd1hoU2J5MGU2blFMMXNCTkJhT20wZFFQWHlxYUEzS3RvUUc4Yzl4TVhNNnNJTWVEaTdxMEoKSEFXSnJRK05VQThtbEtOWE1GVXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRgpCd01CTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRk9oQ3dnQllWZzV3UEYvUU91NmxDbjduCk5IeUdNQW9HQ0NxR1NNNDlCQU1DQTBrQU1FWUNJUURzYkZ6bjNpMFNYYTdJUC9mQWVoWEZKSWQ2Rzhra2RndGUKUzZGT1BxYWhJUUloQU1kU1hEQmwzNUt4eXM3YkRhRWY1enIyWXJUY05nek5Ub2pKQURQREptY1QKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
      service:
        name: external-ingress-nginx-controller-admission
        namespace: network
        path: /networking/v1/ingresses
        port: 443
    failurePolicy: Fail
    matchPolicy: Equivalent
    name: validate.nginx.ingress.kubernetes.io
    namespaceSelector: {}
    objectSelector:
      matchExpressions:
      - key: ingress-class
        operator: In
        values:
        - external
    rules:
    - apiGroups:
      - networking.k8s.io
      apiVersions:
      - v1
      operations:
      - CREATE
      - UPDATE
      resources:
      - ingresses
      scope: '*'
    sideEffects: None
    timeoutSeconds: 10
- apiVersion: admissionregistration.k8s.io/v1
  kind: ValidatingWebhookConfiguration
  metadata:
    annotations:
      meta.helm.sh/release-name: internal-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T19:07:36Z"
    generation: 2
    labels:
      app.kubernetes.io/component: admission-webhook
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: internal-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: internal-ingress-nginx-admission
    resourceVersion: "21910"
    uid: 2bec6162-5f24-44a7-8b5b-750028c0c6c2
  webhooks:
  - admissionReviewVersions:
    - v1
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkRENDQVJ5Z0F3SUJBZ0lSQUx5Tm5kSHdQeTRHeCs4V3JOZXlISFl3Q2dZSUtvWkl6ajBFQXdJd0R6RU4KTUFzR0ExVUVDaE1FYm1sc01UQWdGdzB5TlRBeU1ESXhPRFEyTXpoYUdBOHlNVEkxTURFd09URTRORFl6T0ZvdwpEekVOTUFzR0ExVUVDaE1FYm1sc01UQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJJUi9tcUVFCjlCWFNlV1VrSnE0MTBPdFVML0pDMXRnTE04VkQvcVhjeStPZEZLSlMwZ1ZpV1diSWh6TFZpSXk3ZGw1dVpiT1kKeUtPaEhiOVFsVzVXZDVTalZ6QlZNQTRHQTFVZER3RUIvd1FFQXdJQ0JEQVRCZ05WSFNVRUREQUtCZ2dyQmdFRgpCUWNEQVRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJSQ3pZbHQ5Z2Z1cklKT3Z3aXAxbVhmCjNiR3BDekFLQmdncWhrak9QUVFEQWdOR0FEQkRBaUJnUTdFa2FlVHoyT1M3UEEzV3QxK2cyOHNGdDRaanFsNjgKRzVYcmRHVktuQUlmR2hJTDNacGloMGJzeUUzQUVVQ0plNWFtQ1N2VTk3MlVpSEQ3U3JhbStnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
      service:
        name: internal-ingress-nginx-controller-admission
        namespace: network
        path: /networking/v1/ingresses
        port: 443
    failurePolicy: Fail
    matchPolicy: Equivalent
    name: validate.nginx.ingress.kubernetes.io
    namespaceSelector: {}
    objectSelector:
      matchExpressions:
      - key: ingress-class
        operator: In
        values:
        - internal
    rules:
    - apiGroups:
      - networking.k8s.io
      apiVersions:
      - v1
      operations:
      - CREATE
      - UPDATE
      resources:
      - ingresses
      scope: '*'
    sideEffects: None
    timeoutSeconds: 10
- apiVersion: admissionregistration.k8s.io/v1
  kind: ValidatingWebhookConfiguration
  metadata:
    annotations:
      objectset.rio.cattle.io/applied: H4sIAAAAAAAA/8yWz24CNxDGX6WaswMLJDSs1EMDpBKNogQCh0QcZr3DroPXXtmzpBHi3SvzT00CbS6F3MDj0febzzOaXUJBjCkyQrwENMYysrLGh782eSXJnrjmlK1JZNZUU7auUogBxNG4fTPkLrLFHGKoLxrilz+VSX8bkXTE/5lmsCCIQVuT5daZizdKcmvnFxK/lepLlB/y/btnKmAlQDpa1/akCvKMRQmxqbQWoDEh/a8V5+hziKGN1zibNVqtTtTATiPpXLfaEV032+1m69fLqBVR8+qyfdkOasfqWKBWKbJ14dL20EP8sgRMC+W9smZIC0VvE3J+8xIvsGjAVIDUigx3rZmpLNBKvKlMqoPM3Sjiu1GjOxyngyd10xtOBuPR+HnwGN2Oh+tYxN15YzAaD5qT/n3vcZI+PEe3rdF4cPMc6S4I8OQWKni3/MK+J9tVAZv6jpktoETON69f36bUt4Ura0LcOoa4cxU1VysBM1S6cvRgtZLvEMMtKg0CCmSZ7w/7f6Fk2Bu797G2U68pCwJcpWnrZ6n+cLYq1w7+89JUhNhHfxNibIaILcntRuAFusP+7099EDB+6IUfUwGOvK2cXIuAsSn5cOqlLQPW/c6WFFbi/2EQ0Ovf9Q/AeGJWJjs1z2cMR7JyTpns1SYnYzliSYJyrkymCsxO9U6HEKryx4D8mG7d4DC6jPjcLbuwuipOPsifKawrczTnpvAGS5/bU73JF/mqDMshWW+2czGs19hJ5+UwgiPP1p29MTfjgcwo84LM2ceVTKbMz9m7jkqtJJ7bFWU8o5FUoMGM3LdxDjJ8lT+iWoY0z2R40yVSoyqOaodjlVJ/Ngvf2SFoDcFquvo7AAD//3gVYAiJDAAA
      objectset.rio.cattle.io/id: ""
      objectset.rio.cattle.io/owner-gvk: /v1, Kind=Secret
      objectset.rio.cattle.io/owner-name: longhorn-webhook-ca
      objectset.rio.cattle.io/owner-namespace: longhorn-system
    creationTimestamp: "2025-02-03T17:18:00Z"
    generation: 1
    labels:
      objectset.rio.cattle.io/hash: 6a8aff133901a91b98360e82662374030e254646
    name: longhorn-webhook-validator
    resourceVersion: "556313"
    uid: 90ba7a22-32bd-47b8-8e50-9039b9818910
  webhooks:
  - admissionReviewVersions:
    - v1
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ2VENDQVdPZ0F3SUJBZ0lCQURBS0JnZ3Foa2pPUFFRREFqQkdNUnd3R2dZRFZRUUtFeE5rZVc1aGJXbGoKYkdsemRHVnVaWEl0YjNKbk1TWXdKQVlEVlFRRERCMWtlVzVoYldsamJHbHpkR1Z1WlhJdFkyRkFNVGN6T0RZdwpNekEzTWpBZUZ3MHlOVEF5TURNeE56RTNOVEphRncwek5UQXlNREV4TnpFM05USmFNRVl4SERBYUJnTlZCQW9UCkUyUjVibUZ0YVdOc2FYTjBaVzVsY2kxdmNtY3hKakFrQmdOVkJBTU1IV1I1Ym1GdGFXTnNhWE4wWlc1bGNpMWoKWVVBeE56TTROakF6TURjeU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRVZMekRqQXU5RVZhcQo1UUhIWktxb2tsTDN3VU1icFBIdms0QU5wZU5WcWV3WG1FV21lRTRRVEF1NW1MVXg2QzZtODJQSHkyQW8wT1N5CjJWKzBMbWk5R2FOQ01FQXdEZ1lEVlIwUEFRSC9CQVFEQWdLa01BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0hRWUQKVlIwT0JCWUVGSE50T01HU1dwNEl0WUw4VXNlTWpkNHhUZmNRTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSVFDUwpaNmN1L250OElSVTQzT2I0TmNtWmkvRkdjRk5PanFaa0JyRDNobXdIZUFJZ2NnVTdJbVRjUXBKVHlaRHZYU2FYClVhS2hQVXJsSnJIdUgrL3d3SWtOc3hFPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        name: longhorn-admission-webhook
        namespace: longhorn-system
        path: /v1/webhook/validation
        port: 9502
    failurePolicy: Fail
    matchPolicy: Exact
    name: validator.longhorn.io
    namespaceSelector: {}
    objectSelector: {}
    rules:
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - nodes
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      - DELETE
      resources:
      - settings
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - recurringjobs
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - DELETE
      resources:
      - backingimages
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      resources:
      - backupbackingimages
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      resources:
      - backups
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      - DELETE
      resources:
      - backuptargets
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - volumes
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - orphans
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - snapshots
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      resources:
      - supportbundles
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      resources:
      - systembackups
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      resources:
      - systemrestores
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - volumeattachments
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - engines
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      - DELETE
      resources:
      - replicas
      scope: Namespaced
    - apiGroups:
      - longhorn.io
      apiVersions:
      - v1beta2
      operations:
      - CREATE
      - UPDATE
      resources:
      - instancemanagers
      scope: Namespaced
    - apiGroups:
      - ""
      apiVersions:
      - v1
      operations:
      - UPDATE
      resources:
      - persistentvolumeclaims
      scope: Namespaced
    sideEffects: None
    timeoutSeconds: 10
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: onstart
    name: v1.
    resourceVersion: "15"
    uid: 9fda85f2-3a54-4baa-a321-b042d2cbb5a2
  spec:
    groupPriorityMinimum: 18000
    version: v1
    versionPriority: 1
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v1.acme.cert-manager.io
    resourceVersion: "1468"
    uid: d282f2d8-a1e0-4fd9-a93c-fa60caaf97cf
  spec:
    group: acme.cert-manager.io
    groupPriorityMinimum: 1000
    version: v1
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:14:27Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: onstart
    name: v1.admissionregistration.k8s.io
    resourceVersion: "14"
    uid: e0876177-c3d3-41b0-8c78-28337ed796f4
  spec:
    group: admissionregistration.k8s.io
    groupPriorityMinimum: 16700
    version: v1
    versionPriority: 15
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: onstart
    name: v1.apiextensions.k8s.io
    resourceVersion: "12"
    uid: 78fe51e8-ee05-4efc-89ba-b00d1bcb4471
  spec:
    group: apiextensions.k8s.io
    groupPriorityMinimum: 16700
    version: v1
    versionPriority: 15
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: onstart
    name: v1.apps
    resourceVersion: "10"
    uid: 5ea56884-eb33-4864-aeed-a41645eacff0
  spec:
    group: apps
    groupPriorityMinimum: 17800
    version: v1
    versionPriority: 15
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: onstart
    name: v1.authentication.k8s.io
    resourceVersion: "13"
    uid: 113eae7d-8add-4c13-9cc3-3419185e805d
  spec:
    group: authentication.k8s.io
    groupPriorityMinimum: 17700
    version: v1
    versionPriority: 15
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: onstart
    name: v1.authorization.k8s.io
    resourceVersion: "17"
    uid: 764f06c1-9748-4148-940b-bf28281b644b
  spec:
    group: authorization.k8s.io
    groupPriorityMinimum: 17600
    version: v1
    versionPriority: 15
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: onstart
    name: v1.autoscaling
    resourceVersion: "20"
    uid: 2fd6cea9-81ef-49e8-9b58-940ba378af6b
  spec:
    group: autoscaling
    groupPriorityMinimum: 17500
    version: v1
    versionPriority: 15
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: onstart
    name: v1.batch
    resourceVersion: "18"
    uid: fe92d037-5e8f-4760-b28d-891dd34c3b9b
  spec:
    group: batch
    groupPriorityMinimum: 17400
    version: v1
    versionPriority: 15
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v1.cert-manager.io
    resourceVersion: "1469"
    uid: c95ada19-352f-4029-a8da-048ad51bf755
  spec:
    group: cert-manager.io
    groupPriorityMinimum: 1000
    version: v1
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:14:27Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: onstart
    name: v1.certificates.k8s.io
    resourceVersion: "21"
    uid: 955698d2-c3b0-4e1b-8e63-ea3a4b6bb5d0
  spec:
    group: certificates.k8s.io
    groupPriorityMinimum: 17300
    version: v1
    versionPriority: 15
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: onstart
    name: v1.coordination.k8s.io
    resourceVersion: "24"
    uid: 9f1278d6-4226-4a81-95b5-71edf987c882
  spec:
    group: coordination.k8s.io
    groupPriorityMinimum: 16500
    version: v1
    versionPriority: 15
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: onstart
    name: v1.discovery.k8s.io
    resourceVersion: "25"
    uid: 492c468d-05b5-4a5c-b0e0-7b712c90dd8e
  spec:
    group: discovery.k8s.io
    groupPriorityMinimum: 16200
    version: v1
    versionPriority: 15
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: onstart
    name: v1.events.k8s.io
    resourceVersion: "26"
    uid: 1ccb1a72-8187-492d-ac5b-78fdf65394eb
  spec:
    group: events.k8s.io
    groupPriorityMinimum: 17750
    version: v1
    versionPriority: 15
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: onstart
    name: v1.flowcontrol.apiserver.k8s.io
    resourceVersion: "27"
    uid: 68f44875-2d4e-4734-9609-0de5c91c8157
  spec:
    group: flowcontrol.apiserver.k8s.io
    groupPriorityMinimum: 16100
    version: v1
    versionPriority: 21
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:14:46Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v1.fluxcd.controlplane.io
    resourceVersion: "1708"
    uid: 8bc74722-8793-46ab-8cbe-c614455a2141
  spec:
    group: fluxcd.controlplane.io
    groupPriorityMinimum: 1000
    version: v1
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:14:46Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:16:07Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v1.jaegertracing.io
    resourceVersion: "3047"
    uid: 6518e878-5fa6-4693-ad20-b2871ec03083
  spec:
    group: jaegertracing.io
    groupPriorityMinimum: 1000
    version: v1
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:16:07Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:15:10Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v1.kustomize.toolkit.fluxcd.io
    resourceVersion: "1893"
    uid: 070de738-c83d-4105-8f02-d29218496a96
  spec:
    group: kustomize.toolkit.fluxcd.io
    groupPriorityMinimum: 1000
    version: v1
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:15:10Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-03T09:13:48Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v1.monitoring.coreos.com
    resourceVersion: "360252"
    uid: aec8ad45-e2a9-4a17-9111-d8d46f936636
  spec:
    group: monitoring.coreos.com
    groupPriorityMinimum: 1000
    version: v1
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-03T09:13:48Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: onstart
    name: v1.networking.k8s.io
    resourceVersion: "29"
    uid: 617af95d-210c-4e7d-9770-e2d9a8ad064d
  spec:
    group: networking.k8s.io
    groupPriorityMinimum: 17200
    version: v1
    versionPriority: 15
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: onstart
    name: v1.node.k8s.io
    resourceVersion: "30"
    uid: 7ec19749-6a1b-402a-acf1-2d70dcf23a79
  spec:
    group: node.k8s.io
    groupPriorityMinimum: 16300
    version: v1
    versionPriority: 15
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:15:10Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v1.notification.toolkit.fluxcd.io
    resourceVersion: "1907"
    uid: e4f3cb29-8add-4649-91cd-2371033dfd21
  spec:
    group: notification.toolkit.fluxcd.io
    groupPriorityMinimum: 1000
    version: v1
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:15:10Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: onstart
    name: v1.policy
    resourceVersion: "31"
    uid: 108c7529-c909-401f-bdb3-8e6e41af2579
  spec:
    group: policy
    groupPriorityMinimum: 17100
    version: v1
    versionPriority: 15
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: onstart
    name: v1.rbac.authorization.k8s.io
    resourceVersion: "33"
    uid: b1cc734c-babc-4145-8d3c-e2e2b22d02bf
  spec:
    group: rbac.authorization.k8s.io
    groupPriorityMinimum: 17000
    version: v1
    versionPriority: 15
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: onstart
    name: v1.scheduling.k8s.io
    resourceVersion: "34"
    uid: bd5c8ace-842a-47fe-9822-f9c23fbc34f3
  spec:
    group: scheduling.k8s.io
    groupPriorityMinimum: 16600
    version: v1
    versionPriority: 15
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:15:09Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v1.source.toolkit.fluxcd.io
    resourceVersion: "1850"
    uid: 475db900-d5b1-4ab3-ac05-03a99bf01009
  spec:
    group: source.toolkit.fluxcd.io
    groupPriorityMinimum: 1000
    version: v1
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:15:09Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: onstart
    name: v1.storage.k8s.io
    resourceVersion: "35"
    uid: 5eb8d285-9631-4d30-b04d-b8a2a37d9116
  spec:
    group: storage.k8s.io
    groupPriorityMinimum: 16800
    version: v1
    versionPriority: 15
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-03T22:49:35Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v1alpha1.argoproj.io
    resourceVersion: "717973"
    uid: c8ab1e59-ecc8-4ce0-9470-5a7414bc2349
  spec:
    group: argoproj.io
    groupPriorityMinimum: 1000
    version: v1alpha1
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-03T22:49:35Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:16:00Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v1alpha1.externaldns.k8s.io
    resourceVersion: "2750"
    uid: eb7ae930-942c-45be-b1c8-175826daf6a9
  spec:
    group: externaldns.k8s.io
    groupPriorityMinimum: 1000
    version: v1alpha1
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:16:00Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-03T09:13:47Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v1alpha1.monitoring.coreos.com
    resourceVersion: "360247"
    uid: 4b9c37d4-c6db-4c28-82a7-2a4f4f6d3464
  spec:
    group: monitoring.coreos.com
    groupPriorityMinimum: 1000
    version: v1alpha1
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-03T09:13:47Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:15:10Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v1beta1.kustomize.toolkit.fluxcd.io
    resourceVersion: "1895"
    uid: cc089531-feca-4d98-922b-01682d10770e
  spec:
    group: kustomize.toolkit.fluxcd.io
    groupPriorityMinimum: 1000
    version: v1beta1
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:15:10Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-03T17:17:41Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v1beta1.longhorn.io
    resourceVersion: "555952"
    uid: 0734bc25-2940-4707-aa7a-36a302088203
  spec:
    group: longhorn.io
    groupPriorityMinimum: 1000
    version: v1beta1
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-03T17:17:41Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    annotations:
      meta.helm.sh/release-name: metrics-server
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-02-02T18:16:04Z"
    labels:
      app.kubernetes.io/instance: metrics-server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: metrics-server
      app.kubernetes.io/version: 0.7.2
      helm.sh/chart: metrics-server-3.12.2
      helm.toolkit.fluxcd.io/name: metrics-server
      helm.toolkit.fluxcd.io/namespace: kube-system
    name: v1beta1.metrics.k8s.io
    resourceVersion: "614533"
    uid: c88d57a4-5a7b-4e16-8241-c95dcba3f0ec
  spec:
    group: metrics.k8s.io
    groupPriorityMinimum: 100
    insecureSkipTLSVerify: true
    service:
      name: metrics-server
      namespace: kube-system
      port: 443
    version: v1beta1
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-03T19:12:41Z"
      message: all checks passed
      reason: Passed
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:15:09Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v1beta1.notification.toolkit.fluxcd.io
    resourceVersion: "1835"
    uid: a1e675df-709c-44b8-b5e2-b441b67e7217
  spec:
    group: notification.toolkit.fluxcd.io
    groupPriorityMinimum: 1000
    version: v1beta1
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:15:09Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:15:09Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v1beta1.source.toolkit.fluxcd.io
    resourceVersion: "1849"
    uid: 73ff0580-5674-41b4-af22-2b58546dadfc
  spec:
    group: source.toolkit.fluxcd.io
    groupPriorityMinimum: 1000
    version: v1beta1
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:15:09Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:15:10Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v1beta2.kustomize.toolkit.fluxcd.io
    resourceVersion: "1896"
    uid: fd81bf9c-2170-4680-b010-821bc6b77564
  spec:
    group: kustomize.toolkit.fluxcd.io
    groupPriorityMinimum: 1000
    version: v1beta2
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:15:10Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-03T17:17:41Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v1beta2.longhorn.io
    resourceVersion: "555951"
    uid: 124f1a10-e9cc-47a3-a989-e5342e611d47
  spec:
    group: longhorn.io
    groupPriorityMinimum: 1000
    version: v1beta2
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-03T17:17:41Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:15:09Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v1beta2.notification.toolkit.fluxcd.io
    resourceVersion: "1838"
    uid: 267967b4-d4a4-4668-9d15-26d52e71d7ac
  spec:
    group: notification.toolkit.fluxcd.io
    groupPriorityMinimum: 1000
    version: v1beta2
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:15:09Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:15:09Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v1beta2.source.toolkit.fluxcd.io
    resourceVersion: "1848"
    uid: 470ffd54-b1e1-44b3-84b4-2ee9278dd573
  spec:
    group: source.toolkit.fluxcd.io
    groupPriorityMinimum: 1000
    version: v1beta2
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:15:09Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:15:09Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v1beta3.notification.toolkit.fluxcd.io
    resourceVersion: "1834"
    uid: daba0548-79d2-4e0a-a3b5-230df9ab5491
  spec:
    group: notification.toolkit.fluxcd.io
    groupPriorityMinimum: 1000
    version: v1beta3
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:15:09Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:09:57Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: onstart
    name: v2.autoscaling
    resourceVersion: "22"
    uid: 617ebf7c-4a16-45f6-9dd9-55270fb1a64a
  spec:
    group: autoscaling
    groupPriorityMinimum: 17500
    version: v2
    versionPriority: 30
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:13:11Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v2.cilium.io
    resourceVersion: "888"
    uid: 6bb6340f-e25e-4504-86c5-289f1e6f4d86
  spec:
    group: cilium.io
    groupPriorityMinimum: 1000
    version: v2
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:13:11Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:15:10Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v2.helm.toolkit.fluxcd.io
    resourceVersion: "1880"
    uid: 0fa786fb-63e2-4719-b8af-e8e2df4c5dae
  spec:
    group: helm.toolkit.fluxcd.io
    groupPriorityMinimum: 1000
    version: v2
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:15:10Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:13:11Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v2alpha1.cilium.io
    resourceVersion: "890"
    uid: 5a19c465-71c8-4ee6-9e87-ecbf201e96ad
  spec:
    group: cilium.io
    groupPriorityMinimum: 1000
    version: v2alpha1
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:13:11Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:15:10Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v2beta1.helm.toolkit.fluxcd.io
    resourceVersion: "1881"
    uid: 11ef9858-4423-4f57-bc03-c539b60cb211
  spec:
    group: helm.toolkit.fluxcd.io
    groupPriorityMinimum: 1000
    version: v2beta1
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:15:10Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apiregistration.k8s.io/v1
  kind: APIService
  metadata:
    creationTimestamp: "2025-02-02T18:15:10Z"
    labels:
      kube-aggregator.kubernetes.io/automanaged: "true"
    name: v2beta2.helm.toolkit.fluxcd.io
    resourceVersion: "1876"
    uid: e7d70d98-566d-44ab-98a7-fa4b31a0f3d8
  spec:
    group: helm.toolkit.fluxcd.io
    groupPriorityMinimum: 1000
    version: v2beta2
    versionPriority: 100
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:15:10Z"
      message: Local APIServices are always available
      reason: Local
      status: "True"
      type: Available
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: cloudflared
      meta.helm.sh/release-namespace: network
      reloader.stakater.com/auto: "true"
    creationTimestamp: "2025-02-02T18:16:59Z"
    generation: 3
    labels:
      app.kubernetes.io/component: cloudflared
      app.kubernetes.io/instance: cloudflared
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cloudflared
      helm.sh/chart: app-template-3.6.1
      helm.toolkit.fluxcd.io/name: cloudflared
      helm.toolkit.fluxcd.io/namespace: network
    name: cloudflared
    namespace: network
    resourceVersion: "8884138"
    uid: 270ed339-0d32-4d18-bed9-d20f1f79f80f
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 3
    selector:
      matchLabels:
        app.kubernetes.io/component: cloudflared
        app.kubernetes.io/instance: cloudflared
        app.kubernetes.io/name: cloudflared
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2025-02-13T17:37:07Z"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: cloudflared
          app.kubernetes.io/instance: cloudflared
          app.kubernetes.io/name: cloudflared
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - tunnel
          - --config
          - /etc/cloudflared/config/config.yaml
          - run
          - $(TUNNEL_ID)
          env:
          - name: NO_AUTOUPDATE
            value: "true"
          - name: TUNNEL_CRED_FILE
            value: /etc/cloudflared/creds/credentials.json
          - name: TUNNEL_ID
            valueFrom:
              secretKeyRef:
                key: TUNNEL_ID
                name: cloudflared-secret
          - name: TUNNEL_METRICS
            value: 0.0.0.0:8080
          - name: TUNNEL_ORIGIN_ENABLE_HTTP2
            value: "true"
          - name: TUNNEL_POST_QUANTUM
            value: "true"
          - name: TUNNEL_TRANSPORT_PROTOCOL
            value: quic
          - name: STAKATER_CLOUDFLARED_CONFIGMAP_CONFIGMAP
            value: 639eae6e4f762cc424a7dd53fa4785520056ba0e
          image: docker.io/cloudflare/cloudflared:2025.1.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: app
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 10m
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/cloudflared/config/config.yaml
            name: config
            readOnly: true
            subPath: config.yaml
          - mountPath: /etc/cloudflared/creds/credentials.json
            name: creds
            readOnly: true
            subPath: credentials.json
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: default
        serviceAccountName: default
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: cloudflared-configmap
          name: config
        - name: creds
          secret:
            defaultMode: 420
            secretName: cloudflared-secret
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-02-03T19:18:25Z"
      lastUpdateTime: "2025-02-03T19:18:25Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-02-02T18:16:59Z"
      lastUpdateTime: "2025-02-13T17:37:12Z"
      message: ReplicaSet "cloudflared-744d6dc766" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "11"
      meta.helm.sh/release-name: external-dns
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:16:01Z"
    generation: 11
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: external-dns
      app.kubernetes.io/version: 0.15.1
      helm.sh/chart: external-dns-1.15.1
      helm.toolkit.fluxcd.io/name: external-dns
      helm.toolkit.fluxcd.io/namespace: network
      k8slens-edit-resource-version: v1
    name: external-dns
    namespace: network
    resourceVersion: "7101882"
    uid: c33e59b9-ba11-45ea-8ab6-a813e9454eb3
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: external-dns
        app.kubernetes.io/name: external-dns
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2025-02-04T18:52:54Z"
          secret.reloader.stakater.com/reload: external-dns-secret
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: external-dns
          app.kubernetes.io/name: external-dns
      spec:
        containers:
        - args:
          - --log-level=info
          - --log-format=text
          - --interval=1m
          - --source=crd
          - --source=ingress
          - --policy=sync
          - --registry=txt
          - --txt-owner-id=default
          - --txt-prefix=k8s.
          - --domain-filter=afamiljen.se
          - --provider=cloudflare
          - --cloudflare-dns-records-per-page=1000
          - --cloudflare-proxied
          - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
          - --crd-source-kind=DNSEndpoint
          - --events
          - --ignore-ingress-tls-spec
          - --ingress-class=external
          env:
          - name: CF_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: api-token
                name: external-dns-secret
          image: registry.k8s.io/external-dns/external-dns:v0.15.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: external-dns
          ports:
          - containerPort: 7979
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: external-dns
        serviceAccountName: external-dns
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2025-02-04T19:39:12Z"
      lastUpdateTime: "2025-02-04T19:43:21Z"
      message: ReplicaSet "external-dns-757c77ff69" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-02-11T19:07:19Z"
      lastUpdateTime: "2025-02-11T19:07:19Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 11
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: external-ingress-nginx
      meta.helm.sh/release-namespace: network
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    creationTimestamp: "2025-02-02T18:51:37Z"
    generation: 5
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: external-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
      k8slens-edit-resource-version: v1
    name: external-ingress-nginx-controller
    namespace: network
    resourceVersion: "8998927"
    uid: c1496121-f709-46eb-8b6d-768557d51b8f
  spec:
    progressDeadlineSeconds: 600
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: external-ingress-nginx
        app.kubernetes.io/name: ingress-nginx
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: external-ingress-nginx
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.12.0
          helm.sh/chart: ingress-nginx-4.12.0
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/external-ingress-nginx-controller
          - --election-id=external-ingress-nginx-leader
          - --controller-class=k8s.io/external
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/external-ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=true
          - --default-ssl-certificate=cert-manager/afamiljen-se-production-tls
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.12.0@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 2000Mi
            requests:
              cpu: "1"
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 82
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: external-ingress-nginx
        serviceAccountName: external-ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: external-ingress-nginx-admission
  status:
    availableReplicas: 3
    conditions:
    - lastTransitionTime: "2025-02-02T18:51:37Z"
      lastUpdateTime: "2025-02-03T20:16:09Z"
      message: ReplicaSet "external-ingress-nginx-controller-66d7c6f9f8" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-02-13T20:36:05Z"
      lastUpdateTime: "2025-02-13T20:36:05Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 5
    readyReplicas: 3
    replicas: 3
    updatedReplicas: 3
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: internal-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T19:07:36Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: internal-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
      k8slens-edit-resource-version: v1
    name: internal-ingress-nginx-controller
    namespace: network
    resourceVersion: "643249"
    uid: e32cfe86-f3d0-471d-9ba6-a22b1899caed
  spec:
    progressDeadlineSeconds: 600
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: internal-ingress-nginx
        app.kubernetes.io/name: ingress-nginx
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: internal-ingress-nginx
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.12.0
          helm.sh/chart: ingress-nginx-4.12.0
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/internal-ingress-nginx-controller
          - --election-id=internal-ingress-nginx-leader
          - --controller-class=k8s.io/internal
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/internal-ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=true
          - --default-ssl-certificate=cert-manager/afamiljen-se-production-tls
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.12.0@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 2000Mi
            requests:
              cpu: "1"
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 82
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: internal-ingress-nginx
        serviceAccountName: internal-ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: internal-ingress-nginx-admission
  status:
    availableReplicas: 3
    conditions:
    - lastTransitionTime: "2025-02-03T20:14:55Z"
      lastUpdateTime: "2025-02-03T20:14:55Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-02-02T19:07:36Z"
      lastUpdateTime: "2025-02-03T20:14:59Z"
      message: ReplicaSet "internal-ingress-nginx-controller-5d6c6b87d" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 4
    readyReplicas: 3
    replicas: 3
    updatedReplicas: 3
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: k8s-gateway
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:16:04Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: k8s-gateway
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: k8s-gateway
      app.kubernetes.io/version: 0.4.0
      helm.sh/chart: k8s-gateway-2.4.0
      helm.toolkit.fluxcd.io/name: k8s-gateway
      helm.toolkit.fluxcd.io/namespace: network
    name: k8s-gateway
    namespace: network
    resourceVersion: "614830"
    uid: 11a1a617-aa0c-4157-9826-f41fb8b38931
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: k8s-gateway
        app.kubernetes.io/name: k8s-gateway
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          checksum/config: bd2c04393b25e0b7d2235d9271917541bc0d1b500f9d225d0241fb56080d4696
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: k8s-gateway
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: k8s-gateway
          app.kubernetes.io/version: 0.4.0
          helm.sh/chart: k8s-gateway-2.4.0
      spec:
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: quay.io/oriedge/k8s_gateway:v0.4.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: k8s-gateway
          ports:
          - containerPort: 1053
            name: dns-udp
            protocol: UDP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: k8s-gateway
        serviceAccountName: k8s-gateway
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: k8s-gateway
          name: config-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-02-02T18:16:04Z"
      lastUpdateTime: "2025-02-02T18:16:19Z"
      message: ReplicaSet "k8s-gateway-5867877686" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-02-03T19:13:01Z"
      lastUpdateTime: "2025-02-03T19:13:01Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: cloudflared
      meta.helm.sh/release-namespace: network
      reloader.stakater.com/auto: "true"
    creationTimestamp: "2025-02-02T18:16:59Z"
    generation: 2
    labels:
      app.kubernetes.io/component: cloudflared
      app.kubernetes.io/instance: cloudflared
      app.kubernetes.io/name: cloudflared
      pod-template-hash: 56dfb8fdb7
    name: cloudflared-56dfb8fdb7
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cloudflared
      uid: 270ed339-0d32-4d18-bed9-d20f1f79f80f
    resourceVersion: "78144"
    uid: 80356879-9800-4e8f-8290-a5daeb781aa1
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: cloudflared
        app.kubernetes.io/instance: cloudflared
        app.kubernetes.io/name: cloudflared
        pod-template-hash: 56dfb8fdb7
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: cloudflared
          app.kubernetes.io/instance: cloudflared
          app.kubernetes.io/name: cloudflared
          pod-template-hash: 56dfb8fdb7
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - tunnel
          - --config
          - /etc/cloudflared/config/config.yaml
          - run
          - $(TUNNEL_ID)
          env:
          - name: NO_AUTOUPDATE
            value: "true"
          - name: TUNNEL_CRED_FILE
            value: /etc/cloudflared/creds/credentials.json
          - name: TUNNEL_ID
            valueFrom:
              secretKeyRef:
                key: TUNNEL_ID
                name: cloudflared-secret
          - name: TUNNEL_METRICS
            value: 0.0.0.0:8080
          - name: TUNNEL_ORIGIN_ENABLE_HTTP2
            value: "true"
          - name: TUNNEL_POST_QUANTUM
            value: "true"
          - name: TUNNEL_TRANSPORT_PROTOCOL
            value: quic
          image: docker.io/cloudflare/cloudflared:2025.1.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: app
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 10m
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/cloudflared/config/config.yaml
            name: config
            readOnly: true
            subPath: config.yaml
          - mountPath: /etc/cloudflared/creds/credentials.json
            name: creds
            readOnly: true
            subPath: credentials.json
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: default
        serviceAccountName: default
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: cloudflared-configmap
          name: config
        - name: creds
          secret:
            defaultMode: 420
            secretName: cloudflared-secret
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: cloudflared
      meta.helm.sh/release-namespace: network
      reloader.stakater.com/auto: "true"
    creationTimestamp: "2025-02-13T17:37:07Z"
    generation: 1
    labels:
      app.kubernetes.io/component: cloudflared
      app.kubernetes.io/instance: cloudflared
      app.kubernetes.io/name: cloudflared
      pod-template-hash: 744d6dc766
    name: cloudflared-744d6dc766
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cloudflared
      uid: 270ed339-0d32-4d18-bed9-d20f1f79f80f
    resourceVersion: "8884127"
    uid: ec85ba84-eabc-4ba0-ab57-1b5237cb2d06
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: cloudflared
        app.kubernetes.io/instance: cloudflared
        app.kubernetes.io/name: cloudflared
        pod-template-hash: 744d6dc766
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2025-02-13T17:37:07Z"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: cloudflared
          app.kubernetes.io/instance: cloudflared
          app.kubernetes.io/name: cloudflared
          pod-template-hash: 744d6dc766
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - tunnel
          - --config
          - /etc/cloudflared/config/config.yaml
          - run
          - $(TUNNEL_ID)
          env:
          - name: NO_AUTOUPDATE
            value: "true"
          - name: TUNNEL_CRED_FILE
            value: /etc/cloudflared/creds/credentials.json
          - name: TUNNEL_ID
            valueFrom:
              secretKeyRef:
                key: TUNNEL_ID
                name: cloudflared-secret
          - name: TUNNEL_METRICS
            value: 0.0.0.0:8080
          - name: TUNNEL_ORIGIN_ENABLE_HTTP2
            value: "true"
          - name: TUNNEL_POST_QUANTUM
            value: "true"
          - name: TUNNEL_TRANSPORT_PROTOCOL
            value: quic
          - name: STAKATER_CLOUDFLARED_CONFIGMAP_CONFIGMAP
            value: 639eae6e4f762cc424a7dd53fa4785520056ba0e
          image: docker.io/cloudflare/cloudflared:2025.1.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: app
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 10m
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/cloudflared/config/config.yaml
            name: config
            readOnly: true
            subPath: config.yaml
          - mountPath: /etc/cloudflared/creds/credentials.json
            name: creds
            readOnly: true
            subPath: credentials.json
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: default
        serviceAccountName: default
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: cloudflared-configmap
          name: config
        - name: creds
          secret:
            defaultMode: 420
            secretName: cloudflared-secret
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: cloudflared
      meta.helm.sh/release-namespace: network
      reloader.stakater.com/auto: "true"
    creationTimestamp: "2025-02-02T21:30:13Z"
    generation: 2
    labels:
      app.kubernetes.io/component: cloudflared
      app.kubernetes.io/instance: cloudflared
      app.kubernetes.io/name: cloudflared
      pod-template-hash: 9457749c
    name: cloudflared-9457749c
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cloudflared
      uid: 270ed339-0d32-4d18-bed9-d20f1f79f80f
    resourceVersion: "8884137"
    uid: 9e3f87e2-3335-46bc-b776-404c2c401a74
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: cloudflared
        app.kubernetes.io/instance: cloudflared
        app.kubernetes.io/name: cloudflared
        pod-template-hash: 9457749c
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: cloudflared
          app.kubernetes.io/instance: cloudflared
          app.kubernetes.io/name: cloudflared
          pod-template-hash: 9457749c
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - tunnel
          - --config
          - /etc/cloudflared/config/config.yaml
          - run
          - $(TUNNEL_ID)
          env:
          - name: NO_AUTOUPDATE
            value: "true"
          - name: TUNNEL_CRED_FILE
            value: /etc/cloudflared/creds/credentials.json
          - name: TUNNEL_ID
            valueFrom:
              secretKeyRef:
                key: TUNNEL_ID
                name: cloudflared-secret
          - name: TUNNEL_METRICS
            value: 0.0.0.0:8080
          - name: TUNNEL_ORIGIN_ENABLE_HTTP2
            value: "true"
          - name: TUNNEL_POST_QUANTUM
            value: "true"
          - name: TUNNEL_TRANSPORT_PROTOCOL
            value: quic
          - name: STAKATER_CLOUDFLARED_CONFIGMAP_CONFIGMAP
            value: 639eae6e4f762cc424a7dd53fa4785520056ba0e
          image: docker.io/cloudflare/cloudflared:2025.1.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: app
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 10m
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/cloudflared/config/config.yaml
            name: config
            readOnly: true
            subPath: config.yaml
          - mountPath: /etc/cloudflared/creds/credentials.json
            name: creds
            readOnly: true
            subPath: credentials.json
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: default
        serviceAccountName: default
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: cloudflared-configmap
          name: config
        - name: creds
          secret:
            defaultMode: 420
            secretName: cloudflared-secret
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "6"
      meta.helm.sh/release-name: external-dns
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-04T18:31:42Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      pod-template-hash: 54bd48b799
    name: external-dns-54bd48b799
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-dns
      uid: c33e59b9-ba11-45ea-8ab6-a813e9454eb3
    resourceVersion: "1303685"
    uid: e7067ead-c911-4a8d-89d5-d42c11d3b404
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/instance: external-dns
        app.kubernetes.io/name: external-dns
        pod-template-hash: 54bd48b799
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2025-02-04T18:09:01Z"
          secret.reloader.stakater.com/reload: external-dns-secret
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: external-dns
          app.kubernetes.io/name: external-dns
          pod-template-hash: 54bd48b799
      spec:
        containers:
        - args:
          - --log-level=info
          - --log-format=text
          - --interval=1m
          - --source=crd
          - --source=ingress
          - --policy=sync
          - --registry=txt
          - --txt-owner-id=default
          - --txt-prefix=k8s.
          - --domain-filter=afamiljen.se
          - --provider=cloudflare
          - --cloudflare-dns-records-per-page=1000
          - --cloudflare-proxied
          - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
          - --crd-source-kind=DNSEndpoint
          - --events
          - --ignore-ingress-tls-spec
          - --ingress-class=external
          env:
          - name: CF_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: api-token
                name: external-dns-secret
          image: registry.k8s.io/external-dns/external-dns:v0.15.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: external-dns
          ports:
          - containerPort: 7979
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: external-dns
        serviceAccountName: external-dns
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: external-dns
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-04T17:56:11Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      pod-template-hash: 55fd69496f
    name: external-dns-55fd69496f
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-dns
      uid: c33e59b9-ba11-45ea-8ab6-a813e9454eb3
    resourceVersion: "1287031"
    uid: 400ec707-fd37-4bfd-99f6-3609fa699896
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/instance: external-dns
        app.kubernetes.io/name: external-dns
        pod-template-hash: 55fd69496f
    template:
      metadata:
        annotations:
          secret.reloader.stakater.com/reload: external-dns-secret
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: external-dns
          app.kubernetes.io/name: external-dns
          pod-template-hash: 55fd69496f
      spec:
        containers:
        - args:
          - --log-level=info
          - --log-format=text
          - --interval=1m
          - --source=crd
          - --source=ingress
          - --policy=sync
          - --registry=txt
          - --txt-owner-id=default
          - --txt-prefix=k8s.
          - --domain-filter=afamiljen.se
          - --provider=cloudflare
          - --cloudflare-dns-records-per-page=1000
          - --cloudflare-proxied=false
          - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
          - --crd-source-kind=DNSEndpoint
          - --events
          - --ignore-ingress-tls-spec
          - --ingress-class=external
          - --registry=noop
          env:
          - name: CF_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: api-token
                name: external-dns-secret
          image: registry.k8s.io/external-dns/external-dns:v0.15.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: external-dns
          ports:
          - containerPort: 7979
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: external-dns
        serviceAccountName: external-dns
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: external-dns
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-04T17:47:25Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      pod-template-hash: 56ff8b5c75
    name: external-dns-56ff8b5c75
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-dns
      uid: c33e59b9-ba11-45ea-8ab6-a813e9454eb3
    resourceVersion: "1280161"
    uid: 3ec99460-3ec6-4cad-ab61-e041073ea090
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/instance: external-dns
        app.kubernetes.io/name: external-dns
        pod-template-hash: 56ff8b5c75
    template:
      metadata:
        annotations:
          secret.reloader.stakater.com/reload: external-dns-secret
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: external-dns
          app.kubernetes.io/name: external-dns
          pod-template-hash: 56ff8b5c75
      spec:
        containers:
        - args:
          - --log-level=info
          - --log-format=text
          - --interval=1m
          - --source=crd
          - --source=ingress
          - --policy=sync
          - --registry=txt
          - --txt-owner-id=default
          - --txt-prefix=k8s.
          - --domain-filter=afamiljen.se
          - --provider=cloudflare
          - --cloudflare-dns-records-per-page=1000
          - --cloudflare-proxied
          - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
          - --crd-source-kind=DNSEndpoint
          - --events
          - --ignore-ingress-tls-spec
          - --ingress-class=external
          env:
          - name: CF_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: api-token
                name: external-dns-secret
          image: registry.k8s.io/external-dns/external-dns:v0.15.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: external-dns
          ports:
          - containerPort: 7979
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: external-dns
        serviceAccountName: external-dns
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: external-dns
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:16:02Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      pod-template-hash: 5877596d45
    name: external-dns-5877596d45
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-dns
      uid: c33e59b9-ba11-45ea-8ab6-a813e9454eb3
    resourceVersion: "1275936"
    uid: 916906f5-50aa-485f-837b-b56b3be7de64
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/instance: external-dns
        app.kubernetes.io/name: external-dns
        pod-template-hash: 5877596d45
    template:
      metadata:
        annotations:
          secret.reloader.stakater.com/reload: external-dns-secret
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: external-dns
          app.kubernetes.io/name: external-dns
          pod-template-hash: 5877596d45
      spec:
        containers:
        - args:
          - --log-level=info
          - --log-format=text
          - --interval=1m
          - --source=crd
          - --source=ingress
          - --policy=sync
          - --registry=txt
          - --txt-owner-id=default
          - --txt-prefix=k8s.
          - --domain-filter=afamiljen.se
          - --provider=cloudflare
          - --cloudflare-dns-records-per-page=1000
          - --cloudflare-proxied
          - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
          - --crd-source-kind=DNSEndpoint
          - --events
          - --ignore-ingress-tls-spec
          - --ingress-class=external
          env:
          - name: CF_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: api-token
                name: external-dns-secret
          image: registry.k8s.io/external-dns/external-dns:v0.15.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: external-dns
          ports:
          - containerPort: 7979
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: external-dns
        serviceAccountName: external-dns
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "7"
      meta.helm.sh/release-name: external-dns
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-04T18:41:12Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      pod-template-hash: 5b5494b554
    name: external-dns-5b5494b554
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-dns
      uid: c33e59b9-ba11-45ea-8ab6-a813e9454eb3
    resourceVersion: "1310247"
    uid: d6c2e9be-558a-461e-ba51-8532c0f7417a
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/instance: external-dns
        app.kubernetes.io/name: external-dns
        pod-template-hash: 5b5494b554
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2025-02-04T18:41:11Z"
          secret.reloader.stakater.com/reload: external-dns-secret
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: external-dns
          app.kubernetes.io/name: external-dns
          pod-template-hash: 5b5494b554
      spec:
        containers:
        - args:
          - --log-level=info
          - --log-format=text
          - --interval=1m
          - --source=crd
          - --source=ingress
          - --policy=sync
          - --registry=txt
          - --txt-owner-id=default
          - --txt-prefix=k8s.
          - --domain-filter=afamiljen.se
          - --provider=cloudflare
          - --cloudflare-dns-records-per-page=1000
          - --cloudflare-proxied
          - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
          - --crd-source-kind=DNSEndpoint
          - --events
          - --ignore-ingress-tls-spec
          - --ingress-class=external
          env:
          - name: CF_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: api-token
                name: external-dns-secret
          image: registry.k8s.io/external-dns/external-dns:v0.15.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: external-dns
          ports:
          - containerPort: 7979
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: external-dns
        serviceAccountName: external-dns
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "4"
      meta.helm.sh/release-name: external-dns
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-04T18:09:01Z"
    generation: 3
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      pod-template-hash: 68fb9c4745
    name: external-dns-68fb9c4745
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-dns
      uid: c33e59b9-ba11-45ea-8ab6-a813e9454eb3
    resourceVersion: "1288833"
    uid: 9b3a3e5b-04f7-4755-a4f3-6708315aa35f
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/instance: external-dns
        app.kubernetes.io/name: external-dns
        pod-template-hash: 68fb9c4745
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2025-02-04T18:09:01Z"
          secret.reloader.stakater.com/reload: external-dns-secret
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: external-dns
          app.kubernetes.io/name: external-dns
          pod-template-hash: 68fb9c4745
      spec:
        containers:
        - args:
          - --log-level=info
          - --log-format=text
          - --interval=1m
          - --source=crd
          - --source=ingress
          - --policy=sync
          - --registry=txt
          - --txt-owner-id=default
          - --txt-prefix=k8s.
          - --domain-filter=afamiljen.se
          - --provider=cloudflare
          - --cloudflare-dns-records-per-page=1000
          - --cloudflare-proxied=false
          - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
          - --crd-source-kind=DNSEndpoint
          - --events
          - --ignore-ingress-tls-spec
          - --ingress-class=external
          - --registry=noop
          env:
          - name: CF_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: api-token
                name: external-dns-secret
          image: registry.k8s.io/external-dns/external-dns:v0.15.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: external-dns
          ports:
          - containerPort: 7979
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: external-dns
        serviceAccountName: external-dns
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 3
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "11"
      deployment.kubernetes.io/revision-history: "8"
      meta.helm.sh/release-name: external-dns
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-04T18:52:55Z"
    generation: 3
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      pod-template-hash: 757c77ff69
    name: external-dns-757c77ff69
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-dns
      uid: c33e59b9-ba11-45ea-8ab6-a813e9454eb3
    resourceVersion: "7101881"
    uid: a9f2091a-8548-46b9-be21-56d51f6ea412
  spec:
    replicas: 2
    selector:
      matchLabels:
        app.kubernetes.io/instance: external-dns
        app.kubernetes.io/name: external-dns
        pod-template-hash: 757c77ff69
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2025-02-04T18:52:54Z"
          secret.reloader.stakater.com/reload: external-dns-secret
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: external-dns
          app.kubernetes.io/name: external-dns
          pod-template-hash: 757c77ff69
      spec:
        containers:
        - args:
          - --log-level=info
          - --log-format=text
          - --interval=1m
          - --source=crd
          - --source=ingress
          - --policy=sync
          - --registry=txt
          - --txt-owner-id=default
          - --txt-prefix=k8s.
          - --domain-filter=afamiljen.se
          - --provider=cloudflare
          - --cloudflare-dns-records-per-page=1000
          - --cloudflare-proxied
          - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
          - --crd-source-kind=DNSEndpoint
          - --events
          - --ignore-ingress-tls-spec
          - --ingress-class=external
          env:
          - name: CF_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: api-token
                name: external-dns-secret
          image: registry.k8s.io/external-dns/external-dns:v0.15.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: external-dns
          ports:
          - containerPort: 7979
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: external-dns
        serviceAccountName: external-dns
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 3
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "10"
      meta.helm.sh/release-name: external-dns
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-04T19:39:13Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      pod-template-hash: 76f455848
    name: external-dns-76f455848
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-dns
      uid: c33e59b9-ba11-45ea-8ab6-a813e9454eb3
    resourceVersion: "1335057"
    uid: a26a546d-6593-4bab-8b51-642adfa74f56
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/instance: external-dns
        app.kubernetes.io/name: external-dns
        pod-template-hash: 76f455848
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2025-02-04T18:52:54Z"
          secret.reloader.stakater.com/reload: external-dns-secret
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: external-dns
          app.kubernetes.io/name: external-dns
          pod-template-hash: 76f455848
      spec:
        containers:
        - args:
          - --log-level=info
          - --log-format=text
          - --interval=1m
          - --source=crd
          - --source=ingress
          - --policy=sync
          - --registry=txt
          - --txt-owner-id=default
          - --txt-prefix=k8s.
          - --domain-filter=afamiljen.se
          - --provider=cloudflare
          - --cloudflare-dns-records-per-page=1000
          - --cloudflare-proxied=true
          - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
          - --crd-source-kind=DNSEndpoint
          - --events
          - --ignore-ingress-tls-spec
          - --ingress-class=external
          env:
          - name: CF_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: api-token
                name: external-dns-secret
          image: registry.k8s.io/external-dns/external-dns:v0.15.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: external-dns
          ports:
          - containerPort: 7979
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: external-dns
        serviceAccountName: external-dns
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "9"
      meta.helm.sh/release-name: external-dns
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-04T19:28:08Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      pod-template-hash: 79d94ffd99
    name: external-dns-79d94ffd99
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-dns
      uid: c33e59b9-ba11-45ea-8ab6-a813e9454eb3
    resourceVersion: "1333045"
    uid: 69d46b0d-9eeb-4b15-859c-4c7148edda77
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/instance: external-dns
        app.kubernetes.io/name: external-dns
        pod-template-hash: 79d94ffd99
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2025-02-04T18:52:54Z"
          secret.reloader.stakater.com/reload: external-dns-secret
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: external-dns
          app.kubernetes.io/name: external-dns
          pod-template-hash: 79d94ffd99
      spec:
        containers:
        - args:
          - --log-level=info
          - --log-format=text
          - --interval=1m
          - --source=crd
          - --source=ingress
          - --policy=sync
          - --registry=txt
          - --txt-owner-id=default
          - --txt-prefix=k8s.
          - --domain-filter=afamiljen.se
          - --provider=cloudflare
          - --cloudflare-dns-records-per-page=1000
          - --cloudflare-proxied=false
          - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
          - --crd-source-kind=DNSEndpoint
          - --events
          - --ignore-ingress-tls-spec
          - --ingress-class=external
          env:
          - name: CF_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: api-token
                name: external-dns-secret
          image: registry.k8s.io/external-dns/external-dns:v0.15.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: external-dns
          ports:
          - containerPort: 7979
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: external-dns
        serviceAccountName: external-dns
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "5"
      meta.helm.sh/release-name: external-dns
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-04T18:12:40Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      pod-template-hash: 868bfd785
    name: external-dns-868bfd785
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-dns
      uid: c33e59b9-ba11-45ea-8ab6-a813e9454eb3
    resourceVersion: "1298750"
    uid: 3e2c698b-9bd2-47b0-ba0a-ed9c5233f6f1
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/instance: external-dns
        app.kubernetes.io/name: external-dns
        pod-template-hash: 868bfd785
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2025-02-04T18:09:01Z"
          secret.reloader.stakater.com/reload: external-dns-secret
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: external-dns
          app.kubernetes.io/name: external-dns
          pod-template-hash: 868bfd785
      spec:
        containers:
        - args:
          - --log-level=info
          - --log-format=text
          - --interval=1m
          - --source=crd
          - --source=ingress
          - --policy=sync
          - --registry=txt
          - --txt-owner-id=default
          - --txt-prefix=k8s.
          - --domain-filter=afamiljen.se
          - --provider=cloudflare
          - --cloudflare-dns-records-per-page=1000
          - --cloudflare-proxied=false
          - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
          - --crd-source-kind=DNSEndpoint
          - --events
          - --ignore-ingress-tls-spec
          - --ingress-class=external
          - --registry=noop
          env:
          - name: CF_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: api-token
                name: external-dns-secret
          image: registry.k8s.io/external-dns/external-dns:v0.15.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: external-dns
          ports:
          - containerPort: 7979
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: external-dns
        serviceAccountName: external-dns
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: external-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:51:37Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 65ff79b76d
    name: external-ingress-nginx-controller-65ff79b76d
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-ingress-nginx-controller
      uid: c1496121-f709-46eb-8b6d-768557d51b8f
    resourceVersion: "92608"
    uid: d0d0ee0d-1124-45e2-80dd-b24040032276
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: external-ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 65ff79b76d
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: external-ingress-nginx
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.12.0
          helm.sh/chart: ingress-nginx-4.12.0
          pod-template-hash: 65ff79b76d
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/external-ingress-nginx-controller
          - --election-id=external-ingress-nginx-leader
          - --controller-class=k8s.io/external
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/external-ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=true
          - --default-ssl-certificate=cert-manager/afamiljen-se-staging-tls
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.12.0@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 82
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: external-ingress-nginx
        serviceAccountName: external-ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: external-ingress-nginx-admission
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "3"
      deployment.kubernetes.io/max-replicas: "4"
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: external-ingress-nginx
      meta.helm.sh/release-namespace: network
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    creationTimestamp: "2025-02-03T20:15:31Z"
    generation: 3
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 66d7c6f9f8
    name: external-ingress-nginx-controller-66d7c6f9f8
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-ingress-nginx-controller
      uid: c1496121-f709-46eb-8b6d-768557d51b8f
    resourceVersion: "8998926"
    uid: b65dd9c6-29b3-441d-a7d7-701465c030cd
  spec:
    replicas: 3
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: external-ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 66d7c6f9f8
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: external-ingress-nginx
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.12.0
          helm.sh/chart: ingress-nginx-4.12.0
          pod-template-hash: 66d7c6f9f8
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/external-ingress-nginx-controller
          - --election-id=external-ingress-nginx-leader
          - --controller-class=k8s.io/external
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/external-ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=true
          - --default-ssl-certificate=cert-manager/afamiljen-se-production-tls
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.12.0@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 2000Mi
            requests:
              cpu: "1"
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 82
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: external-ingress-nginx
        serviceAccountName: external-ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: external-ingress-nginx-admission
  status:
    availableReplicas: 3
    fullyLabeledReplicas: 3
    observedGeneration: 3
    readyReplicas: 3
    replicas: 3
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "3"
      deployment.kubernetes.io/max-replicas: "4"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: external-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T22:05:50Z"
    generation: 5
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 78c9c4b6cb
    name: external-ingress-nginx-controller-78c9c4b6cb
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-ingress-nginx-controller
      uid: c1496121-f709-46eb-8b6d-768557d51b8f
    resourceVersion: "643940"
    uid: 8ac1fe7a-6f1c-4fdc-8944-2069e551330d
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: external-ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 78c9c4b6cb
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: external-ingress-nginx
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.12.0
          helm.sh/chart: ingress-nginx-4.12.0
          pod-template-hash: 78c9c4b6cb
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/external-ingress-nginx-controller
          - --election-id=external-ingress-nginx-leader
          - --controller-class=k8s.io/external
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/external-ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=true
          - --default-ssl-certificate=cert-manager/afamiljen-se-production-tls
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.12.0@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 82
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: external-ingress-nginx
        serviceAccountName: external-ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: external-ingress-nginx-admission
  status:
    observedGeneration: 5
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "3"
      deployment.kubernetes.io/max-replicas: "4"
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: internal-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-03T20:14:22Z"
    generation: 3
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 5d6c6b87d
    name: internal-ingress-nginx-controller-5d6c6b87d
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: internal-ingress-nginx-controller
      uid: e32cfe86-f3d0-471d-9ba6-a22b1899caed
    resourceVersion: "643233"
    uid: 93014a9b-ae84-45f1-98a2-77ceee80f3cd
  spec:
    replicas: 3
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: internal-ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 5d6c6b87d
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: internal-ingress-nginx
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.12.0
          helm.sh/chart: ingress-nginx-4.12.0
          pod-template-hash: 5d6c6b87d
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/internal-ingress-nginx-controller
          - --election-id=internal-ingress-nginx-leader
          - --controller-class=k8s.io/internal
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/internal-ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=true
          - --default-ssl-certificate=cert-manager/afamiljen-se-production-tls
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.12.0@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 2000Mi
            requests:
              cpu: "1"
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 82
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: internal-ingress-nginx
        serviceAccountName: internal-ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: internal-ingress-nginx-admission
  status:
    availableReplicas: 3
    fullyLabeledReplicas: 3
    observedGeneration: 3
    readyReplicas: 3
    replicas: 3
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "3"
      deployment.kubernetes.io/max-replicas: "4"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: internal-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T22:05:51Z"
    generation: 5
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 7df4d66844
    name: internal-ingress-nginx-controller-7df4d66844
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: internal-ingress-nginx-controller
      uid: e32cfe86-f3d0-471d-9ba6-a22b1899caed
    resourceVersion: "643248"
    uid: 775642f5-4269-4209-aa70-abb1cf8960c9
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: internal-ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 7df4d66844
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: internal-ingress-nginx
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.12.0
          helm.sh/chart: ingress-nginx-4.12.0
          pod-template-hash: 7df4d66844
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/internal-ingress-nginx-controller
          - --election-id=internal-ingress-nginx-leader
          - --controller-class=k8s.io/internal
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/internal-ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=true
          - --default-ssl-certificate=cert-manager/afamiljen-se-production-tls
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.12.0@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 82
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: internal-ingress-nginx
        serviceAccountName: internal-ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: internal-ingress-nginx-admission
  status:
    observedGeneration: 5
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: internal-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T19:07:36Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 86985dd576
    name: internal-ingress-nginx-controller-86985dd576
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: internal-ingress-nginx-controller
      uid: e32cfe86-f3d0-471d-9ba6-a22b1899caed
    resourceVersion: "92536"
    uid: 9c2cfaad-fd0e-4507-b541-bf7387678135
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: internal-ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 86985dd576
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: internal-ingress-nginx
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.12.0
          helm.sh/chart: ingress-nginx-4.12.0
          pod-template-hash: 86985dd576
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/internal-ingress-nginx-controller
          - --election-id=internal-ingress-nginx-leader
          - --controller-class=k8s.io/internal
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/internal-ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=true
          - --default-ssl-certificate=cert-manager/afamiljen-se-staging-tls
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.12.0@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 82
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: internal-ingress-nginx
        serviceAccountName: internal-ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: internal-ingress-nginx-admission
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: k8s-gateway
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:16:04Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: k8s-gateway
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: k8s-gateway
      app.kubernetes.io/version: 0.4.0
      helm.sh/chart: k8s-gateway-2.4.0
      pod-template-hash: "5867877686"
    name: k8s-gateway-5867877686
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: k8s-gateway
      uid: 11a1a617-aa0c-4157-9826-f41fb8b38931
    resourceVersion: "614829"
    uid: 7f000f96-e863-4033-b70c-5a6c31a889e6
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: k8s-gateway
        app.kubernetes.io/name: k8s-gateway
        pod-template-hash: "5867877686"
    template:
      metadata:
        annotations:
          checksum/config: bd2c04393b25e0b7d2235d9271917541bc0d1b500f9d225d0241fb56080d4696
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: k8s-gateway
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: k8s-gateway
          app.kubernetes.io/version: 0.4.0
          helm.sh/chart: k8s-gateway-2.4.0
          pod-template-hash: "5867877686"
      spec:
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: quay.io/oriedge/k8s_gateway:v0.4.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: k8s-gateway
          ports:
          - containerPort: 1053
            name: dns-udp
            protocol: UDP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: k8s-gateway
        serviceAccountName: k8s-gateway
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: k8s-gateway
          name: config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: cert-manager.io/v1
  kind: ClusterIssuer
  metadata:
    creationTimestamp: "2025-02-02T18:15:56Z"
    generation: 7
    labels:
      app.kubernetes.io/name: cert-manager-issuers
      k8slens-edit-resource-version: v1
      kustomize.toolkit.fluxcd.io/name: cert-manager-issuers
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: letsencrypt-production
    resourceVersion: "8900692"
    uid: 9e39e03d-4106-4046-9017-25165120a6b0
  spec:
    acme:
      privateKeySecretRef:
        name: letsencrypt-production
      server: https://acme-v02.api.letsencrypt.org/directory
      solvers:
      - dns01:
          cloudflare:
            apiTokenSecretRef:
              key: api-token
              name: cert-manager-secret
        selector:
          dnsZones:
          - afamiljen.se
  status:
    acme:
      lastPrivateKeyHash: xoxnpEdNwyGh9abvmGPe3rPGpfce/v0vomAkc5yVono=
      uri: https://acme-v02.api.letsencrypt.org/acme/acct/2205671555
    conditions:
    - lastTransitionTime: "2025-02-02T18:15:57Z"
      message: The ACME account was registered with the ACME server
      observedGeneration: 7
      reason: ACMEAccountRegistered
      status: "True"
      type: Ready
- apiVersion: cert-manager.io/v1
  kind: ClusterIssuer
  metadata:
    creationTimestamp: "2025-02-02T18:15:56Z"
    generation: 5
    labels:
      app.kubernetes.io/name: cert-manager-issuers
      k8slens-edit-resource-version: v1
      kustomize.toolkit.fluxcd.io/name: cert-manager-issuers
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: letsencrypt-staging
    resourceVersion: "6291002"
    uid: 9e579322-8b75-45ef-9982-508021866864
  spec:
    acme:
      privateKeySecretRef:
        name: letsencrypt-staging
      server: https://acme-staging-v02.api.letsencrypt.org/directory
      solvers:
      - dns01:
          cloudflare:
            apiTokenSecretRef:
              key: api-token
              name: cert-manager-secret
        selector:
          dnsZones:
          - afamiljen.se
  status:
    acme:
      lastPrivateKeyHash: SmJObFoVUT1UBxzGqGSPKVY2psXJDiUisLKJSvi8tmc=
      uri: https://acme-staging-v02.api.letsencrypt.org/acme/acct/183019574
    conditions:
    - lastTransitionTime: "2025-02-02T18:15:57Z"
      message: The ACME account was registered with the ACME server
      observedGeneration: 5
      reason: ACMEAccountRegistered
      status: "True"
      type: Ready
- apiVersion: cilium.io/v2
  kind: CiliumEndpoint
  metadata:
    creationTimestamp: "2025-02-13T17:37:08Z"
    generation: 1
    labels:
      app.kubernetes.io/component: cloudflared
      app.kubernetes.io/instance: cloudflared
      app.kubernetes.io/name: cloudflared
      pod-template-hash: 744d6dc766
    name: cloudflared-744d6dc766-8g4bs
    namespace: network
    ownerReferences:
    - apiVersion: v1
      kind: Pod
      name: cloudflared-744d6dc766-8g4bs
      uid: 6b49d7c5-8fbd-4cc4-988c-8f4942f1683e
    resourceVersion: "8884072"
    uid: 37108bfc-a055-4f0f-a0c7-ff1e0cf05a44
  status:
    encryption: {}
    external-identifiers:
      cni-attachment-id: 5fb66123f3d8745f8c042f2ce810addb73c8daa559452db421b268941300ff39:eth0
      container-id: 5fb66123f3d8745f8c042f2ce810addb73c8daa559452db421b268941300ff39
      k8s-namespace: network
      k8s-pod-name: cloudflared-744d6dc766-8g4bs
      pod-name: network/cloudflared-744d6dc766-8g4bs
    id: 3880
    identity:
      id: 43960
      labels:
      - k8s:app.kubernetes.io/component=cloudflared
      - k8s:app.kubernetes.io/instance=cloudflared
      - k8s:app.kubernetes.io/name=cloudflared
      - k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name=network
      - k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name=cluster-apps
      - k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace=flux-system
      - k8s:io.cilium.k8s.policy.cluster=default
      - k8s:io.cilium.k8s.policy.serviceaccount=default
      - k8s:io.kubernetes.pod.namespace=network
    networking:
      addressing:
      - ipv4: 10.69.2.208
      node: 192.168.20.20
    state: ready
- apiVersion: cilium.io/v2
  kind: CiliumEndpoint
  metadata:
    creationTimestamp: "2025-02-04T19:43:08Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      pod-template-hash: 757c77ff69
    name: external-dns-757c77ff69-288ll
    namespace: network
    ownerReferences:
    - apiVersion: v1
      kind: Pod
      name: external-dns-757c77ff69-288ll
      uid: 7a78e9f7-1481-47a0-a526-72ea321881d8
    resourceVersion: "1335099"
    uid: ce17a497-e839-430c-a1a2-0189b0604e85
  status:
    encryption: {}
    external-identifiers:
      cni-attachment-id: 9fcebaf489ddaaa7410a79a9f175f183e6ac81c30abcc40df1d580ea96f91714:eth0
      container-id: 9fcebaf489ddaaa7410a79a9f175f183e6ac81c30abcc40df1d580ea96f91714
      k8s-namespace: network
      k8s-pod-name: external-dns-757c77ff69-288ll
      pod-name: network/external-dns-757c77ff69-288ll
    id: 162
    identity:
      id: 2741
      labels:
      - k8s:app.kubernetes.io/instance=external-dns
      - k8s:app.kubernetes.io/name=external-dns
      - k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name=network
      - k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name=cluster-apps
      - k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace=flux-system
      - k8s:io.cilium.k8s.policy.cluster=default
      - k8s:io.cilium.k8s.policy.serviceaccount=external-dns
      - k8s:io.kubernetes.pod.namespace=network
    named-ports:
    - name: http
      port: 7979
      protocol: TCP
    networking:
      addressing:
      - ipv4: 10.69.1.117
      node: 192.168.20.50
    state: ready
- apiVersion: cilium.io/v2
  kind: CiliumEndpoint
  metadata:
    creationTimestamp: "2025-02-04T19:43:08Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      pod-template-hash: 757c77ff69
    name: external-dns-757c77ff69-cg42l
    namespace: network
    ownerReferences:
    - apiVersion: v1
      kind: Pod
      name: external-dns-757c77ff69-cg42l
      uid: d0371e3a-7f87-416c-9777-a911ed52f172
    resourceVersion: "1335100"
    uid: 12067f4b-fec6-4ae7-9737-53905238d163
  status:
    encryption: {}
    external-identifiers:
      cni-attachment-id: 09d291a579afe7dc1dee81d91e1ebedaefa2a19a9f8122f5849e7a800d15ee07:eth0
      container-id: 09d291a579afe7dc1dee81d91e1ebedaefa2a19a9f8122f5849e7a800d15ee07
      k8s-namespace: network
      k8s-pod-name: external-dns-757c77ff69-cg42l
      pod-name: network/external-dns-757c77ff69-cg42l
    id: 2819
    identity:
      id: 2741
      labels:
      - k8s:app.kubernetes.io/instance=external-dns
      - k8s:app.kubernetes.io/name=external-dns
      - k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name=network
      - k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name=cluster-apps
      - k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace=flux-system
      - k8s:io.cilium.k8s.policy.cluster=default
      - k8s:io.cilium.k8s.policy.serviceaccount=external-dns
      - k8s:io.kubernetes.pod.namespace=network
    named-ports:
    - name: http
      port: 7979
      protocol: TCP
    networking:
      addressing:
      - ipv4: 10.69.3.246
      node: 192.168.20.31
    state: ready
- apiVersion: cilium.io/v2
  kind: CiliumEndpoint
  metadata:
    creationTimestamp: "2025-02-03T20:15:32Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 66d7c6f9f8
    name: external-ingress-nginx-controller-66d7c6f9f8-8r28d
    namespace: network
    ownerReferences:
    - apiVersion: v1
      kind: Pod
      name: external-ingress-nginx-controller-66d7c6f9f8-8r28d
      uid: b91527d2-5004-4bde-a068-82cacdd6db4b
    resourceVersion: "643509"
    uid: 0324a1b0-feb3-4fbf-a18b-04d59cecb070
  status:
    encryption: {}
    external-identifiers:
      cni-attachment-id: 9ca45fc2312d5298fd0c5f9b18237c7413a37ef26af97c400969ae851475f24c:eth0
      container-id: 9ca45fc2312d5298fd0c5f9b18237c7413a37ef26af97c400969ae851475f24c
      k8s-namespace: network
      k8s-pod-name: external-ingress-nginx-controller-66d7c6f9f8-8r28d
      pod-name: network/external-ingress-nginx-controller-66d7c6f9f8-8r28d
    id: 2168
    identity:
      id: 7333
      labels:
      - k8s:app.kubernetes.io/component=controller
      - k8s:app.kubernetes.io/instance=external-ingress-nginx
      - k8s:app.kubernetes.io/managed-by=Helm
      - k8s:app.kubernetes.io/name=ingress-nginx
      - k8s:app.kubernetes.io/part-of=ingress-nginx
      - k8s:app.kubernetes.io/version=1.12.0
      - k8s:helm.sh/chart=ingress-nginx-4.12.0
      - k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name=network
      - k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name=cluster-apps
      - k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace=flux-system
      - k8s:io.cilium.k8s.policy.cluster=default
      - k8s:io.cilium.k8s.policy.serviceaccount=external-ingress-nginx
      - k8s:io.kubernetes.pod.namespace=network
    named-ports:
    - name: http
      port: 80
      protocol: TCP
    - name: https
      port: 443
      protocol: TCP
    - name: metrics
      port: 10254
      protocol: TCP
    - name: webhook
      port: 8443
      protocol: TCP
    networking:
      addressing:
      - ipv4: 10.69.3.189
      node: 192.168.20.31
    state: ready
- apiVersion: cilium.io/v2
  kind: CiliumEndpoint
  metadata:
    creationTimestamp: "2025-02-03T20:15:57Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 66d7c6f9f8
    name: external-ingress-nginx-controller-66d7c6f9f8-fqnzj
    namespace: network
    ownerReferences:
    - apiVersion: v1
      kind: Pod
      name: external-ingress-nginx-controller-66d7c6f9f8-fqnzj
      uid: 8b0f69b0-032b-4a07-a576-64f0416281f1
    resourceVersion: "643812"
    uid: 1d55030e-d2c7-48ec-af90-f323c7912b94
  status:
    encryption: {}
    external-identifiers:
      cni-attachment-id: 206bc9303e76b5cd91c8001074817bee57b70708bb86fd562e8f7d23b599e160:eth0
      container-id: 206bc9303e76b5cd91c8001074817bee57b70708bb86fd562e8f7d23b599e160
      k8s-namespace: network
      k8s-pod-name: external-ingress-nginx-controller-66d7c6f9f8-fqnzj
      pod-name: network/external-ingress-nginx-controller-66d7c6f9f8-fqnzj
    id: 613
    identity:
      id: 7333
      labels:
      - k8s:app.kubernetes.io/component=controller
      - k8s:app.kubernetes.io/instance=external-ingress-nginx
      - k8s:app.kubernetes.io/managed-by=Helm
      - k8s:app.kubernetes.io/name=ingress-nginx
      - k8s:app.kubernetes.io/part-of=ingress-nginx
      - k8s:app.kubernetes.io/version=1.12.0
      - k8s:helm.sh/chart=ingress-nginx-4.12.0
      - k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name=network
      - k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name=cluster-apps
      - k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace=flux-system
      - k8s:io.cilium.k8s.policy.cluster=default
      - k8s:io.cilium.k8s.policy.serviceaccount=external-ingress-nginx
      - k8s:io.kubernetes.pod.namespace=network
    named-ports:
    - name: http
      port: 80
      protocol: TCP
    - name: https
      port: 443
      protocol: TCP
    - name: metrics
      port: 10254
      protocol: TCP
    - name: webhook
      port: 8443
      protocol: TCP
    networking:
      addressing:
      - ipv4: 10.69.4.146
      node: 192.168.20.32
    state: ready
- apiVersion: cilium.io/v2
  kind: CiliumEndpoint
  metadata:
    creationTimestamp: "2025-02-03T20:15:45Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 66d7c6f9f8
    name: external-ingress-nginx-controller-66d7c6f9f8-zbb7w
    namespace: network
    ownerReferences:
    - apiVersion: v1
      kind: Pod
      name: external-ingress-nginx-controller-66d7c6f9f8-zbb7w
      uid: a8af420f-c5d5-494b-b889-220d3a7914f7
    resourceVersion: "643658"
    uid: 1712a48a-9405-405b-b0e7-58f00844fe19
  status:
    encryption: {}
    external-identifiers:
      cni-attachment-id: 392b47a5d18359d499d0e20f60109cfb51b52a5a854b8c635ff807176e2fd440:eth0
      container-id: 392b47a5d18359d499d0e20f60109cfb51b52a5a854b8c635ff807176e2fd440
      k8s-namespace: network
      k8s-pod-name: external-ingress-nginx-controller-66d7c6f9f8-zbb7w
      pod-name: network/external-ingress-nginx-controller-66d7c6f9f8-zbb7w
    id: 1917
    identity:
      id: 7333
      labels:
      - k8s:app.kubernetes.io/component=controller
      - k8s:app.kubernetes.io/instance=external-ingress-nginx
      - k8s:app.kubernetes.io/managed-by=Helm
      - k8s:app.kubernetes.io/name=ingress-nginx
      - k8s:app.kubernetes.io/part-of=ingress-nginx
      - k8s:app.kubernetes.io/version=1.12.0
      - k8s:helm.sh/chart=ingress-nginx-4.12.0
      - k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name=network
      - k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name=cluster-apps
      - k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace=flux-system
      - k8s:io.cilium.k8s.policy.cluster=default
      - k8s:io.cilium.k8s.policy.serviceaccount=external-ingress-nginx
      - k8s:io.kubernetes.pod.namespace=network
    named-ports:
    - name: http
      port: 80
      protocol: TCP
    - name: https
      port: 443
      protocol: TCP
    - name: metrics
      port: 10254
      protocol: TCP
    - name: webhook
      port: 8443
      protocol: TCP
    networking:
      addressing:
      - ipv4: 10.69.5.51
      node: 192.168.20.30
    state: ready
- apiVersion: cilium.io/v2
  kind: CiliumEndpoint
  metadata:
    creationTimestamp: "2025-02-03T20:14:47Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 5d6c6b87d
    name: internal-ingress-nginx-controller-5d6c6b87d-4gmsx
    namespace: network
    ownerReferences:
    - apiVersion: v1
      kind: Pod
      name: internal-ingress-nginx-controller-5d6c6b87d-4gmsx
      uid: d2bb3df7-f88b-4d91-9f64-e56e0e85717b
    resourceVersion: "643113"
    uid: 2c623973-acb5-46fa-888a-55c15b38189d
  status:
    encryption: {}
    external-identifiers:
      cni-attachment-id: d45febc795de7b8139db20a14690558595bf6b8344ed2d33aa6715d39a481ebb:eth0
      container-id: d45febc795de7b8139db20a14690558595bf6b8344ed2d33aa6715d39a481ebb
      k8s-namespace: network
      k8s-pod-name: internal-ingress-nginx-controller-5d6c6b87d-4gmsx
      pod-name: network/internal-ingress-nginx-controller-5d6c6b87d-4gmsx
    id: 4053
    identity:
      id: 60013
      labels:
      - k8s:app.kubernetes.io/component=controller
      - k8s:app.kubernetes.io/instance=internal-ingress-nginx
      - k8s:app.kubernetes.io/managed-by=Helm
      - k8s:app.kubernetes.io/name=ingress-nginx
      - k8s:app.kubernetes.io/part-of=ingress-nginx
      - k8s:app.kubernetes.io/version=1.12.0
      - k8s:helm.sh/chart=ingress-nginx-4.12.0
      - k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name=network
      - k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name=cluster-apps
      - k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace=flux-system
      - k8s:io.cilium.k8s.policy.cluster=default
      - k8s:io.cilium.k8s.policy.serviceaccount=internal-ingress-nginx
      - k8s:io.kubernetes.pod.namespace=network
    named-ports:
    - name: http
      port: 80
      protocol: TCP
    - name: https
      port: 443
      protocol: TCP
    - name: metrics
      port: 10254
      protocol: TCP
    - name: webhook
      port: 8443
      protocol: TCP
    networking:
      addressing:
      - ipv4: 10.69.4.239
      node: 192.168.20.32
    state: ready
- apiVersion: cilium.io/v2
  kind: CiliumEndpoint
  metadata:
    creationTimestamp: "2025-02-03T20:14:34Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 5d6c6b87d
    name: internal-ingress-nginx-controller-5d6c6b87d-ltfdh
    namespace: network
    ownerReferences:
    - apiVersion: v1
      kind: Pod
      name: internal-ingress-nginx-controller-5d6c6b87d-ltfdh
      uid: cd3d770a-997e-4c8e-bbb7-922329caab4a
    resourceVersion: "642952"
    uid: 948905cd-662e-4ccf-a687-69ad2e255865
  status:
    encryption: {}
    external-identifiers:
      cni-attachment-id: 97bc3d682a64e52f6bb78d50129f44ca3823a04021724227dc0b1bb35e0d3771:eth0
      container-id: 97bc3d682a64e52f6bb78d50129f44ca3823a04021724227dc0b1bb35e0d3771
      k8s-namespace: network
      k8s-pod-name: internal-ingress-nginx-controller-5d6c6b87d-ltfdh
      pod-name: network/internal-ingress-nginx-controller-5d6c6b87d-ltfdh
    id: 431
    identity:
      id: 60013
      labels:
      - k8s:app.kubernetes.io/component=controller
      - k8s:app.kubernetes.io/instance=internal-ingress-nginx
      - k8s:app.kubernetes.io/managed-by=Helm
      - k8s:app.kubernetes.io/name=ingress-nginx
      - k8s:app.kubernetes.io/part-of=ingress-nginx
      - k8s:app.kubernetes.io/version=1.12.0
      - k8s:helm.sh/chart=ingress-nginx-4.12.0
      - k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name=network
      - k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name=cluster-apps
      - k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace=flux-system
      - k8s:io.cilium.k8s.policy.cluster=default
      - k8s:io.cilium.k8s.policy.serviceaccount=internal-ingress-nginx
      - k8s:io.kubernetes.pod.namespace=network
    named-ports:
    - name: http
      port: 80
      protocol: TCP
    - name: https
      port: 443
      protocol: TCP
    - name: metrics
      port: 10254
      protocol: TCP
    - name: webhook
      port: 8443
      protocol: TCP
    networking:
      addressing:
      - ipv4: 10.69.5.80
      node: 192.168.20.30
    state: ready
- apiVersion: cilium.io/v2
  kind: CiliumEndpoint
  metadata:
    creationTimestamp: "2025-02-03T20:14:22Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 5d6c6b87d
    name: internal-ingress-nginx-controller-5d6c6b87d-m4cvp
    namespace: network
    ownerReferences:
    - apiVersion: v1
      kind: Pod
      name: internal-ingress-nginx-controller-5d6c6b87d-m4cvp
      uid: 98494850-36a1-43b5-916c-12de1d330835
    resourceVersion: "642795"
    uid: 428d2620-537b-409d-85da-ef83703c45a3
  status:
    encryption: {}
    external-identifiers:
      cni-attachment-id: 53c590385c8493dd7921925e6b2177d7ea7059975d312510186f8423b3909b93:eth0
      container-id: 53c590385c8493dd7921925e6b2177d7ea7059975d312510186f8423b3909b93
      k8s-namespace: network
      k8s-pod-name: internal-ingress-nginx-controller-5d6c6b87d-m4cvp
      pod-name: network/internal-ingress-nginx-controller-5d6c6b87d-m4cvp
    id: 2823
    identity:
      id: 60013
      labels:
      - k8s:app.kubernetes.io/component=controller
      - k8s:app.kubernetes.io/instance=internal-ingress-nginx
      - k8s:app.kubernetes.io/managed-by=Helm
      - k8s:app.kubernetes.io/name=ingress-nginx
      - k8s:app.kubernetes.io/part-of=ingress-nginx
      - k8s:app.kubernetes.io/version=1.12.0
      - k8s:helm.sh/chart=ingress-nginx-4.12.0
      - k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name=network
      - k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name=cluster-apps
      - k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace=flux-system
      - k8s:io.cilium.k8s.policy.cluster=default
      - k8s:io.cilium.k8s.policy.serviceaccount=internal-ingress-nginx
      - k8s:io.kubernetes.pod.namespace=network
    named-ports:
    - name: http
      port: 80
      protocol: TCP
    - name: https
      port: 443
      protocol: TCP
    - name: metrics
      port: 10254
      protocol: TCP
    - name: webhook
      port: 8443
      protocol: TCP
    networking:
      addressing:
      - ipv4: 10.69.3.64
      node: 192.168.20.31
    state: ready
- apiVersion: cilium.io/v2
  kind: CiliumEndpoint
  metadata:
    creationTimestamp: "2025-02-03T19:12:49Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: k8s-gateway
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: k8s-gateway
      app.kubernetes.io/version: 0.4.0
      helm.sh/chart: k8s-gateway-2.4.0
      pod-template-hash: "5867877686"
    name: k8s-gateway-5867877686-ghpnt
    namespace: network
    ownerReferences:
    - apiVersion: v1
      kind: Pod
      name: k8s-gateway-5867877686-ghpnt
      uid: 7f264363-0c9d-4fd9-86b3-327be07c54a7
    resourceVersion: "614671"
    uid: 0c63a811-625d-4f7b-be8a-3cec2a01f8de
  status:
    encryption: {}
    external-identifiers:
      cni-attachment-id: d5ba5fa9aaddcb9ef7ddc515cf75ad0776b651a206498da4f2cbe905c3a281cd:eth0
      container-id: d5ba5fa9aaddcb9ef7ddc515cf75ad0776b651a206498da4f2cbe905c3a281cd
      k8s-namespace: network
      k8s-pod-name: k8s-gateway-5867877686-ghpnt
      pod-name: network/k8s-gateway-5867877686-ghpnt
    id: 2016
    identity:
      id: 14198
      labels:
      - k8s:app.kubernetes.io/instance=k8s-gateway
      - k8s:app.kubernetes.io/managed-by=Helm
      - k8s:app.kubernetes.io/name=k8s-gateway
      - k8s:app.kubernetes.io/version=0.4.0
      - k8s:helm.sh/chart=k8s-gateway-2.4.0
      - k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name=network
      - k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name=cluster-apps
      - k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace=flux-system
      - k8s:io.cilium.k8s.policy.cluster=default
      - k8s:io.cilium.k8s.policy.serviceaccount=k8s-gateway
      - k8s:io.kubernetes.pod.namespace=network
    named-ports:
    - name: dns-udp
      port: 1053
      protocol: UDP
    - name: metrics
      port: 9153
      protocol: TCP
    networking:
      addressing:
      - ipv4: 10.69.5.167
      node: 192.168.20.30
    state: ready
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T09:20:15Z"
    generation: 1
    labels:
      app.kubernetes.io/component: operator
      app.kubernetes.io/instance: kube-prometheus-1738574406
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-prometheus
      app.kubernetes.io/version: 0.79.2
      helm.sh/chart: kube-prometheus-10.2.5
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: kube-prometheus-1738574406-operator
      io.kubernetes.pod.namespace: observability
    name: "11298"
    resourceVersion: "363908"
    uid: 554a2c77-0159-4e3d-aa1d-f1ab6fa03276
  security-labels:
    k8s:app.kubernetes.io/component: operator
    k8s:app.kubernetes.io/instance: kube-prometheus-1738574406
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: kube-prometheus
    k8s:app.kubernetes.io/version: 0.79.2
    k8s:helm.sh/chart: kube-prometheus-10.2.5
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: observability
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.namespace.labels.name: observability
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: kube-prometheus-1738574406-operator
    k8s:io.kubernetes.pod.namespace: observability
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T17:18:44Z"
    generation: 1
    labels:
      app: csi-attacher
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: longhorn-service-account
      io.kubernetes.pod.namespace: longhorn-system
    name: "11428"
    resourceVersion: "557294"
    uid: f067d0df-1062-407a-a432-e8f9fee3203c
  security-labels:
    k8s:app: csi-attacher
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: longhorn-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: longhorn-service-account
    k8s:io.kubernetes.pod.namespace: longhorn-system
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-10T21:03:08Z"
    generation: 1
    labels:
      app.kubernetes.io/component: registry
      app.kubernetes.io/instance: harbor-1739221352
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: harbor
      app.kubernetes.io/version: 2.12.2
      helm.sh/chart: harbor-24.3.0
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: harbor-1739221352-registry
      io.kubernetes.pod.namespace: default
    name: "11633"
    resourceVersion: "6253790"
    uid: e0e97f38-9b1e-4b87-9fbd-e84095a13d4a
  security-labels:
    k8s:app.kubernetes.io/component: registry
    k8s:app.kubernetes.io/instance: harbor-1739221352
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: harbor
    k8s:app.kubernetes.io/version: 2.12.2
    k8s:helm.sh/chart: harbor-24.3.0
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: default
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: harbor-1739221352-registry
    k8s:io.kubernetes.pod.namespace: default
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-02T18:16:29Z"
    generation: 1
    labels:
      app: reloader
      app.kubernetes.io/managed-by: Helm
      chart: reloader-1.2.1
      group: com.stakater.platform
      heritage: Helm
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: reloader
      io.kubernetes.pod.namespace: kube-system
      provider: stakater
      release: reloader
      version: v1.2.1
    name: "12144"
    resourceVersion: "3307"
    uid: 62c05d12-ba40-43b8-98ae-8fa1b04b35f3
  security-labels:
    k8s:app: reloader
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:chart: reloader-1.2.1
    k8s:group: com.stakater.platform
    k8s:heritage: Helm
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: kube-system
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: reloader
    k8s:io.kubernetes.pod.namespace: kube-system
    k8s:provider: stakater
    k8s:release: reloader
    k8s:version: v1.2.1
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T17:18:41Z"
    generation: 1
    labels:
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: longhorn-service-account
      io.kubernetes.pod.namespace: longhorn-system
      longhorn.io/component: instance-manager
      longhorn.io/data-engine: v1
      longhorn.io/instance-manager-image: imi-46d35c0a
      longhorn.io/instance-manager-type: aio
      longhorn.io/managed-by: longhorn-manager
      longhorn.io/node: ldit1
    name: "12246"
    resourceVersion: "557137"
    uid: f846011b-68f0-46a9-a2d2-edae799dedc2
  security-labels:
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: longhorn-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: longhorn-service-account
    k8s:io.kubernetes.pod.namespace: longhorn-system
    k8s:longhorn.io/component: instance-manager
    k8s:longhorn.io/data-engine: v1
    k8s:longhorn.io/instance-manager-image: imi-46d35c0a
    k8s:longhorn.io/instance-manager-type: aio
    k8s:longhorn.io/managed-by: longhorn-manager
    k8s:longhorn.io/node: ldit1
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-13T17:56:12Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: wordpress-1738616146
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: memcached
      app.kubernetes.io/version: 1.6.36
      helm.sh/chart: memcached-7.6.3
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: wordpress-1738616146-memcached
      io.kubernetes.pod.namespace: default
    name: "12817"
    resourceVersion: "8896296"
    uid: 271768cd-10fd-4904-86b0-1ed557ca74a9
  security-labels:
    k8s:app.kubernetes.io/instance: wordpress-1738616146
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: memcached
    k8s:app.kubernetes.io/version: 1.6.36
    k8s:helm.sh/chart: memcached-7.6.3
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: default
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: wordpress-1738616146-memcached
    k8s:io.kubernetes.pod.namespace: default
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T20:56:13Z"
    generation: 1
    labels:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: wordpress-1738616146
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mariadb
      app.kubernetes.io/part-of: mariadb
      app.kubernetes.io/version: 11.4.4
      helm.sh/chart: mariadb-20.2.2
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: wordpress-1738616146-mariadb
      io.kubernetes.pod.namespace: default
    name: "12942"
    resourceVersion: "663335"
    uid: 70bf1957-40a2-4028-8dca-0962ae56c404
  security-labels:
    k8s:app.kubernetes.io/component: primary
    k8s:app.kubernetes.io/instance: wordpress-1738616146
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: mariadb
    k8s:app.kubernetes.io/part-of: mariadb
    k8s:app.kubernetes.io/version: 11.4.4
    k8s:helm.sh/chart: mariadb-20.2.2
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: default
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: wordpress-1738616146-mariadb
    k8s:io.kubernetes.pod.namespace: default
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-02T18:15:14Z"
    generation: 1
    labels:
      app: kustomize-controller
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: kustomize-controller
      io.kubernetes.pod.namespace: flux-system
    name: "13849"
    resourceVersion: "2016"
    uid: 0859c418-e9b6-40f6-8d2b-fdccce29cfed
  security-labels:
    k8s:app: kustomize-controller
    k8s:io.cilium.k8s.namespace.labels.app.kubernetes.io/instance: flux-system
    k8s:io.cilium.k8s.namespace.labels.app.kubernetes.io/managed-by: flux-operator
    k8s:io.cilium.k8s.namespace.labels.app.kubernetes.io/part-of: flux
    k8s:io.cilium.k8s.namespace.labels.app.kubernetes.io/version: v2.4.0
    k8s:io.cilium.k8s.namespace.labels.fluxcd.controlplane.io/name: flux
    k8s:io.cilium.k8s.namespace.labels.fluxcd.controlplane.io/namespace: flux-system
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: flux-system
    k8s:io.cilium.k8s.namespace.labels.pod-security.kubernetes.io/warn: restricted
    k8s:io.cilium.k8s.namespace.labels.pod-security.kubernetes.io/warn-version: latest
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: kustomize-controller
    k8s:io.kubernetes.pod.namespace: flux-system
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-02T18:16:04Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: k8s-gateway
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: k8s-gateway
      app.kubernetes.io/version: 0.4.0
      helm.sh/chart: k8s-gateway-2.4.0
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: k8s-gateway
      io.kubernetes.pod.namespace: network
    name: "14198"
    resourceVersion: "2931"
    uid: b30fead7-223c-42eb-a1a0-374be9b48629
  security-labels:
    k8s:app.kubernetes.io/instance: k8s-gateway
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: k8s-gateway
    k8s:app.kubernetes.io/version: 0.4.0
    k8s:helm.sh/chart: k8s-gateway-2.4.0
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: network
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: k8s-gateway
    k8s:io.kubernetes.pod.namespace: network
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-10T21:03:08Z"
    generation: 1
    labels:
      app.kubernetes.io/component: jobservice
      app.kubernetes.io/instance: harbor-1739221352
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: harbor
      app.kubernetes.io/version: 2.12.2
      helm.sh/chart: harbor-24.3.0
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: default
      io.kubernetes.pod.namespace: default
    name: "14779"
    resourceVersion: "6253795"
    uid: 16ba60d0-df0d-4b41-af59-234d0c8e1ff3
  security-labels:
    k8s:app.kubernetes.io/component: jobservice
    k8s:app.kubernetes.io/instance: harbor-1739221352
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: harbor
    k8s:app.kubernetes.io/version: 2.12.2
    k8s:helm.sh/chart: harbor-24.3.0
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: default
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: default
    k8s:io.kubernetes.pod.namespace: default
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T09:20:15Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: kube-prometheus-1738574406
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-state-metrics
      app.kubernetes.io/version: 2.14.0
      helm.sh/chart: kube-state-metrics-4.3.3
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: kube-prometheus-1738574406-kube-state-metrics
      io.kubernetes.pod.namespace: observability
    name: "1642"
    resourceVersion: "363907"
    uid: 924b809b-eceb-4090-94a2-97c4d0a23171
  security-labels:
    k8s:app.kubernetes.io/instance: kube-prometheus-1738574406
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: kube-state-metrics
    k8s:app.kubernetes.io/version: 2.14.0
    k8s:helm.sh/chart: kube-state-metrics-4.3.3
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: observability
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.namespace.labels.name: observability
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: kube-prometheus-1738574406-kube-state-metrics
    k8s:io.kubernetes.pod.namespace: observability
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-10T21:02:49Z"
    generation: 1
    labels:
      app.kubernetes.io/component: portal
      app.kubernetes.io/instance: harbor-1739221352
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: harbor
      app.kubernetes.io/version: 2.12.2
      helm.sh/chart: harbor-24.3.0
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: default
      io.kubernetes.pod.namespace: default
    name: "16653"
    resourceVersion: "6253194"
    uid: 75fe5d1e-cf60-4dbe-88c0-fcaaf24c247c
  security-labels:
    k8s:app.kubernetes.io/component: portal
    k8s:app.kubernetes.io/instance: harbor-1739221352
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: harbor
    k8s:app.kubernetes.io/version: 2.12.2
    k8s:helm.sh/chart: harbor-24.3.0
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: default
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: default
    k8s:io.kubernetes.pod.namespace: default
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-02T18:15:10Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: flux-operator
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: flux-operator
      app.kubernetes.io/version: v0.13.0
      helm.sh/chart: flux-operator-0.13.0
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: flux-operator
      io.kubernetes.pod.namespace: flux-system
    name: "1745"
    resourceVersion: "1909"
    uid: dc9e39ba-1f98-48d6-8e7a-f4f4ac9b9088
  security-labels:
    k8s:app.kubernetes.io/instance: flux-operator
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: flux-operator
    k8s:app.kubernetes.io/version: v0.13.0
    k8s:helm.sh/chart: flux-operator-0.13.0
    k8s:io.cilium.k8s.namespace.labels.app.kubernetes.io/instance: flux-system
    k8s:io.cilium.k8s.namespace.labels.app.kubernetes.io/managed-by: flux-operator
    k8s:io.cilium.k8s.namespace.labels.app.kubernetes.io/part-of: flux
    k8s:io.cilium.k8s.namespace.labels.app.kubernetes.io/version: v2.4.0
    k8s:io.cilium.k8s.namespace.labels.fluxcd.controlplane.io/name: flux
    k8s:io.cilium.k8s.namespace.labels.fluxcd.controlplane.io/namespace: flux-system
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: flux-system
    k8s:io.cilium.k8s.namespace.labels.pod-security.kubernetes.io/warn: restricted
    k8s:io.cilium.k8s.namespace.labels.pod-security.kubernetes.io/warn-version: latest
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: flux-operator
    k8s:io.kubernetes.pod.namespace: flux-system
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T17:18:44Z"
    generation: 1
    labels:
      app: csi-provisioner
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: longhorn-service-account
      io.kubernetes.pod.namespace: longhorn-system
    name: "18709"
    resourceVersion: "557293"
    uid: 6e387575-8a81-4a3e-a822-b687dadc2761
  security-labels:
    k8s:app: csi-provisioner
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: longhorn-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: longhorn-service-account
    k8s:io.kubernetes.pod.namespace: longhorn-system
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-08T09:40:56Z"
    generation: 1
    labels:
      app.kubernetes.io/component: repo-server
      app.kubernetes.io/instance: argocd
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: argo-cd
      app.kubernetes.io/version: 2.14.2
      helm.sh/chart: argo-cd-7.1.10
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: argocd-argo-cd-argocd-repo-server
      io.kubernetes.pod.namespace: argocd
    name: "18969"
    resourceVersion: "4204635"
    uid: bf8815b1-d0b0-4eb6-af5d-bcdefdc2bd4c
  security-labels:
    k8s:app.kubernetes.io/component: repo-server
    k8s:app.kubernetes.io/instance: argocd
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: argo-cd
    k8s:app.kubernetes.io/version: 2.14.2
    k8s:helm.sh/chart: argo-cd-7.1.10
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: argocd
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: argocd-argo-cd-argocd-repo-server
    k8s:io.kubernetes.pod.namespace: argocd
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T17:18:38Z"
    generation: 1
    labels:
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: longhorn-service-account
      io.kubernetes.pod.namespace: longhorn-system
      longhorn.io/component: instance-manager
      longhorn.io/data-engine: v1
      longhorn.io/instance-manager-image: imi-46d35c0a
      longhorn.io/instance-manager-type: aio
      longhorn.io/managed-by: longhorn-manager
      longhorn.io/node: ldite2
    name: "19280"
    resourceVersion: "557108"
    uid: c571b3d6-13eb-4d23-a986-6d2f34990d9b
  security-labels:
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: longhorn-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: longhorn-service-account
    k8s:io.kubernetes.pod.namespace: longhorn-system
    k8s:longhorn.io/component: instance-manager
    k8s:longhorn.io/data-engine: v1
    k8s:longhorn.io/instance-manager-image: imi-46d35c0a
    k8s:longhorn.io/instance-manager-type: aio
    k8s:longhorn.io/managed-by: longhorn-manager
    k8s:longhorn.io/node: ldite2
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-10T21:02:49Z"
    generation: 1
    labels:
      app.kubernetes.io/component: core
      app.kubernetes.io/instance: harbor-1739221352
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: harbor
      app.kubernetes.io/version: 2.12.2
      helm.sh/chart: harbor-24.3.0
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: default
      io.kubernetes.pod.namespace: default
    name: "22217"
    resourceVersion: "6253178"
    uid: 452b0384-156a-4ada-9827-71cc8635fb1c
  security-labels:
    k8s:app.kubernetes.io/component: core
    k8s:app.kubernetes.io/instance: harbor-1739221352
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: harbor
    k8s:app.kubernetes.io/version: 2.12.2
    k8s:helm.sh/chart: harbor-24.3.0
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: default
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: default
    k8s:io.kubernetes.pod.namespace: default
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-02T18:15:54Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: coredns
      app.kubernetes.io/name: coredns
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: coredns
      io.kubernetes.pod.namespace: kube-system
      k8s-app: kube-dns
    name: "23064"
    resourceVersion: "2350"
    uid: da249023-bc53-4cf6-8632-25ba749dd3b8
  security-labels:
    k8s:app.kubernetes.io/instance: coredns
    k8s:app.kubernetes.io/name: coredns
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: kube-system
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: coredns
    k8s:io.kubernetes.pod.namespace: kube-system
    k8s:k8s-app: kube-dns
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-08T17:59:04Z"
    generation: 1
    labels:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: argowf
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/version: 17.2.0
      helm.sh/chart: postgresql-16.4.6
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: argowf-postgresql
      io.kubernetes.pod.namespace: argowf
    name: "24463"
    resourceVersion: "4489644"
    uid: d0954906-814a-45d4-afb6-d1421fb20224
  security-labels:
    k8s:app.kubernetes.io/component: primary
    k8s:app.kubernetes.io/instance: argowf
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: postgresql
    k8s:app.kubernetes.io/version: 17.2.0
    k8s:helm.sh/chart: postgresql-16.4.6
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: argowf
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: argowf-postgresql
    k8s:io.kubernetes.pod.namespace: argowf
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-05T19:28:11Z"
    generation: 1
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: cert-manager
      io.kubernetes.pod.namespace: cert-manager
    name: "24703"
    resourceVersion: "2053039"
    uid: a2a05815-3f53-4924-8868-42436dc847c5
  security-labels:
    k8s:app: cert-manager
    k8s:app.kubernetes.io/component: controller
    k8s:app.kubernetes.io/instance: cert-manager
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: cert-manager
    k8s:app.kubernetes.io/version: v1.16.3
    k8s:helm.sh/chart: cert-manager-v1.16.3
    k8s:io.cilium.k8s.namespace.labels.argocd.argoproj.io/instance: ldit-web
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: cert-manager
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.namespace.labels.name: cert-manager
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: cert-manager
    k8s:io.kubernetes.pod.namespace: cert-manager
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-10T21:02:49Z"
    generation: 1
    labels:
      app.kubernetes.io/component: nginx
      app.kubernetes.io/instance: harbor-1739221352
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: harbor
      app.kubernetes.io/version: 1.27.3
      helm.sh/chart: harbor-24.3.0
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: default
      io.kubernetes.pod.namespace: default
    name: "2572"
    resourceVersion: "6253190"
    uid: 46babd1a-8eca-4d9a-958b-3f881e6030ed
  security-labels:
    k8s:app.kubernetes.io/component: nginx
    k8s:app.kubernetes.io/instance: harbor-1739221352
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: harbor
    k8s:app.kubernetes.io/version: 1.27.3
    k8s:helm.sh/chart: harbor-24.3.0
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: default
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: default
    k8s:io.kubernetes.pod.namespace: default
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-08T09:41:13Z"
    generation: 1
    labels:
      app.kubernetes.io/component: master
      app.kubernetes.io/instance: argocd
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: redis
      app.kubernetes.io/version: 7.4.2
      helm.sh/chart: redis-20.7.0
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: argocd-redis-master
      io.kubernetes.pod.namespace: argocd
    name: "26825"
    resourceVersion: "4204916"
    uid: f6ff3198-3b68-47dd-8a6a-4af8bd3e9a0c
  security-labels:
    k8s:app.kubernetes.io/component: master
    k8s:app.kubernetes.io/instance: argocd
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: redis
    k8s:app.kubernetes.io/version: 7.4.2
    k8s:helm.sh/chart: redis-20.7.0
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: argocd
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: argocd-redis-master
    k8s:io.kubernetes.pod.namespace: argocd
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-02T18:15:15Z"
    generation: 1
    labels:
      app: source-controller
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: source-controller
      io.kubernetes.pod.namespace: flux-system
    name: "27294"
    resourceVersion: "2019"
    uid: d6f53b3f-50f1-45f3-a509-5fab9b530e52
  security-labels:
    k8s:app: source-controller
    k8s:io.cilium.k8s.namespace.labels.app.kubernetes.io/instance: flux-system
    k8s:io.cilium.k8s.namespace.labels.app.kubernetes.io/managed-by: flux-operator
    k8s:io.cilium.k8s.namespace.labels.app.kubernetes.io/part-of: flux
    k8s:io.cilium.k8s.namespace.labels.app.kubernetes.io/version: v2.4.0
    k8s:io.cilium.k8s.namespace.labels.fluxcd.controlplane.io/name: flux
    k8s:io.cilium.k8s.namespace.labels.fluxcd.controlplane.io/namespace: flux-system
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: flux-system
    k8s:io.cilium.k8s.namespace.labels.pod-security.kubernetes.io/warn: restricted
    k8s:io.cilium.k8s.namespace.labels.pod-security.kubernetes.io/warn-version: latest
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: source-controller
    k8s:io.kubernetes.pod.namespace: flux-system
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-02T18:16:02Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: external-dns
      io.kubernetes.pod.namespace: network
    name: "2741"
    resourceVersion: "2841"
    uid: 9a75afbd-bdc9-4b4d-8d49-6c7e9ce2310b
  security-labels:
    k8s:app.kubernetes.io/instance: external-dns
    k8s:app.kubernetes.io/name: external-dns
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: network
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: external-dns
    k8s:io.kubernetes.pod.namespace: network
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T17:18:44Z"
    generation: 1
    labels:
      app: longhorn-csi-plugin
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: longhorn-service-account
      io.kubernetes.pod.namespace: longhorn-system
    name: "27419"
    resourceVersion: "557297"
    uid: 08e2c415-d2e8-4fa2-88ad-7da61216abd5
  security-labels:
    k8s:app: longhorn-csi-plugin
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: longhorn-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: longhorn-service-account
    k8s:io.kubernetes.pod.namespace: longhorn-system
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-10T21:03:04Z"
    generation: 1
    labels:
      app.kubernetes.io/component: trivy
      app.kubernetes.io/instance: harbor-1739221352
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: harbor
      app.kubernetes.io/version: 2.12.2
      helm.sh/chart: harbor-24.3.0
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: default
      io.kubernetes.pod.namespace: default
    name: "29113"
    resourceVersion: "6253729"
    uid: 95d10fbd-da70-4b77-9e90-19a1f07a3813
  security-labels:
    k8s:app.kubernetes.io/component: trivy
    k8s:app.kubernetes.io/instance: harbor-1739221352
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: harbor
    k8s:app.kubernetes.io/version: 2.12.2
    k8s:helm.sh/chart: harbor-24.3.0
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: default
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: default
    k8s:io.kubernetes.pod.namespace: default
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-10T21:59:04Z"
    generation: 1
    labels:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: wordpress-1739224720
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mariadb
      app.kubernetes.io/part-of: mariadb
      app.kubernetes.io/version: 11.4.4
      helm.sh/chart: mariadb-20.2.2
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: wordpress-1739224720-mariadb
      io.kubernetes.pod.namespace: default
    name: "29677"
    resourceVersion: "6288873"
    uid: 56f674fd-f352-4259-99de-c220e93f1a02
  security-labels:
    k8s:app.kubernetes.io/component: primary
    k8s:app.kubernetes.io/instance: wordpress-1739224720
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: mariadb
    k8s:app.kubernetes.io/part-of: mariadb
    k8s:app.kubernetes.io/version: 11.4.4
    k8s:helm.sh/chart: mariadb-20.2.2
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: default
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: wordpress-1739224720-mariadb
    k8s:io.kubernetes.pod.namespace: default
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T17:18:06Z"
    generation: 1
    labels:
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: longhorn-service-account
      io.kubernetes.pod.namespace: longhorn-system
      longhorn.io/component: engine-image
      longhorn.io/engine-image: ei-c2d50bcc
    name: "32126"
    resourceVersion: "556569"
    uid: 2a90158c-e6b6-4672-af1c-609e2d21bca1
  security-labels:
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: longhorn-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: longhorn-service-account
    k8s:io.kubernetes.pod.namespace: longhorn-system
    k8s:longhorn.io/component: engine-image
    k8s:longhorn.io/engine-image: ei-c2d50bcc
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-02T18:16:05Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: metrics-server
      app.kubernetes.io/name: metrics-server
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: metrics-server
      io.kubernetes.pod.namespace: kube-system
    name: "35403"
    resourceVersion: "3011"
    uid: e363febd-8503-4549-9c47-371a1dabd436
  security-labels:
    k8s:app.kubernetes.io/instance: metrics-server
    k8s:app.kubernetes.io/name: metrics-server
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: kube-system
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: metrics-server
    k8s:io.kubernetes.pod.namespace: kube-system
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-10T21:03:08Z"
    generation: 1
    labels:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: harbor-1739221352
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/version: 17.2.0
      helm.sh/chart: postgresql-16.4.3
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: harbor-1739221352-postgresql
      io.kubernetes.pod.namespace: default
    name: "35558"
    resourceVersion: "6253791"
    uid: 13daa8f2-8f74-4392-b9ab-52bdd8af1eb0
  security-labels:
    k8s:app.kubernetes.io/component: primary
    k8s:app.kubernetes.io/instance: harbor-1739221352
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: postgresql
    k8s:app.kubernetes.io/version: 17.2.0
    k8s:helm.sh/chart: postgresql-16.4.3
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: default
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: harbor-1739221352-postgresql
    k8s:io.kubernetes.pod.namespace: default
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-02T18:15:14Z"
    generation: 1
    labels:
      app: helm-controller
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: helm-controller
      io.kubernetes.pod.namespace: flux-system
    name: "35943"
    resourceVersion: "2011"
    uid: dc9cbd89-8b01-4c99-ab9c-12b5907aceb9
  security-labels:
    k8s:app: helm-controller
    k8s:io.cilium.k8s.namespace.labels.app.kubernetes.io/instance: flux-system
    k8s:io.cilium.k8s.namespace.labels.app.kubernetes.io/managed-by: flux-operator
    k8s:io.cilium.k8s.namespace.labels.app.kubernetes.io/part-of: flux
    k8s:io.cilium.k8s.namespace.labels.app.kubernetes.io/version: v2.4.0
    k8s:io.cilium.k8s.namespace.labels.fluxcd.controlplane.io/name: flux
    k8s:io.cilium.k8s.namespace.labels.fluxcd.controlplane.io/namespace: flux-system
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: flux-system
    k8s:io.cilium.k8s.namespace.labels.pod-security.kubernetes.io/warn: restricted
    k8s:io.cilium.k8s.namespace.labels.pod-security.kubernetes.io/warn-version: latest
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: helm-controller
    k8s:io.kubernetes.pod.namespace: flux-system
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-02T18:15:14Z"
    generation: 1
    labels:
      app: notification-controller
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: notification-controller
      io.kubernetes.pod.namespace: flux-system
    name: "3603"
    resourceVersion: "2014"
    uid: 22d7b7de-a8bc-4718-b4dc-dcc8d563021b
  security-labels:
    k8s:app: notification-controller
    k8s:io.cilium.k8s.namespace.labels.app.kubernetes.io/instance: flux-system
    k8s:io.cilium.k8s.namespace.labels.app.kubernetes.io/managed-by: flux-operator
    k8s:io.cilium.k8s.namespace.labels.app.kubernetes.io/part-of: flux
    k8s:io.cilium.k8s.namespace.labels.app.kubernetes.io/version: v2.4.0
    k8s:io.cilium.k8s.namespace.labels.fluxcd.controlplane.io/name: flux
    k8s:io.cilium.k8s.namespace.labels.fluxcd.controlplane.io/namespace: flux-system
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: flux-system
    k8s:io.cilium.k8s.namespace.labels.pod-security.kubernetes.io/warn: restricted
    k8s:io.cilium.k8s.namespace.labels.pod-security.kubernetes.io/warn-version: latest
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: notification-controller
    k8s:io.kubernetes.pod.namespace: flux-system
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T17:18:36Z"
    generation: 1
    labels:
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: longhorn-service-account
      io.kubernetes.pod.namespace: longhorn-system
      longhorn.io/component: instance-manager
      longhorn.io/data-engine: v1
      longhorn.io/instance-manager-image: imi-46d35c0a
      longhorn.io/instance-manager-type: aio
      longhorn.io/managed-by: longhorn-manager
      longhorn.io/node: ldite3
    name: "367"
    resourceVersion: "557070"
    uid: 079e6a8c-2782-4717-a169-51d157e9d740
  security-labels:
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: longhorn-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: longhorn-service-account
    k8s:io.kubernetes.pod.namespace: longhorn-system
    k8s:longhorn.io/component: instance-manager
    k8s:longhorn.io/data-engine: v1
    k8s:longhorn.io/instance-manager-image: imi-46d35c0a
    k8s:longhorn.io/instance-manager-type: aio
    k8s:longhorn.io/managed-by: longhorn-manager
    k8s:longhorn.io/node: ldite3
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T17:18:06Z"
    generation: 1
    labels:
      app: longhorn-manager
      app.kubernetes.io/instance: longhorn-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: longhorn
      app.kubernetes.io/version: v1.8.0
      helm.sh/chart: longhorn-1.8.0
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: longhorn-service-account
      io.kubernetes.pod.namespace: longhorn-system
      longhorn.io/admission-webhook: longhorn-admission-webhook
      longhorn.io/conversion-webhook: longhorn-conversion-webhook
      longhorn.io/recovery-backend: longhorn-recovery-backend
    name: "37918"
    resourceVersion: "556586"
    uid: 022e425d-0b3f-4251-9a04-8a6b375607e0
  security-labels:
    k8s:app: longhorn-manager
    k8s:app.kubernetes.io/instance: longhorn-release
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: longhorn
    k8s:app.kubernetes.io/version: v1.8.0
    k8s:helm.sh/chart: longhorn-1.8.0
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: longhorn-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: longhorn-service-account
    k8s:io.kubernetes.pod.namespace: longhorn-system
    k8s:longhorn.io/admission-webhook: longhorn-admission-webhook
    k8s:longhorn.io/conversion-webhook: longhorn-conversion-webhook
    k8s:longhorn.io/recovery-backend: longhorn-recovery-backend
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T09:20:19Z"
    generation: 1
    labels:
      app.kubernetes.io/component: prometheus
      app.kubernetes.io/instance: kube-prometheus-1738574406-prometheus
      app.kubernetes.io/managed-by: prometheus-operator
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/version: 3.0.1
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: kube-prometheus-1738574406-prometheus
      io.kubernetes.pod.namespace: observability
      operator.prometheus.io/name: kube-prometheus-1738574406-prometheus
      operator.prometheus.io/shard: "0"
      prometheus: kube-prometheus-1738574406-prometheus
    name: "38366"
    resourceVersion: "364027"
    uid: 8c2edb20-baf7-4d7f-ae6e-c83d5ebc3da1
  security-labels:
    k8s:app.kubernetes.io/component: prometheus
    k8s:app.kubernetes.io/instance: kube-prometheus-1738574406-prometheus
    k8s:app.kubernetes.io/managed-by: prometheus-operator
    k8s:app.kubernetes.io/name: prometheus
    k8s:app.kubernetes.io/version: 3.0.1
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: observability
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.namespace.labels.name: observability
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: kube-prometheus-1738574406-prometheus
    k8s:io.kubernetes.pod.namespace: observability
    k8s:operator.prometheus.io/name: kube-prometheus-1738574406-prometheus
    k8s:operator.prometheus.io/shard: "0"
    k8s:prometheus: kube-prometheus-1738574406-prometheus
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-02T18:16:10Z"
    generation: 1
    labels:
      app: localpv-provisioner
      chart: localpv-provisioner-4.1.4
      component: localpv-provisioner
      heritage: Helm
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: openebs-localpv-provisioner
      io.kubernetes.pod.namespace: openebs-system
      name: openebs-localpv-provisioner
      openebs.io/component-name: openebs-localpv-provisioner
      release: openebs
    name: "40633"
    resourceVersion: "3084"
    uid: 89782ee3-fbc0-45b4-96a5-7aae99eef690
  security-labels:
    k8s:app: localpv-provisioner
    k8s:chart: localpv-provisioner-4.1.4
    k8s:component: localpv-provisioner
    k8s:heritage: Helm
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: openebs-system
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: openebs-localpv-provisioner
    k8s:io.kubernetes.pod.namespace: openebs-system
    k8s:name: openebs-localpv-provisioner
    k8s:openebs.io/component-name: openebs-localpv-provisioner
    k8s:release: openebs
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T17:18:44Z"
    generation: 1
    labels:
      app: csi-snapshotter
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: longhorn-service-account
      io.kubernetes.pod.namespace: longhorn-system
    name: "41536"
    resourceVersion: "557305"
    uid: 68cbb3a5-2fd1-40c1-9299-b1b4f2bd23fc
  security-labels:
    k8s:app: csi-snapshotter
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: longhorn-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: longhorn-service-account
    k8s:io.kubernetes.pod.namespace: longhorn-system
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T17:17:42Z"
    generation: 1
    labels:
      app: longhorn-ui
      app.kubernetes.io/instance: longhorn-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: longhorn
      app.kubernetes.io/version: v1.8.0
      helm.sh/chart: longhorn-1.8.0
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: longhorn-ui-service-account
      io.kubernetes.pod.namespace: longhorn-system
    name: "43402"
    resourceVersion: "556089"
    uid: 487e0f16-cf46-40cb-b202-01e7ee8e8be3
  security-labels:
    k8s:app: longhorn-ui
    k8s:app.kubernetes.io/instance: longhorn-release
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: longhorn
    k8s:app.kubernetes.io/version: v1.8.0
    k8s:helm.sh/chart: longhorn-1.8.0
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: longhorn-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: longhorn-ui-service-account
    k8s:io.kubernetes.pod.namespace: longhorn-system
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-02T18:17:31Z"
    generation: 1
    labels:
      app.kubernetes.io/component: echo-server
      app.kubernetes.io/instance: echo-server
      app.kubernetes.io/name: echo-server
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: default
      io.kubernetes.pod.namespace: default
    name: "4363"
    resourceVersion: "4010"
    uid: 9121a30c-f114-4b02-a8d3-9bd241e73a10
  security-labels:
    k8s:app.kubernetes.io/component: echo-server
    k8s:app.kubernetes.io/instance: echo-server
    k8s:app.kubernetes.io/name: echo-server
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: default
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: default
    k8s:io.kubernetes.pod.namespace: default
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-02T18:16:59Z"
    generation: 1
    labels:
      app.kubernetes.io/component: cloudflared
      app.kubernetes.io/instance: cloudflared
      app.kubernetes.io/name: cloudflared
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: default
      io.kubernetes.pod.namespace: network
    name: "43960"
    resourceVersion: "3798"
    uid: 668d46ea-afff-4761-8220-26d713be5de7
  security-labels:
    k8s:app.kubernetes.io/component: cloudflared
    k8s:app.kubernetes.io/instance: cloudflared
    k8s:app.kubernetes.io/name: cloudflared
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: network
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: default
    k8s:io.kubernetes.pod.namespace: network
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T17:18:55Z"
    generation: 1
    labels:
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: longhorn-service-account
      io.kubernetes.pod.namespace: longhorn-system
      longhorn.io/component: instance-manager
      longhorn.io/data-engine: v1
      longhorn.io/instance-manager-image: imi-46d35c0a
      longhorn.io/instance-manager-type: aio
      longhorn.io/managed-by: longhorn-manager
      longhorn.io/node: ldite1
    name: "43999"
    resourceVersion: "557594"
    uid: 776571b3-eddd-4e1b-9e1e-d94d97c0d02e
  security-labels:
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: longhorn-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: longhorn-service-account
    k8s:io.kubernetes.pod.namespace: longhorn-system
    k8s:longhorn.io/component: instance-manager
    k8s:longhorn.io/data-engine: v1
    k8s:longhorn.io/instance-manager-image: imi-46d35c0a
    k8s:longhorn.io/instance-manager-type: aio
    k8s:longhorn.io/managed-by: longhorn-manager
    k8s:longhorn.io/node: ldite1
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T20:56:13Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: wordpress-1738616146
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: wordpress
      app.kubernetes.io/version: 6.7.1
      helm.sh/chart: wordpress-24.1.9
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: wordpress-1738616146
      io.kubernetes.pod.namespace: default
    name: "44362"
    resourceVersion: "663334"
    uid: 3ab859ae-950a-463a-821d-d6a350555334
  security-labels:
    k8s:app.kubernetes.io/instance: wordpress-1738616146
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: wordpress
    k8s:app.kubernetes.io/version: 6.7.1
    k8s:helm.sh/chart: wordpress-24.1.9
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: default
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: wordpress-1738616146
    k8s:io.kubernetes.pod.namespace: default
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-05T19:28:11Z"
    generation: 1
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: cert-manager-cainjector
      io.kubernetes.pod.namespace: cert-manager
    name: "45374"
    resourceVersion: "2053037"
    uid: a346f503-ce4d-4e45-8aee-0c23c748bc9a
  security-labels:
    k8s:app: cainjector
    k8s:app.kubernetes.io/component: cainjector
    k8s:app.kubernetes.io/instance: cert-manager
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: cainjector
    k8s:app.kubernetes.io/version: v1.16.3
    k8s:helm.sh/chart: cert-manager-v1.16.3
    k8s:io.cilium.k8s.namespace.labels.argocd.argoproj.io/instance: ldit-web
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: cert-manager
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.namespace.labels.name: cert-manager
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: cert-manager-cainjector
    k8s:io.kubernetes.pod.namespace: cert-manager
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-10T21:59:06Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: wordpress-1739224720
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: wordpress
      app.kubernetes.io/version: 6.7.1
      helm.sh/chart: wordpress-24.1.9
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: wordpress-1739224720
      io.kubernetes.pod.namespace: default
    name: "45898"
    resourceVersion: "6288907"
    uid: 7e712be1-b5eb-4dab-8764-ae6a0dd11ba4
  security-labels:
    k8s:app.kubernetes.io/instance: wordpress-1739224720
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: wordpress
    k8s:app.kubernetes.io/version: 6.7.1
    k8s:helm.sh/chart: wordpress-24.1.9
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: default
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: wordpress-1739224720
    k8s:io.kubernetes.pod.namespace: default
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T17:18:46Z"
    generation: 1
    labels:
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: longhorn-service-account
      io.kubernetes.pod.namespace: longhorn-system
      longhorn.io/component: instance-manager
      longhorn.io/data-engine: v1
      longhorn.io/instance-manager-image: imi-46d35c0a
      longhorn.io/instance-manager-type: aio
      longhorn.io/managed-by: longhorn-manager
      longhorn.io/node: ldit2
    name: "4655"
    resourceVersion: "557354"
    uid: 4bce2af6-6cb5-42a5-93f9-a81048fd3037
  security-labels:
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: longhorn-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: longhorn-service-account
    k8s:io.kubernetes.pod.namespace: longhorn-system
    k8s:longhorn.io/component: instance-manager
    k8s:longhorn.io/data-engine: v1
    k8s:longhorn.io/instance-manager-image: imi-46d35c0a
    k8s:longhorn.io/instance-manager-type: aio
    k8s:longhorn.io/managed-by: longhorn-manager
    k8s:longhorn.io/node: ldit2
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-08T09:40:56Z"
    generation: 1
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: argocd
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: argo-cd
      app.kubernetes.io/version: 2.14.2
      helm.sh/chart: argo-cd-7.1.10
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: argocd-argo-cd-argocd-server
      io.kubernetes.pod.namespace: argocd
    name: "47680"
    resourceVersion: "4204659"
    uid: 40a9f73a-4494-4763-b007-fd5e555c2b76
  security-labels:
    k8s:app.kubernetes.io/component: server
    k8s:app.kubernetes.io/instance: argocd
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: argo-cd
    k8s:app.kubernetes.io/version: 2.14.2
    k8s:helm.sh/chart: argo-cd-7.1.10
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: argocd
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: argocd-argo-cd-argocd-server
    k8s:io.kubernetes.pod.namespace: argocd
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-05T19:28:11Z"
    generation: 1
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: cert-manager-webhook
      io.kubernetes.pod.namespace: cert-manager
    name: "49471"
    resourceVersion: "2053038"
    uid: 8c4e6c32-ee13-41cb-976a-48dbbac3ff6b
  security-labels:
    k8s:app: webhook
    k8s:app.kubernetes.io/component: webhook
    k8s:app.kubernetes.io/instance: cert-manager
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: webhook
    k8s:app.kubernetes.io/version: v1.16.3
    k8s:helm.sh/chart: cert-manager-v1.16.3
    k8s:io.cilium.k8s.namespace.labels.argocd.argoproj.io/instance: ldit-web
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: cert-manager
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.namespace.labels.name: cert-manager
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: cert-manager-webhook
    k8s:io.kubernetes.pod.namespace: cert-manager
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-08T17:58:49Z"
    generation: 1
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: argowf
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: argo-workflows
      app.kubernetes.io/part-of: argo-workflows
      app.kubernetes.io/version: 3.6.3
      helm.sh/chart: argo-workflows-11.1.6
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: argowf-argo-workflows-server
      io.kubernetes.pod.namespace: argowf
    name: "5067"
    resourceVersion: "4489367"
    uid: ad70b75a-dd2a-4e53-8ca4-09f8eea79c48
  security-labels:
    k8s:app.kubernetes.io/component: server
    k8s:app.kubernetes.io/instance: argowf
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: argo-workflows
    k8s:app.kubernetes.io/part-of: argo-workflows
    k8s:app.kubernetes.io/version: 3.6.3
    k8s:helm.sh/chart: argo-workflows-11.1.6
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: argowf
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: argowf-argo-workflows-server
    k8s:io.kubernetes.pod.namespace: argowf
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-08T09:40:56Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: argocd
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: argo-cd
      app.kubernetes.io/version: 2.14.2
      helm.sh/chart: argo-cd-7.1.10
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: argocd-argo-cd-argocd-app-controller
      io.kubernetes.pod.namespace: argocd
    name: "5079"
    resourceVersion: "4204634"
    uid: 9f60aa61-397e-466d-8f3f-c3c51681e736
  security-labels:
    k8s:app.kubernetes.io/component: controller
    k8s:app.kubernetes.io/instance: argocd
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: argo-cd
    k8s:app.kubernetes.io/version: 2.14.2
    k8s:helm.sh/chart: argo-cd-7.1.10
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: argocd
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: argocd-argo-cd-argocd-app-controller
    k8s:io.kubernetes.pod.namespace: argocd
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-08T17:58:49Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: argowf
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: argo-workflows
      app.kubernetes.io/part-of: argo-workflows
      app.kubernetes.io/version: 3.6.3
      helm.sh/chart: argo-workflows-11.1.6
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: argowf-argo-workflows-controller
      io.kubernetes.pod.namespace: argowf
    name: "5085"
    resourceVersion: "4489366"
    uid: 7511b4dd-11ab-4e11-80e9-1243e318481d
  security-labels:
    k8s:app.kubernetes.io/component: controller
    k8s:app.kubernetes.io/instance: argowf
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: argo-workflows
    k8s:app.kubernetes.io/part-of: argo-workflows
    k8s:app.kubernetes.io/version: 3.6.3
    k8s:helm.sh/chart: argo-workflows-11.1.6
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: argowf
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: argowf-argo-workflows-controller
    k8s:io.kubernetes.pod.namespace: argowf
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-05T17:34:16Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: wordpress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: wordpress
      app.kubernetes.io/version: 6.7.1
      helm.sh/chart: wordpress-24.1.9
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: wordpress
      io.kubernetes.pod.namespace: default
    name: "51503"
    resourceVersion: "1994785"
    uid: 0dee7ffa-faad-4d21-9309-880e4aaaef38
  security-labels:
    k8s:app.kubernetes.io/instance: wordpress
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: wordpress
    k8s:app.kubernetes.io/version: 6.7.1
    k8s:helm.sh/chart: wordpress-24.1.9
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: default
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: wordpress
    k8s:io.kubernetes.pod.namespace: default
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T17:17:42Z"
    generation: 1
    labels:
      app: longhorn-driver-deployer
      app.kubernetes.io/instance: longhorn-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: longhorn
      app.kubernetes.io/version: v1.8.0
      helm.sh/chart: longhorn-1.8.0
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: longhorn-service-account
      io.kubernetes.pod.namespace: longhorn-system
    name: "54480"
    resourceVersion: "556094"
    uid: 72a5c8c0-b559-4f8a-8909-ac0050411c30
  security-labels:
    k8s:app: longhorn-driver-deployer
    k8s:app.kubernetes.io/instance: longhorn-release
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: longhorn
    k8s:app.kubernetes.io/version: v1.8.0
    k8s:helm.sh/chart: longhorn-1.8.0
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: longhorn-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: longhorn-service-account
    k8s:io.kubernetes.pod.namespace: longhorn-system
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-02T18:16:31Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: spegel
      app.kubernetes.io/name: spegel
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: spegel
      io.kubernetes.pod.namespace: kube-system
    name: "57287"
    resourceVersion: "3400"
    uid: dc58aab3-86c5-4f30-98db-43339151fa0f
  security-labels:
    k8s:app.kubernetes.io/instance: spegel
    k8s:app.kubernetes.io/name: spegel
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: kube-system
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: spegel
    k8s:io.kubernetes.pod.namespace: kube-system
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T09:20:19Z"
    generation: 1
    labels:
      alertmanager: kube-prometheus-1738574406-alertmanager
      app.kubernetes.io/component: alertmanager
      app.kubernetes.io/instance: kube-prometheus-1738574406-alertmanager
      app.kubernetes.io/managed-by: prometheus-operator
      app.kubernetes.io/name: alertmanager
      app.kubernetes.io/version: 0.27.0
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: kube-prometheus-1738574406-alertmanager
      io.kubernetes.pod.namespace: observability
    name: "58012"
    resourceVersion: "364025"
    uid: feaf5c81-156b-4000-8730-19f0faf8d7b2
  security-labels:
    k8s:alertmanager: kube-prometheus-1738574406-alertmanager
    k8s:app.kubernetes.io/component: alertmanager
    k8s:app.kubernetes.io/instance: kube-prometheus-1738574406-alertmanager
    k8s:app.kubernetes.io/managed-by: prometheus-operator
    k8s:app.kubernetes.io/name: alertmanager
    k8s:app.kubernetes.io/version: 0.27.0
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: observability
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.namespace.labels.name: observability
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: kube-prometheus-1738574406-alertmanager
    k8s:io.kubernetes.pod.namespace: observability
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T17:18:50Z"
    generation: 1
    labels:
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: longhorn-service-account
      io.kubernetes.pod.namespace: longhorn-system
      longhorn.io/component: instance-manager
      longhorn.io/data-engine: v1
      longhorn.io/instance-manager-image: imi-46d35c0a
      longhorn.io/instance-manager-type: aio
      longhorn.io/managed-by: longhorn-manager
      longhorn.io/node: lditdb
    name: "58502"
    resourceVersion: "557408"
    uid: 13204439-02aa-4aeb-a8b2-763fe7a5c7b1
  security-labels:
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: longhorn-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: longhorn-service-account
    k8s:io.kubernetes.pod.namespace: longhorn-system
    k8s:longhorn.io/component: instance-manager
    k8s:longhorn.io/data-engine: v1
    k8s:longhorn.io/instance-manager-image: imi-46d35c0a
    k8s:longhorn.io/instance-manager-type: aio
    k8s:longhorn.io/managed-by: longhorn-manager
    k8s:longhorn.io/node: lditdb
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-02T18:51:41Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: internal-ingress-nginx
      io.kubernetes.pod.namespace: network
    name: "60013"
    resourceVersion: "15068"
    uid: c0cab47e-0a09-4836-8189-598aa38309c4
  security-labels:
    k8s:app.kubernetes.io/component: controller
    k8s:app.kubernetes.io/instance: internal-ingress-nginx
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: ingress-nginx
    k8s:app.kubernetes.io/part-of: ingress-nginx
    k8s:app.kubernetes.io/version: 1.12.0
    k8s:helm.sh/chart: ingress-nginx-4.12.0
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: network
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: internal-ingress-nginx
    k8s:io.kubernetes.pod.namespace: network
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-10T21:03:08Z"
    generation: 1
    labels:
      app.kubernetes.io/component: master
      app.kubernetes.io/instance: harbor-1739221352
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: redis
      app.kubernetes.io/version: 7.4.2
      helm.sh/chart: redis-20.6.3
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: harbor-1739221352-redis-master
      io.kubernetes.pod.namespace: default
    name: "6523"
    resourceVersion: "6253789"
    uid: 5352382c-25eb-4ee6-b714-aa1e37d24067
  security-labels:
    k8s:app.kubernetes.io/component: master
    k8s:app.kubernetes.io/instance: harbor-1739221352
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: redis
    k8s:app.kubernetes.io/version: 7.4.2
    k8s:helm.sh/chart: redis-20.6.3
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: default
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: harbor-1739221352-redis-master
    k8s:io.kubernetes.pod.namespace: default
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-05T17:34:16Z"
    generation: 1
    labels:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: wordpress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mariadb
      app.kubernetes.io/part-of: mariadb
      app.kubernetes.io/version: 11.4.4
      helm.sh/chart: mariadb-20.2.2
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: wordpress-mariadb
      io.kubernetes.pod.namespace: default
    name: "731"
    resourceVersion: "1994780"
    uid: 5702c9ad-eb23-49c1-9121-ecfda9512604
  security-labels:
    k8s:app.kubernetes.io/component: primary
    k8s:app.kubernetes.io/instance: wordpress
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: mariadb
    k8s:app.kubernetes.io/part-of: mariadb
    k8s:app.kubernetes.io/version: 11.4.4
    k8s:helm.sh/chart: mariadb-20.2.2
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: default
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: wordpress-mariadb
    k8s:io.kubernetes.pod.namespace: default
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-02T18:51:38Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: external-ingress-nginx
      io.kubernetes.pod.namespace: network
    name: "7333"
    resourceVersion: "14985"
    uid: 79648a58-ca7d-4ff4-ad44-9df6ca6487ae
  security-labels:
    k8s:app.kubernetes.io/component: controller
    k8s:app.kubernetes.io/instance: external-ingress-nginx
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: ingress-nginx
    k8s:app.kubernetes.io/part-of: ingress-nginx
    k8s:app.kubernetes.io/version: 1.12.0
    k8s:helm.sh/chart: ingress-nginx-4.12.0
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: network
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: external-ingress-nginx
    k8s:io.kubernetes.pod.namespace: network
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T09:20:15Z"
    generation: 1
    labels:
      app.kubernetes.io/component: blackbox-exporter
      app.kubernetes.io/instance: kube-prometheus-1738574406
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-prometheus
      app.kubernetes.io/version: 0.79.2
      helm.sh/chart: kube-prometheus-10.2.5
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: kube-prometheus-1738574406-blackbox-exporter
      io.kubernetes.pod.namespace: observability
    name: "8422"
    resourceVersion: "363904"
    uid: 24eec2a0-cf7b-4db8-a1b7-4124e8fb312d
  security-labels:
    k8s:app.kubernetes.io/component: blackbox-exporter
    k8s:app.kubernetes.io/instance: kube-prometheus-1738574406
    k8s:app.kubernetes.io/managed-by: Helm
    k8s:app.kubernetes.io/name: kube-prometheus
    k8s:app.kubernetes.io/version: 0.79.2
    k8s:helm.sh/chart: kube-prometheus-10.2.5
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: observability
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/name: cluster-apps
    k8s:io.cilium.k8s.namespace.labels.kustomize.toolkit.fluxcd.io/namespace: flux-system
    k8s:io.cilium.k8s.namespace.labels.name: observability
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: kube-prometheus-1738574406-blackbox-exporter
    k8s:io.kubernetes.pod.namespace: observability
- apiVersion: cilium.io/v2
  kind: CiliumIdentity
  metadata:
    creationTimestamp: "2025-02-03T17:18:44Z"
    generation: 1
    labels:
      app: csi-resizer
      io.cilium.k8s.policy.cluster: default
      io.cilium.k8s.policy.serviceaccount: longhorn-service-account
      io.kubernetes.pod.namespace: longhorn-system
    name: "967"
    resourceVersion: "557302"
    uid: bb6257a8-1658-4dc1-8978-86e2bec031c7
  security-labels:
    k8s:app: csi-resizer
    k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name: longhorn-system
    k8s:io.cilium.k8s.policy.cluster: default
    k8s:io.cilium.k8s.policy.serviceaccount: longhorn-service-account
    k8s:io.kubernetes.pod.namespace: longhorn-system
- apiVersion: cilium.io/v2alpha1
  kind: CiliumL2AnnouncementPolicy
  metadata:
    creationTimestamp: "2025-02-02T18:16:26Z"
    generation: 1
    labels:
      app.kubernetes.io/name: cilium-config
      kustomize.toolkit.fluxcd.io/name: cilium-config
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: l2-policy
    resourceVersion: "3212"
    uid: 68dc5f15-e497-4808-a875-9cb3b65c38f5
  spec:
    loadBalancerIPs: true
    nodeSelector:
      matchLabels:
        kubernetes.io/os: linux
- apiVersion: cilium.io/v2alpha1
  kind: CiliumLoadBalancerIPPool
  metadata:
    creationTimestamp: "2025-02-02T18:16:26Z"
    generation: 1
    labels:
      app.kubernetes.io/name: cilium-config
      kustomize.toolkit.fluxcd.io/name: cilium-config
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: pool
    resourceVersion: "6288416"
    uid: ecfecfba-0f8b-423a-8707-52cc14a5708f
  spec:
    allowFirstLastIPs: "No"
    blocks:
    - cidr: 192.168.20.0/24
    disabled: false
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:16:26Z"
      message: ""
      observedGeneration: 1
      reason: resolved
      status: "False"
      type: cilium.io/PoolConflict
    - lastTransitionTime: "2025-02-02T18:16:26Z"
      message: "256"
      observedGeneration: 1
      reason: noreason
      status: Unknown
      type: cilium.io/IPsTotal
    - lastTransitionTime: "2025-02-02T18:16:26Z"
      message: "245"
      observedGeneration: 1
      reason: noreason
      status: Unknown
      type: cilium.io/IPsAvailable
    - lastTransitionTime: "2025-02-02T18:16:26Z"
      message: "11"
      observedGeneration: 1
      reason: noreason
      status: Unknown
      type: cilium.io/IPsUsed
- apiVersion: cilium.io/v2
  kind: CiliumNode
  metadata:
    creationTimestamp: "2025-02-02T18:13:50Z"
    generation: 10
    labels:
      beta.kubernetes.io/arch: amd64
      beta.kubernetes.io/os: linux
      extensions.talos.dev/amd-ucode: "20250109"
      extensions.talos.dev/amdgpu: 20250109-v1.9.3
      extensions.talos.dev/i915: 20250109-v1.9.3
      extensions.talos.dev/intel-ice-firmware: "20250109"
      extensions.talos.dev/intel-ucode: "20241112"
      extensions.talos.dev/iscsi-tools: v0.1.6
      extensions.talos.dev/modules.dep: 6.12.11-talos
      extensions.talos.dev/util-linux-tools: 2.40.4
      kubernetes.io/arch: amd64
      kubernetes.io/hostname: ldit1
      kubernetes.io/os: linux
      node-role.kubernetes.io/control-plane: ""
      node.kubernetes.io/exclude-from-external-load-balancers: ""
    name: ldit1
    ownerReferences:
    - apiVersion: v1
      kind: Node
      name: ldit1
      uid: 3ef9a61c-5531-4cb3-a0b4-a8d0308d8408
    resourceVersion: "613915"
    uid: 820d83ed-7a9b-4aa1-a8f7-9022f858db47
  spec:
    addresses:
    - ip: 192.168.20.20
      type: InternalIP
    - ip: 10.69.2.136
      type: CiliumInternalIP
    alibaba-cloud: {}
    azure: {}
    bootid: 37171b43-0576-4b65-98b9-7cfdf4ba418f
    encryption: {}
    eni: {}
    health:
      ipv4: 10.69.2.6
    ingress: {}
    ipam:
      podCIDRs:
      - 10.69.2.0/24
      pools: {}
- apiVersion: cilium.io/v2
  kind: CiliumNode
  metadata:
    creationTimestamp: "2025-02-02T18:13:55Z"
    generation: 5
    labels:
      beta.kubernetes.io/arch: amd64
      beta.kubernetes.io/os: linux
      extensions.talos.dev/amd-ucode: "20250109"
      extensions.talos.dev/amdgpu: 20250109-v1.9.3
      extensions.talos.dev/i915: 20250109-v1.9.3
      extensions.talos.dev/intel-ice-firmware: "20250109"
      extensions.talos.dev/intel-ucode: "20241112"
      extensions.talos.dev/iscsi-tools: v0.1.6
      extensions.talos.dev/modules.dep: 6.12.11-talos
      extensions.talos.dev/util-linux-tools: 2.40.4
      kubernetes.io/arch: amd64
      kubernetes.io/hostname: ldit2
      kubernetes.io/os: linux
      node-role.kubernetes.io/control-plane: ""
      node.longhorn.io/create-default-disk: config
    name: ldit2
    ownerReferences:
    - apiVersion: v1
      kind: Node
      name: ldit2
      uid: d1aa63a0-ee4b-4e35-8f1e-99d1387eb318
    resourceVersion: "614246"
    uid: 71397c59-9597-48af-a016-a14cfbbee11f
  spec:
    addresses:
    - ip: 192.168.20.21
      type: InternalIP
    - ip: 10.69.0.40
      type: CiliumInternalIP
    alibaba-cloud: {}
    azure: {}
    bootid: 0f3aa03a-d08b-4331-ae87-a486e4091224
    encryption: {}
    eni: {}
    health:
      ipv4: 10.69.0.161
    ingress: {}
    ipam:
      podCIDRs:
      - 10.69.0.0/24
      pools: {}
- apiVersion: cilium.io/v2
  kind: CiliumNode
  metadata:
    creationTimestamp: "2025-02-02T18:13:42Z"
    generation: 6
    labels:
      beta.kubernetes.io/arch: amd64
      beta.kubernetes.io/os: linux
      extensions.talos.dev/amd-ucode: "20250109"
      extensions.talos.dev/amdgpu: 20250109-v1.9.3
      extensions.talos.dev/i915: 20250109-v1.9.3
      extensions.talos.dev/intel-ice-firmware: "20250109"
      extensions.talos.dev/intel-ucode: "20241112"
      extensions.talos.dev/iscsi-tools: v0.1.6
      extensions.talos.dev/modules.dep: 6.12.11-talos
      extensions.talos.dev/util-linux-tools: 2.40.4
      kubernetes.io/arch: amd64
      kubernetes.io/hostname: lditdb
      kubernetes.io/os: linux
      node.longhorn.io/create-default-disk: config
    name: lditdb
    ownerReferences:
    - apiVersion: v1
      kind: Node
      name: lditdb
      uid: a4172af2-d0ac-4e74-853c-5c066d5eb89f
    resourceVersion: "1284813"
    uid: 539cabde-c481-4fcc-bd9c-288c4f2e9120
  spec:
    addresses:
    - ip: 192.168.20.50
      type: InternalIP
    - ip: 10.69.1.199
      type: CiliumInternalIP
    alibaba-cloud: {}
    azure: {}
    bootid: 5adc4e05-840c-44e6-abc6-def60a79ef5e
    encryption: {}
    eni: {}
    health:
      ipv4: 10.69.1.142
    ingress: {}
    ipam:
      podCIDRs:
      - 10.69.1.0/24
      pools: {}
- apiVersion: cilium.io/v2
  kind: CiliumNode
  metadata:
    creationTimestamp: "2025-02-02T18:13:34Z"
    generation: 4
    labels:
      beta.kubernetes.io/arch: amd64
      beta.kubernetes.io/os: linux
      extensions.talos.dev/amd-ucode: "20250109"
      extensions.talos.dev/amdgpu: 20250109-v1.9.3
      extensions.talos.dev/i915: 20250109-v1.9.3
      extensions.talos.dev/intel-ice-firmware: "20250109"
      extensions.talos.dev/intel-ucode: "20241112"
      extensions.talos.dev/iscsi-tools: v0.1.6
      extensions.talos.dev/modules.dep: 6.12.11-talos
      extensions.talos.dev/util-linux-tools: 2.40.4
      kubernetes.io/arch: amd64
      kubernetes.io/hostname: ldite1
      kubernetes.io/os: linux
      node-role.kubernetes.io/control-plane: ""
      node.kubernetes.io/exclude-from-external-load-balancers: ""
    name: ldite1
    ownerReferences:
    - apiVersion: v1
      kind: Node
      name: ldite1
      uid: 5094814a-de49-4f04-8eea-696a9373c8d6
    resourceVersion: "614477"
    uid: fd0b67d9-ac45-44ad-aa05-f6bb51400d99
  spec:
    addresses:
    - ip: 192.168.20.30
      type: InternalIP
    - ip: 10.69.5.131
      type: CiliumInternalIP
    alibaba-cloud: {}
    azure: {}
    bootid: a355bba4-7d47-44ea-8f4d-7a948d229a86
    encryption: {}
    eni: {}
    health:
      ipv4: 10.69.5.235
    ingress: {}
    ipam:
      podCIDRs:
      - 10.69.5.0/24
      pools: {}
- apiVersion: cilium.io/v2
  kind: CiliumNode
  metadata:
    creationTimestamp: "2025-02-02T18:13:38Z"
    generation: 3
    labels:
      beta.kubernetes.io/arch: amd64
      beta.kubernetes.io/os: linux
      extensions.talos.dev/amd-ucode: "20250109"
      extensions.talos.dev/amdgpu: 20250109-v1.9.3
      extensions.talos.dev/i915: 20250109-v1.9.3
      extensions.talos.dev/intel-ice-firmware: "20250109"
      extensions.talos.dev/intel-ucode: "20241112"
      extensions.talos.dev/iscsi-tools: v0.1.6
      extensions.talos.dev/modules.dep: 6.12.11-talos
      extensions.talos.dev/util-linux-tools: 2.40.4
      kubernetes.io/arch: amd64
      kubernetes.io/hostname: ldite2
      kubernetes.io/os: linux
    name: ldite2
    ownerReferences:
    - apiVersion: v1
      kind: Node
      name: ldite2
      uid: d0af6d97-77a5-469b-acfe-e9fba8b4dc6b
    resourceVersion: "619892"
    uid: f8d67d33-6251-4fb6-acc3-7213940d7d5b
  spec:
    addresses:
    - ip: 192.168.20.31
      type: InternalIP
    - ip: 10.69.3.50
      type: CiliumInternalIP
    alibaba-cloud: {}
    azure: {}
    bootid: ed4b0512-9980-483a-a2a2-3bd431ead324
    encryption: {}
    eni: {}
    health:
      ipv4: 10.69.3.59
    ingress: {}
    ipam:
      podCIDRs:
      - 10.69.3.0/24
      pools: {}
- apiVersion: cilium.io/v2
  kind: CiliumNode
  metadata:
    creationTimestamp: "2025-02-02T18:13:37Z"
    generation: 4
    labels:
      beta.kubernetes.io/arch: amd64
      beta.kubernetes.io/os: linux
      extensions.talos.dev/amd-ucode: "20250109"
      extensions.talos.dev/amdgpu: 20250109-v1.9.3
      extensions.talos.dev/i915: 20250109-v1.9.3
      extensions.talos.dev/intel-ice-firmware: "20250109"
      extensions.talos.dev/intel-ucode: "20241112"
      extensions.talos.dev/iscsi-tools: v0.1.6
      extensions.talos.dev/modules.dep: 6.12.11-talos
      extensions.talos.dev/util-linux-tools: 2.40.4
      kubernetes.io/arch: amd64
      kubernetes.io/hostname: ldite3
      kubernetes.io/os: linux
      node.longhorn.io/create-default-disk: config
    name: ldite3
    ownerReferences:
    - apiVersion: v1
      kind: Node
      name: ldite3
      uid: c2bd72f7-b22a-4ea3-a736-1845770425d1
    resourceVersion: "616001"
    uid: 1f4cbbf5-cffb-4f8d-afe6-da8ff4887ea8
  spec:
    addresses:
    - ip: 192.168.20.32
      type: InternalIP
    - ip: 10.69.4.107
      type: CiliumInternalIP
    alibaba-cloud: {}
    azure: {}
    bootid: 79b599f2-42eb-4ad2-9884-2fa7063072e2
    encryption: {}
    eni: {}
    health:
      ipv4: 10.69.4.214
    ingress: {}
    ipam:
      podCIDRs:
      - 10.69.4.0/24
      pools: {}
- apiVersion: coordination.k8s.io/v1
  kind: Lease
  metadata:
    creationTimestamp: "2025-02-02T18:51:47Z"
    name: external-ingress-nginx-leader
    namespace: network
    resourceVersion: "10550199"
    uid: 297a5952-6ce0-43a3-a1a1-7f60869d9573
  spec:
    acquireTime: "2025-02-03T20:56:28.446227Z"
    holderIdentity: external-ingress-nginx-controller-66d7c6f9f8-fqnzj
    leaseDurationSeconds: 30
    leaseTransitions: 4
    renewTime: "2025-02-15T13:11:06.098416Z"
- apiVersion: coordination.k8s.io/v1
  kind: Lease
  metadata:
    creationTimestamp: "2025-02-02T18:51:53Z"
    name: internal-ingress-nginx-leader
    namespace: network
    resourceVersion: "10550242"
    uid: 3e9ffcdc-d637-4eef-9c24-61b1d9cad326
  spec:
    acquireTime: "2025-02-03T20:15:47.780492Z"
    holderIdentity: internal-ingress-nginx-controller-5d6c6b87d-4gmsx
    leaseDurationSeconds: 30
    leaseTransitions: 4
    renewTime: "2025-02-15T13:11:10.101787Z"
- apiVersion: externaldns.k8s.io/v1alpha1
  kind: DNSEndpoint
  metadata:
    creationTimestamp: "2025-02-02T18:16:56Z"
    generation: 5
    labels:
      app.kubernetes.io/name: cloudflared
      k8slens-edit-resource-version: v1alpha1
      kustomize.toolkit.fluxcd.io/name: cloudflared
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: cloudflared
    namespace: network
    resourceVersion: "8895382"
    uid: 2bf0c55d-9002-4bea-8172-a8e17cb5a007
  spec:
    endpoints:
    - dnsName: external.afamiljen.se
      recordType: CNAME
      targets:
      - 37a98157-0283-44e9-a4c7-0677d9c6a501.cfargotunnel.com
  status:
    observedGeneration: 5
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: FlowSchema
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: catch-all
    resourceVersion: "68"
    uid: 81c10f2f-5caa-4f37-aa11-cbee2cb21802
  spec:
    distinguisherMethod:
      type: ByUser
    matchingPrecedence: 10000
    priorityLevelConfiguration:
      name: catch-all
    rules:
    - nonResourceRules:
      - nonResourceURLs:
        - '*'
        verbs:
        - '*'
      resourceRules:
      - apiGroups:
        - '*'
        clusterScope: true
        namespaces:
        - '*'
        resources:
        - '*'
        verbs:
        - '*'
      subjects:
      - group:
          name: system:unauthenticated
        kind: Group
      - group:
          name: system:authenticated
        kind: Group
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: This FlowSchema references the PriorityLevelConfiguration object named
        "catch-all" and it exists
      reason: Found
      status: "False"
      type: Dangling
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: FlowSchema
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: endpoint-controller
    resourceVersion: "60"
    uid: 01d6f9b1-6e74-44b8-9d79-30655a1ff799
  spec:
    distinguisherMethod:
      type: ByUser
    matchingPrecedence: 150
    priorityLevelConfiguration:
      name: workload-high
    rules:
    - resourceRules:
      - apiGroups:
        - ""
        namespaces:
        - '*'
        resources:
        - endpoints
        verbs:
        - get
        - create
        - update
      subjects:
      - kind: User
        user:
          name: system:kube-controller-manager
      - kind: ServiceAccount
        serviceAccount:
          name: endpoint-controller
          namespace: kube-system
      - kind: ServiceAccount
        serviceAccount:
          name: endpointslicemirroring-controller
          namespace: kube-system
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: This FlowSchema references the PriorityLevelConfiguration object named
        "workload-high" and it exists
      reason: Found
      status: "False"
      type: Dangling
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: FlowSchema
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: exempt
    resourceVersion: "65"
    uid: b2c35543-1cdc-4970-97c4-68a3a0f6ae7f
  spec:
    matchingPrecedence: 1
    priorityLevelConfiguration:
      name: exempt
    rules:
    - nonResourceRules:
      - nonResourceURLs:
        - '*'
        verbs:
        - '*'
      resourceRules:
      - apiGroups:
        - '*'
        clusterScope: true
        namespaces:
        - '*'
        resources:
        - '*'
        verbs:
        - '*'
      subjects:
      - group:
          name: system:masters
        kind: Group
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: This FlowSchema references the PriorityLevelConfiguration object named
        "exempt" and it exists
      reason: Found
      status: "False"
      type: Dangling
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: FlowSchema
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: global-default
    resourceVersion: "64"
    uid: d6cc88d5-7e3e-49b5-a1f3-6bf8f05315f0
  spec:
    distinguisherMethod:
      type: ByUser
    matchingPrecedence: 9900
    priorityLevelConfiguration:
      name: global-default
    rules:
    - nonResourceRules:
      - nonResourceURLs:
        - '*'
        verbs:
        - '*'
      resourceRules:
      - apiGroups:
        - '*'
        clusterScope: true
        namespaces:
        - '*'
        resources:
        - '*'
        verbs:
        - '*'
      subjects:
      - group:
          name: system:unauthenticated
        kind: Group
      - group:
          name: system:authenticated
        kind: Group
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: This FlowSchema references the PriorityLevelConfiguration object named
        "global-default" and it exists
      reason: Found
      status: "False"
      type: Dangling
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: FlowSchema
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: kube-controller-manager
    resourceVersion: "62"
    uid: 3b539407-d23d-4860-ba44-ff5db7b4363e
  spec:
    distinguisherMethod:
      type: ByNamespace
    matchingPrecedence: 800
    priorityLevelConfiguration:
      name: workload-high
    rules:
    - nonResourceRules:
      - nonResourceURLs:
        - '*'
        verbs:
        - '*'
      resourceRules:
      - apiGroups:
        - '*'
        clusterScope: true
        namespaces:
        - '*'
        resources:
        - '*'
        verbs:
        - '*'
      subjects:
      - kind: User
        user:
          name: system:kube-controller-manager
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: This FlowSchema references the PriorityLevelConfiguration object named
        "workload-high" and it exists
      reason: Found
      status: "False"
      type: Dangling
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: FlowSchema
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: kube-scheduler
    resourceVersion: "54"
    uid: c00de34f-dceb-48ad-9b41-85881dda81b5
  spec:
    distinguisherMethod:
      type: ByNamespace
    matchingPrecedence: 800
    priorityLevelConfiguration:
      name: workload-high
    rules:
    - nonResourceRules:
      - nonResourceURLs:
        - '*'
        verbs:
        - '*'
      resourceRules:
      - apiGroups:
        - '*'
        clusterScope: true
        namespaces:
        - '*'
        resources:
        - '*'
        verbs:
        - '*'
      subjects:
      - kind: User
        user:
          name: system:kube-scheduler
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: This FlowSchema references the PriorityLevelConfiguration object named
        "workload-high" and it exists
      reason: Found
      status: "False"
      type: Dangling
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: FlowSchema
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: kube-system-service-accounts
    resourceVersion: "57"
    uid: ba0d0068-8258-4216-92b0-18a86e056d79
  spec:
    distinguisherMethod:
      type: ByNamespace
    matchingPrecedence: 900
    priorityLevelConfiguration:
      name: workload-high
    rules:
    - nonResourceRules:
      - nonResourceURLs:
        - '*'
        verbs:
        - '*'
      resourceRules:
      - apiGroups:
        - '*'
        clusterScope: true
        namespaces:
        - '*'
        resources:
        - '*'
        verbs:
        - '*'
      subjects:
      - kind: ServiceAccount
        serviceAccount:
          name: '*'
          namespace: kube-system
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: This FlowSchema references the PriorityLevelConfiguration object named
        "workload-high" and it exists
      reason: Found
      status: "False"
      type: Dangling
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: FlowSchema
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: probes
    resourceVersion: "67"
    uid: 2508edf0-147c-409e-bdfd-0d9f12d71f3a
  spec:
    matchingPrecedence: 2
    priorityLevelConfiguration:
      name: exempt
    rules:
    - nonResourceRules:
      - nonResourceURLs:
        - /healthz
        - /readyz
        - /livez
        verbs:
        - get
      subjects:
      - group:
          name: system:unauthenticated
        kind: Group
      - group:
          name: system:authenticated
        kind: Group
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: This FlowSchema references the PriorityLevelConfiguration object named
        "exempt" and it exists
      reason: Found
      status: "False"
      type: Dangling
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: FlowSchema
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: service-accounts
    resourceVersion: "66"
    uid: 78ba1cfd-d546-4c19-be54-8112e1c4329f
  spec:
    distinguisherMethod:
      type: ByUser
    matchingPrecedence: 9000
    priorityLevelConfiguration:
      name: workload-low
    rules:
    - nonResourceRules:
      - nonResourceURLs:
        - '*'
        verbs:
        - '*'
      resourceRules:
      - apiGroups:
        - '*'
        clusterScope: true
        namespaces:
        - '*'
        resources:
        - '*'
        verbs:
        - '*'
      subjects:
      - group:
          name: system:serviceaccounts
        kind: Group
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: This FlowSchema references the PriorityLevelConfiguration object named
        "workload-low" and it exists
      reason: Found
      status: "False"
      type: Dangling
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: FlowSchema
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: system-leader-election
    resourceVersion: "49"
    uid: 3a091417-d4cf-46f3-8755-51e3672c0c2e
  spec:
    distinguisherMethod:
      type: ByUser
    matchingPrecedence: 100
    priorityLevelConfiguration:
      name: leader-election
    rules:
    - resourceRules:
      - apiGroups:
        - coordination.k8s.io
        namespaces:
        - '*'
        resources:
        - leases
        verbs:
        - get
        - create
        - update
      subjects:
      - kind: User
        user:
          name: system:kube-controller-manager
      - kind: User
        user:
          name: system:kube-scheduler
      - kind: ServiceAccount
        serviceAccount:
          name: '*'
          namespace: kube-system
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: This FlowSchema references the PriorityLevelConfiguration object named
        "leader-election" and it exists
      reason: Found
      status: "False"
      type: Dangling
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: FlowSchema
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: system-node-high
    resourceVersion: "44"
    uid: 555b9ba0-7f4c-4b09-a299-a0deefdc8595
  spec:
    distinguisherMethod:
      type: ByUser
    matchingPrecedence: 400
    priorityLevelConfiguration:
      name: node-high
    rules:
    - resourceRules:
      - apiGroups:
        - ""
        clusterScope: true
        namespaces:
        - '*'
        resources:
        - nodes
        - nodes/status
        verbs:
        - '*'
      - apiGroups:
        - coordination.k8s.io
        namespaces:
        - '*'
        resources:
        - leases
        verbs:
        - '*'
      subjects:
      - group:
          name: system:nodes
        kind: Group
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: This FlowSchema references the PriorityLevelConfiguration object named
        "node-high" and it exists
      reason: Found
      status: "False"
      type: Dangling
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: FlowSchema
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: system-nodes
    resourceVersion: "42"
    uid: 397354e3-e2cc-4857-846f-ea38ada8402b
  spec:
    distinguisherMethod:
      type: ByUser
    matchingPrecedence: 500
    priorityLevelConfiguration:
      name: system
    rules:
    - nonResourceRules:
      - nonResourceURLs:
        - '*'
        verbs:
        - '*'
      resourceRules:
      - apiGroups:
        - '*'
        clusterScope: true
        namespaces:
        - '*'
        resources:
        - '*'
        verbs:
        - '*'
      subjects:
      - group:
          name: system:nodes
        kind: Group
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: This FlowSchema references the PriorityLevelConfiguration object named
        "system" and it exists
      reason: Found
      status: "False"
      type: Dangling
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: FlowSchema
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: workload-leader-election
    resourceVersion: "52"
    uid: 65b9ec04-ca80-4b32-9c3e-4878cd62bf7f
  spec:
    distinguisherMethod:
      type: ByUser
    matchingPrecedence: 200
    priorityLevelConfiguration:
      name: leader-election
    rules:
    - resourceRules:
      - apiGroups:
        - ""
        namespaces:
        - '*'
        resources:
        - endpoints
        - configmaps
        verbs:
        - get
        - create
        - update
      - apiGroups:
        - coordination.k8s.io
        namespaces:
        - '*'
        resources:
        - leases
        verbs:
        - get
        - create
        - update
      subjects:
      - kind: ServiceAccount
        serviceAccount:
          name: '*'
          namespace: kube-system
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:09:57Z"
      message: This FlowSchema references the PriorityLevelConfiguration object named
        "leader-election" and it exists
      reason: Found
      status: "False"
      type: Dangling
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: PriorityLevelConfiguration
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: catch-all
    resourceVersion: "56"
    uid: 687a0848-966f-43fd-a195-11fba4d09512
  spec:
    limited:
      lendablePercent: 0
      limitResponse:
        type: Reject
      nominalConcurrencyShares: 5
    type: Limited
  status: {}
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: PriorityLevelConfiguration
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: exempt
    resourceVersion: "59"
    uid: d4306e1a-f430-4bfd-a228-2c571a57ab35
  spec:
    exempt:
      lendablePercent: 0
      nominalConcurrencyShares: 0
    type: Exempt
  status: {}
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: PriorityLevelConfiguration
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: global-default
    resourceVersion: "37"
    uid: 6f90daaf-1e60-41fe-b84b-677f832cde45
  spec:
    limited:
      lendablePercent: 50
      limitResponse:
        queuing:
          handSize: 6
          queueLengthLimit: 50
          queues: 128
        type: Queue
      nominalConcurrencyShares: 20
    type: Limited
  status: {}
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: PriorityLevelConfiguration
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: leader-election
    resourceVersion: "23"
    uid: 86cd31ce-79dc-431e-99fe-5c0cfd38aaf5
  spec:
    limited:
      lendablePercent: 0
      limitResponse:
        queuing:
          handSize: 4
          queueLengthLimit: 50
          queues: 16
        type: Queue
      nominalConcurrencyShares: 10
    type: Limited
  status: {}
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: PriorityLevelConfiguration
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: node-high
    resourceVersion: "19"
    uid: 2157721d-d940-40b3-8b9f-c850c64f052f
  spec:
    limited:
      lendablePercent: 25
      limitResponse:
        queuing:
          handSize: 6
          queueLengthLimit: 50
          queues: 64
        type: Queue
      nominalConcurrencyShares: 40
    type: Limited
  status: {}
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: PriorityLevelConfiguration
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: system
    resourceVersion: "11"
    uid: 32fd87ca-eea6-4737-b6c2-71778e45f996
  spec:
    limited:
      lendablePercent: 33
      limitResponse:
        queuing:
          handSize: 6
          queueLengthLimit: 50
          queues: 64
        type: Queue
      nominalConcurrencyShares: 30
    type: Limited
  status: {}
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: PriorityLevelConfiguration
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: workload-high
    resourceVersion: "32"
    uid: ec0b6dae-4963-47e9-b118-37e91541d65f
  spec:
    limited:
      lendablePercent: 50
      limitResponse:
        queuing:
          handSize: 6
          queueLengthLimit: 50
          queues: 128
        type: Queue
      nominalConcurrencyShares: 40
    type: Limited
  status: {}
- apiVersion: flowcontrol.apiserver.k8s.io/v1
  kind: PriorityLevelConfiguration
  metadata:
    annotations:
      apf.kubernetes.io/autoupdate-spec: "true"
    creationTimestamp: "2025-02-02T18:09:57Z"
    generation: 1
    name: workload-low
    resourceVersion: "36"
    uid: 40c0c3bf-667b-4773-b534-14223694f313
  spec:
    limited:
      lendablePercent: 90
      limitResponse:
        queuing:
          handSize: 6
          queueLengthLimit: 50
          queues: 128
        type: Queue
      nominalConcurrencyShares: 100
    type: Limited
  status: {}
- apiVersion: helm.toolkit.fluxcd.io/v2
  kind: HelmRelease
  metadata:
    creationTimestamp: "2025-02-02T18:16:56Z"
    finalizers:
    - finalizers.fluxcd.io
    generation: 1
    labels:
      app.kubernetes.io/name: cloudflared
      k8slens-edit-resource-version: v2
      kustomize.toolkit.fluxcd.io/name: cloudflared
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: cloudflared
    namespace: network
    resourceVersion: "10538339"
    uid: a230c1a6-c777-4ca8-a6a8-d3c6af91c98d
  spec:
    chart:
      spec:
        chart: app-template
        reconcileStrategy: ChartVersion
        sourceRef:
          kind: HelmRepository
          name: bjw-s
          namespace: flux-system
        version: 3.6.1
    install:
      remediation:
        retries: 3
    interval: 30m
    upgrade:
      cleanupOnFail: true
      remediation:
        retries: 3
    values:
      controllers:
        cloudflared:
          annotations:
            reloader.stakater.com/auto: "true"
          containers:
            app:
              args:
              - tunnel
              - --config
              - /etc/cloudflared/config/config.yaml
              - run
              - $(TUNNEL_ID)
              env:
                NO_AUTOUPDATE: true
                TUNNEL_CRED_FILE: /etc/cloudflared/creds/credentials.json
                TUNNEL_ID:
                  valueFrom:
                    secretKeyRef:
                      key: TUNNEL_ID
                      name: cloudflared-secret
                TUNNEL_METRICS: 0.0.0.0:8080
                TUNNEL_ORIGIN_ENABLE_HTTP2: true
                TUNNEL_POST_QUANTUM: true
                TUNNEL_TRANSPORT_PROTOCOL: quic
              image:
                repository: docker.io/cloudflare/cloudflared
                tag: 2025.1.1
              probes:
                liveness:
                  custom: true
                  enabled: true
                  spec:
                    failureThreshold: 3
                    httpGet:
                      path: /ready
                      port: 8080
                    initialDelaySeconds: 0
                    periodSeconds: 10
                    timeoutSeconds: 1
                readiness:
                  custom: true
                  enabled: true
                  spec:
                    failureThreshold: 3
                    httpGet:
                      path: /ready
                      port: 8080
                    initialDelaySeconds: 0
                    periodSeconds: 10
                    timeoutSeconds: 1
              resources:
                limits:
                  memory: 256Mi
                requests:
                  cpu: 10m
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
                readOnlyRootFilesystem: true
          strategy: RollingUpdate
      defaultPodOptions:
        securityContext:
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
      persistence:
        config:
          globalMounts:
          - path: /etc/cloudflared/config/config.yaml
            readOnly: true
            subPath: config.yaml
          name: cloudflared-configmap
          type: configMap
        creds:
          globalMounts:
          - path: /etc/cloudflared/creds/credentials.json
            readOnly: true
            subPath: credentials.json
          name: cloudflared-secret
          type: secret
      service:
        app:
          controller: cloudflared
          ports:
            http:
              port: 8080
      serviceMonitor:
        app:
          endpoints:
          - interval: 1m
            path: /metrics
            port: http
            scheme: http
            scrapeTimeout: 10s
          serviceName: cloudflared
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:17:05Z"
      message: Helm install succeeded for release network/cloudflared.v1 with chart
        app-template@3.6.1
      observedGeneration: 1
      reason: InstallSucceeded
      status: "True"
      type: Ready
    - lastTransitionTime: "2025-02-02T18:17:05Z"
      message: Helm install succeeded for release network/cloudflared.v1 with chart
        app-template@3.6.1
      observedGeneration: 1
      reason: InstallSucceeded
      status: "True"
      type: Released
    helmChart: flux-system/network-cloudflared
    history:
    - chartName: app-template
      chartVersion: 3.6.1
      configDigest: sha256:ab74fcb6d7890b2f137ea386216410a93188ba123f7f81d3b3a15d4a5626e51b
      digest: sha256:685498389c786dc2098953ffba661b75e57bbba8aeb98ed6c53228ef39926020
      firstDeployed: "2025-02-02T18:16:59Z"
      lastDeployed: "2025-02-02T18:16:59Z"
      name: cloudflared
      namespace: network
      status: deployed
      version: 1
    lastAttemptedConfigDigest: sha256:ab74fcb6d7890b2f137ea386216410a93188ba123f7f81d3b3a15d4a5626e51b
    lastAttemptedGeneration: 1
    lastAttemptedReleaseAction: install
    lastAttemptedRevision: 3.6.1
    observedGeneration: 1
    storageNamespace: network
- apiVersion: helm.toolkit.fluxcd.io/v2
  kind: HelmRelease
  metadata:
    creationTimestamp: "2025-02-02T18:15:56Z"
    finalizers:
    - finalizers.fluxcd.io
    generation: 1
    labels:
      app.kubernetes.io/name: external-external-dns
      kustomize.toolkit.fluxcd.io/name: external-external-dns
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: external-dns
    namespace: network
    resourceVersion: "10535861"
    uid: 76fa2f35-fbf1-462a-8786-6baa4e7d5e7b
  spec:
    chart:
      spec:
        chart: external-dns
        reconcileStrategy: ChartVersion
        sourceRef:
          kind: HelmRepository
          name: external-dns
          namespace: flux-system
        version: 1.15.1
    install:
      crds: CreateReplace
      remediation:
        retries: 3
    interval: 30m
    upgrade:
      cleanupOnFail: true
      crds: CreateReplace
      remediation:
        retries: 3
        strategy: rollback
    values:
      domainFilters:
      - afamiljen.se
      env:
      - name: CF_API_TOKEN
        valueFrom:
          secretKeyRef:
            key: api-token
            name: external-dns-secret
      extraArgs:
      - --cloudflare-dns-records-per-page=1000
      - --cloudflare-proxied
      - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
      - --crd-source-kind=DNSEndpoint
      - --events
      - --ignore-ingress-tls-spec
      - --ingress-class=external
      fullnameOverride: external-dns
      podAnnotations:
        secret.reloader.stakater.com/reload: external-dns-secret
      policy: sync
      provider: cloudflare
      serviceMonitor:
        enabled: true
      sources:
      - crd
      - ingress
      txtOwnerId: default
      txtPrefix: k8s.
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:16:30Z"
      message: Helm install succeeded for release network/external-dns.v1 with chart
        external-dns@1.15.1
      observedGeneration: 1
      reason: InstallSucceeded
      status: "True"
      type: Ready
    - lastTransitionTime: "2025-02-02T18:16:30Z"
      message: Helm install succeeded for release network/external-dns.v1 with chart
        external-dns@1.15.1
      observedGeneration: 1
      reason: InstallSucceeded
      status: "True"
      type: Released
    helmChart: flux-system/network-external-dns
    history:
    - appVersion: 0.15.1
      chartName: external-dns
      chartVersion: 1.15.1
      configDigest: sha256:47172c5de0e1ef0f6e1ae5cb1a8a5980d4013f4d2d234b2a7ef2e8d502828bca
      digest: sha256:be752d41dff81c7eaf31baed895147d351cf0bd2458889032acd4a16e846ad11
      firstDeployed: "2025-02-02T18:16:01Z"
      lastDeployed: "2025-02-02T18:16:01Z"
      name: external-dns
      namespace: network
      status: deployed
      version: 1
    lastAttemptedConfigDigest: sha256:47172c5de0e1ef0f6e1ae5cb1a8a5980d4013f4d2d234b2a7ef2e8d502828bca
    lastAttemptedGeneration: 1
    lastAttemptedReleaseAction: install
    lastAttemptedRevision: 1.15.1
    observedGeneration: 1
    storageNamespace: network
- apiVersion: helm.toolkit.fluxcd.io/v2
  kind: HelmRelease
  metadata:
    creationTimestamp: "2025-02-02T18:51:27Z"
    finalizers:
    - finalizers.fluxcd.io
    generation: 2
    labels:
      app.kubernetes.io/name: external-ingress-nginx
      kustomize.toolkit.fluxcd.io/name: external-ingress-nginx
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: external-ingress-nginx
    namespace: network
    resourceVersion: "10544998"
    uid: bde35b64-b97c-4625-96eb-3ae3d5f04cd2
  spec:
    chart:
      spec:
        chart: ingress-nginx
        reconcileStrategy: ChartVersion
        sourceRef:
          kind: HelmRepository
          name: ingress-nginx
          namespace: flux-system
        version: 4.12.0
    dependsOn:
    - name: cloudflared
      namespace: network
    install:
      remediation:
        retries: 3
    interval: 30m
    upgrade:
      cleanupOnFail: true
      remediation:
        retries: 3
    values:
      controller:
        admissionWebhooks:
          objectSelector:
            matchExpressions:
            - key: ingress-class
              operator: In
              values:
              - external
        config:
          allow-snippet-annotations: true
          annotations-risk-level: Critical
          client-body-buffer-size: 100M
          client-body-timeout: 120
          client-header-timeout: 120
          enable-brotli: "true"
          enable-ocsp: "true"
          enable-real-ip: "true"
          force-ssl-redirect: "true"
          hide-headers: Server,X-Powered-By
          hsts-max-age: 31449600
          keep-alive: 120
          keep-alive-requests: 10000
          log-format-escape-json: "true"
          log-format-upstream: |
            {"time": "$time_iso8601", "remote_addr": "$proxy_protocol_addr", "x_forwarded_for": "$proxy_add_x_forwarded_for", "request_id": "$req_id", "remote_user": "$remote_user", "bytes_sent": $bytes_sent, "request_time": $request_time, "status": $status, "vhost": "$host", "request_proto": "$server_protocol", "path": "$uri", "request_query": "$args", "request_length": $request_length, "duration": $request_time,"method": "$request_method", "http_referrer": "$http_referer", "http_user_agent": "$http_user_agent"}
          proxy-body-size: 0
          proxy-buffer-size: 16k
          ssl-protocols: TLSv1.3 TLSv1.2
          use-forwarded-headers: "true"
        extraArgs:
          default-ssl-certificate: cert-manager/afamiljen-se-production-tls
        ingressClassResource:
          controllerValue: k8s.io/external
          default: false
          name: external
        metrics:
          enabled: true
          serviceMonitor:
            enabled: true
            namespaceSelector:
              any: true
        resources:
          limits:
            memory: 500Mi
          requests:
            cpu: 100m
        service:
          annotations:
            external-dns.alpha.kubernetes.io/hostname: external.afamiljen.se
            lbipam.cilium.io/ips: 192.168.20.13
          externalTrafficPolicy: Cluster
      fullnameOverride: external-ingress-nginx
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T22:06:14Z"
      message: Helm upgrade succeeded for release network/external-ingress-nginx.v2
        with chart ingress-nginx@4.12.0
      observedGeneration: 2
      reason: UpgradeSucceeded
      status: "True"
      type: Ready
    - lastTransitionTime: "2025-02-02T22:06:14Z"
      message: Helm upgrade succeeded for release network/external-ingress-nginx.v2
        with chart ingress-nginx@4.12.0
      observedGeneration: 2
      reason: UpgradeSucceeded
      status: "True"
      type: Released
    helmChart: flux-system/network-external-ingress-nginx
    history:
    - appVersion: 1.12.0
      chartName: ingress-nginx
      chartVersion: 4.12.0
      configDigest: sha256:fa437201cc127b0942411fd8c4434b1838de319059ede142159da36bb2201ff1
      digest: sha256:f9ac9d016cc7cf1ae97f1244f95f4dd340428f20836e77b9a376d57903248728
      firstDeployed: "2025-02-02T18:51:29Z"
      lastDeployed: "2025-02-02T22:05:44Z"
      name: external-ingress-nginx
      namespace: network
      status: deployed
      version: 2
    - appVersion: 1.12.0
      chartName: ingress-nginx
      chartVersion: 4.12.0
      configDigest: sha256:2b4962c02d48740c3782bfb7bfa7b1529704bab613c10f5b9e7fe03679181a48
      digest: sha256:6ec32c46dd56aae227a77869a99f1efefccbf13e3441e93c8a25c2d930e8ad30
      firstDeployed: "2025-02-02T18:51:29Z"
      lastDeployed: "2025-02-02T18:51:29Z"
      name: external-ingress-nginx
      namespace: network
      status: superseded
      version: 1
    lastAttemptedConfigDigest: sha256:fa437201cc127b0942411fd8c4434b1838de319059ede142159da36bb2201ff1
    lastAttemptedGeneration: 2
    lastAttemptedReleaseAction: upgrade
    lastAttemptedRevision: 4.12.0
    observedGeneration: 2
    storageNamespace: network
- apiVersion: helm.toolkit.fluxcd.io/v2
  kind: HelmRelease
  metadata:
    creationTimestamp: "2025-02-02T18:51:27Z"
    finalizers:
    - finalizers.fluxcd.io
    generation: 2
    labels:
      app.kubernetes.io/name: internal-ingress-nginx
      kustomize.toolkit.fluxcd.io/name: internal-ingress-nginx
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: internal-ingress-nginx
    namespace: network
    resourceVersion: "10533277"
    uid: 479387a6-473b-4cc6-b633-16745b561fe6
  spec:
    chart:
      spec:
        chart: ingress-nginx
        reconcileStrategy: ChartVersion
        sourceRef:
          kind: HelmRepository
          name: ingress-nginx
          namespace: flux-system
        version: 4.12.0
    install:
      remediation:
        retries: 3
    interval: 30m
    upgrade:
      cleanupOnFail: true
      remediation:
        retries: 3
    values:
      controller:
        admissionWebhooks:
          objectSelector:
            matchExpressions:
            - key: ingress-class
              operator: In
              values:
              - internal
        config:
          allow-snippet-annotations: true
          annotations-risk-level: Critical
          block-user-agents: AdsBot-Google,Amazonbot,anthropic-ai,Applebot-Extended,Bytespider,CCBot,ChatGPT-User,ClaudeBot,Claude-Web,cohere-ai,Diffbot,FacebookBot,FriendlyCrawler,Google-Extended,GoogleOther,GPTBot,img2dataset,omgili,omgilibot,peer39_crawler,peer39_crawler/1.0,PerplexityBot,YouBot,
          client-body-buffer-size: 100M
          client-body-timeout: 120
          client-header-timeout: 120
          enable-brotli: "true"
          enable-ocsp: "true"
          enable-real-ip: "true"
          force-ssl-redirect: "true"
          hide-headers: Server,X-Powered-By
          hsts-max-age: 31449600
          keep-alive: 120
          keep-alive-requests: 10000
          log-format-escape-json: "true"
          log-format-upstream: |
            {"time": "$time_iso8601", "remote_addr": "$proxy_protocol_addr", "x_forwarded_for": "$proxy_add_x_forwarded_for", "request_id": "$req_id", "remote_user": "$remote_user", "bytes_sent": $bytes_sent, "request_time": $request_time, "status": $status, "vhost": "$host", "request_proto": "$server_protocol", "path": "$uri", "request_query": "$args", "request_length": $request_length, "duration": $request_time, "method": "$request_method", "http_referrer": "$http_referer", "http_user_agent": "$http_user_agent"}
          proxy-body-size: 0
          proxy-buffer-size: 16k
          ssl-protocols: TLSv1.3 TLSv1.2
          use-forwarded-headers: "true"
        extraArgs:
          default-ssl-certificate: cert-manager/afamiljen-se-production-tls
        ingressClassResource:
          controllerValue: k8s.io/internal
          default: true
          name: internal
        metrics:
          enabled: true
          serviceMonitor:
            enabled: true
            namespaceSelector:
              any: true
        resources:
          limits:
            memory: 500Mi
          requests:
            cpu: 100m
        service:
          annotations:
            lbipam.cilium.io/ips: 192.168.20.11
          externalTrafficPolicy: Cluster
      fullnameOverride: internal-ingress-nginx
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T22:06:10Z"
      message: Helm upgrade succeeded for release network/internal-ingress-nginx.v2
        with chart ingress-nginx@4.12.0
      observedGeneration: 2
      reason: UpgradeSucceeded
      status: "True"
      type: Ready
    - lastTransitionTime: "2025-02-02T22:06:10Z"
      message: Helm upgrade succeeded for release network/internal-ingress-nginx.v2
        with chart ingress-nginx@4.12.0
      observedGeneration: 2
      reason: UpgradeSucceeded
      status: "True"
      type: Released
    helmChart: flux-system/network-internal-ingress-nginx
    history:
    - appVersion: 1.12.0
      chartName: ingress-nginx
      chartVersion: 4.12.0
      configDigest: sha256:e1d49023e1cc47f3d535860079063448d7becc0142843321917a98f4fac2bbd4
      digest: sha256:b9e89c173a82d4cb187197cc3f58d38ae6220135e896c8fcd1a60dfff4930382
      firstDeployed: "2025-02-02T19:07:31Z"
      lastDeployed: "2025-02-02T22:05:44Z"
      name: internal-ingress-nginx
      namespace: network
      status: deployed
      version: 2
    - appVersion: 1.12.0
      chartName: ingress-nginx
      chartVersion: 4.12.0
      configDigest: sha256:e7b85d3b46330b40b99225a920e6ff6b6b2a4b38064514e75a973267c6853893
      digest: sha256:27e3712a5122036c6b1d39ce99b715ed95696d85ae0427b436ef52a2455f2190
      firstDeployed: "2025-02-02T19:07:31Z"
      lastDeployed: "2025-02-02T19:07:31Z"
      name: internal-ingress-nginx
      namespace: network
      status: superseded
      version: 1
    lastAttemptedConfigDigest: sha256:e1d49023e1cc47f3d535860079063448d7becc0142843321917a98f4fac2bbd4
    lastAttemptedGeneration: 2
    lastAttemptedReleaseAction: upgrade
    lastAttemptedRevision: 4.12.0
    observedGeneration: 2
    storageNamespace: network
- apiVersion: helm.toolkit.fluxcd.io/v2
  kind: HelmRelease
  metadata:
    creationTimestamp: "2025-02-02T18:15:56Z"
    finalizers:
    - finalizers.fluxcd.io
    generation: 1
    labels:
      app.kubernetes.io/name: k8s-gateway
      kustomize.toolkit.fluxcd.io/name: k8s-gateway
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: k8s-gateway
    namespace: network
    resourceVersion: "10544847"
    uid: 3c98251c-8c04-4e18-8c46-becf363f0660
  spec:
    chart:
      spec:
        chart: k8s-gateway
        reconcileStrategy: ChartVersion
        sourceRef:
          kind: HelmRepository
          name: k8s-gateway
          namespace: flux-system
        version: 2.4.0
    install:
      remediation:
        retries: 3
    interval: 30m
    upgrade:
      cleanupOnFail: true
      remediation:
        retries: 3
    values:
      domain: afamiljen.se
      fullnameOverride: k8s-gateway
      service:
        annotations:
          lbipam.cilium.io/ips: 192.168.20.12
        externalTrafficPolicy: Cluster
        port: 53
        type: LoadBalancer
      ttl: 1
      watchedResources:
      - Ingress
      - Service
  status:
    conditions:
    - lastTransitionTime: "2025-02-02T18:16:28Z"
      message: Helm install succeeded for release network/k8s-gateway.v1 with chart
        k8s-gateway@2.4.0
      observedGeneration: 1
      reason: InstallSucceeded
      status: "True"
      type: Ready
    - lastTransitionTime: "2025-02-02T18:16:28Z"
      message: Helm install succeeded for release network/k8s-gateway.v1 with chart
        k8s-gateway@2.4.0
      observedGeneration: 1
      reason: InstallSucceeded
      status: "True"
      type: Released
    helmChart: flux-system/network-k8s-gateway
    history:
    - appVersion: 0.4.0
      chartName: k8s-gateway
      chartVersion: 2.4.0
      configDigest: sha256:bbd2a284af3983078e9032182525608b30d6c1a02f16f07d94eb2b5f2105a11a
      digest: sha256:7f44661782aef264fc870faac3085196112cdfefd894689b4c3c38027a652ee0
      firstDeployed: "2025-02-02T18:16:03Z"
      lastDeployed: "2025-02-02T18:16:03Z"
      name: k8s-gateway
      namespace: network
      status: deployed
      version: 1
    lastAttemptedConfigDigest: sha256:bbd2a284af3983078e9032182525608b30d6c1a02f16f07d94eb2b5f2105a11a
    lastAttemptedGeneration: 1
    lastAttemptedReleaseAction: install
    lastAttemptedRevision: 2.4.0
    observedGeneration: 1
    storageNamespace: network
- apiVersion: metrics.k8s.io/v1beta1
  kind: NodeMetrics
  metadata:
    creationTimestamp: "2025-02-15T13:11:12Z"
    labels:
      beta.kubernetes.io/arch: amd64
      beta.kubernetes.io/os: linux
      extensions.talos.dev/amd-ucode: "20250109"
      extensions.talos.dev/amdgpu: 20250109-v1.9.3
      extensions.talos.dev/i915: 20250109-v1.9.3
      extensions.talos.dev/intel-ice-firmware: "20250109"
      extensions.talos.dev/intel-ucode: "20241112"
      extensions.talos.dev/iscsi-tools: v0.1.6
      extensions.talos.dev/modules.dep: 6.12.11-talos
      extensions.talos.dev/util-linux-tools: 2.40.4
      kubernetes.io/arch: amd64
      kubernetes.io/hostname: ldit1
      kubernetes.io/os: linux
      node-role.kubernetes.io/control-plane: ""
      node.kubernetes.io/exclude-from-external-load-balancers: ""
    name: ldit1
  timestamp: "2025-02-15T13:10:55Z"
  usage:
    cpu: 532035363n
    memory: 4095820Ki
  window: 10.067s
- apiVersion: metrics.k8s.io/v1beta1
  kind: NodeMetrics
  metadata:
    creationTimestamp: "2025-02-15T13:11:12Z"
    labels:
      beta.kubernetes.io/arch: amd64
      beta.kubernetes.io/os: linux
      extensions.talos.dev/amd-ucode: "20250109"
      extensions.talos.dev/amdgpu: 20250109-v1.9.3
      extensions.talos.dev/i915: 20250109-v1.9.3
      extensions.talos.dev/intel-ice-firmware: "20250109"
      extensions.talos.dev/intel-ucode: "20241112"
      extensions.talos.dev/iscsi-tools: v0.1.6
      extensions.talos.dev/modules.dep: 6.12.11-talos
      extensions.talos.dev/util-linux-tools: 2.40.4
      kubernetes.io/arch: amd64
      kubernetes.io/hostname: ldit2
      kubernetes.io/os: linux
      node-role.kubernetes.io/control-plane: ""
      node.longhorn.io/create-default-disk: config
    name: ldit2
  timestamp: "2025-02-15T13:11:00Z"
  usage:
    cpu: 708905802n
    memory: 4274112Ki
  window: 10.117s
- apiVersion: metrics.k8s.io/v1beta1
  kind: NodeMetrics
  metadata:
    creationTimestamp: "2025-02-15T13:11:12Z"
    labels:
      beta.kubernetes.io/arch: amd64
      beta.kubernetes.io/os: linux
      extensions.talos.dev/amd-ucode: "20250109"
      extensions.talos.dev/amdgpu: 20250109-v1.9.3
      extensions.talos.dev/i915: 20250109-v1.9.3
      extensions.talos.dev/intel-ice-firmware: "20250109"
      extensions.talos.dev/intel-ucode: "20241112"
      extensions.talos.dev/iscsi-tools: v0.1.6
      extensions.talos.dev/modules.dep: 6.12.11-talos
      extensions.talos.dev/util-linux-tools: 2.40.4
      kubernetes.io/arch: amd64
      kubernetes.io/hostname: lditdb
      kubernetes.io/os: linux
      node.longhorn.io/create-default-disk: config
    name: lditdb
  timestamp: "2025-02-15T13:10:55Z"
  usage:
    cpu: 392320700n
    memory: 2280108Ki
  window: 10.053s
- apiVersion: metrics.k8s.io/v1beta1
  kind: NodeMetrics
  metadata:
    creationTimestamp: "2025-02-15T13:11:12Z"
    labels:
      beta.kubernetes.io/arch: amd64
      beta.kubernetes.io/os: linux
      extensions.talos.dev/amd-ucode: "20250109"
      extensions.talos.dev/amdgpu: 20250109-v1.9.3
      extensions.talos.dev/i915: 20250109-v1.9.3
      extensions.talos.dev/intel-ice-firmware: "20250109"
      extensions.talos.dev/intel-ucode: "20241112"
      extensions.talos.dev/iscsi-tools: v0.1.6
      extensions.talos.dev/modules.dep: 6.12.11-talos
      extensions.talos.dev/util-linux-tools: 2.40.4
      kubernetes.io/arch: amd64
      kubernetes.io/hostname: ldite1
      kubernetes.io/os: linux
      node-role.kubernetes.io/control-plane: ""
      node.kubernetes.io/exclude-from-external-load-balancers: ""
    name: ldite1
  timestamp: "2025-02-15T13:10:54Z"
  usage:
    cpu: 831363278n
    memory: 7966464Ki
  window: 10.152s
- apiVersion: metrics.k8s.io/v1beta1
  kind: NodeMetrics
  metadata:
    creationTimestamp: "2025-02-15T13:11:12Z"
    labels:
      beta.kubernetes.io/arch: amd64
      beta.kubernetes.io/os: linux
      extensions.talos.dev/amd-ucode: "20250109"
      extensions.talos.dev/amdgpu: 20250109-v1.9.3
      extensions.talos.dev/i915: 20250109-v1.9.3
      extensions.talos.dev/intel-ice-firmware: "20250109"
      extensions.talos.dev/intel-ucode: "20241112"
      extensions.talos.dev/iscsi-tools: v0.1.6
      extensions.talos.dev/modules.dep: 6.12.11-talos
      extensions.talos.dev/util-linux-tools: 2.40.4
      kubernetes.io/arch: amd64
      kubernetes.io/hostname: ldite2
      kubernetes.io/os: linux
    name: ldite2
  timestamp: "2025-02-15T13:10:57Z"
  usage:
    cpu: 609867247n
    memory: 6139188Ki
  window: 10.094s
- apiVersion: metrics.k8s.io/v1beta1
  kind: NodeMetrics
  metadata:
    creationTimestamp: "2025-02-15T13:11:12Z"
    labels:
      beta.kubernetes.io/arch: amd64
      beta.kubernetes.io/os: linux
      extensions.talos.dev/amd-ucode: "20250109"
      extensions.talos.dev/amdgpu: 20250109-v1.9.3
      extensions.talos.dev/i915: 20250109-v1.9.3
      extensions.talos.dev/intel-ice-firmware: "20250109"
      extensions.talos.dev/intel-ucode: "20241112"
      extensions.talos.dev/iscsi-tools: v0.1.6
      extensions.talos.dev/modules.dep: 6.12.11-talos
      extensions.talos.dev/util-linux-tools: 2.40.4
      kubernetes.io/arch: amd64
      kubernetes.io/hostname: ldite3
      kubernetes.io/os: linux
      node.longhorn.io/create-default-disk: config
    name: ldite3
  timestamp: "2025-02-15T13:10:56Z"
  usage:
    cpu: 219946306n
    memory: 3216824Ki
  window: 10.057s
- apiVersion: metrics.k8s.io/v1beta1
  containers:
  - name: app
    usage:
      cpu: 3817006n
      memory: 22040Ki
  kind: PodMetrics
  metadata:
    creationTimestamp: "2025-02-15T13:11:12Z"
    labels:
      app.kubernetes.io/component: cloudflared
      app.kubernetes.io/instance: cloudflared
      app.kubernetes.io/name: cloudflared
      pod-template-hash: 744d6dc766
    name: cloudflared-744d6dc766-8g4bs
    namespace: network
  timestamp: "2025-02-15T13:10:44Z"
  window: 17.252s
- apiVersion: metrics.k8s.io/v1beta1
  containers:
  - name: external-dns
    usage:
      cpu: 1960358n
      memory: 16984Ki
  kind: PodMetrics
  metadata:
    creationTimestamp: "2025-02-15T13:11:12Z"
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      pod-template-hash: 757c77ff69
    name: external-dns-757c77ff69-288ll
    namespace: network
  timestamp: "2025-02-15T13:11:01Z"
  window: 13.496s
- apiVersion: metrics.k8s.io/v1beta1
  containers:
  - name: external-dns
    usage:
      cpu: 488507n
      memory: 21340Ki
  kind: PodMetrics
  metadata:
    creationTimestamp: "2025-02-15T13:11:12Z"
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      pod-template-hash: 757c77ff69
    name: external-dns-757c77ff69-cg42l
    namespace: network
  timestamp: "2025-02-15T13:11:01Z"
  window: 19.447s
- apiVersion: metrics.k8s.io/v1beta1
  containers:
  - name: controller
    usage:
      cpu: 20969583n
      memory: 1443260Ki
  kind: PodMetrics
  metadata:
    creationTimestamp: "2025-02-15T13:11:12Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 66d7c6f9f8
    name: external-ingress-nginx-controller-66d7c6f9f8-8r28d
    namespace: network
  timestamp: "2025-02-15T13:10:43Z"
  window: 20.022s
- apiVersion: metrics.k8s.io/v1beta1
  containers:
  - name: controller
    usage:
      cpu: 5609806n
      memory: 602256Ki
  kind: PodMetrics
  metadata:
    creationTimestamp: "2025-02-15T13:11:12Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 66d7c6f9f8
    name: external-ingress-nginx-controller-66d7c6f9f8-fqnzj
    namespace: network
  timestamp: "2025-02-15T13:10:48Z"
  window: 14.908s
- apiVersion: metrics.k8s.io/v1beta1
  containers:
  - name: controller
    usage:
      cpu: 15897987n
      memory: 1428476Ki
  kind: PodMetrics
  metadata:
    creationTimestamp: "2025-02-15T13:11:12Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 66d7c6f9f8
    name: external-ingress-nginx-controller-66d7c6f9f8-zbb7w
    namespace: network
  timestamp: "2025-02-15T13:11:00Z"
  window: 11.577s
- apiVersion: metrics.k8s.io/v1beta1
  containers:
  - name: controller
    usage:
      cpu: 5198303n
      memory: 556484Ki
  kind: PodMetrics
  metadata:
    creationTimestamp: "2025-02-15T13:11:12Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 5d6c6b87d
    name: internal-ingress-nginx-controller-5d6c6b87d-4gmsx
    namespace: network
  timestamp: "2025-02-15T13:11:01Z"
  window: 11.316s
- apiVersion: metrics.k8s.io/v1beta1
  containers:
  - name: controller
    usage:
      cpu: 15015691n
      memory: 1460564Ki
  kind: PodMetrics
  metadata:
    creationTimestamp: "2025-02-15T13:11:12Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 5d6c6b87d
    name: internal-ingress-nginx-controller-5d6c6b87d-ltfdh
    namespace: network
  timestamp: "2025-02-15T13:10:57Z"
  window: 18.418s
- apiVersion: metrics.k8s.io/v1beta1
  containers:
  - name: controller
    usage:
      cpu: 15960634n
      memory: 1463776Ki
  kind: PodMetrics
  metadata:
    creationTimestamp: "2025-02-15T13:11:12Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 5d6c6b87d
    name: internal-ingress-nginx-controller-5d6c6b87d-m4cvp
    namespace: network
  timestamp: "2025-02-15T13:11:02Z"
  window: 10.212s
- apiVersion: metrics.k8s.io/v1beta1
  containers:
  - name: k8s-gateway
    usage:
      cpu: 2168626n
      memory: 74408Ki
  kind: PodMetrics
  metadata:
    creationTimestamp: "2025-02-15T13:11:12Z"
    labels:
      app.kubernetes.io/instance: k8s-gateway
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: k8s-gateway
      app.kubernetes.io/version: 0.4.0
      helm.sh/chart: k8s-gateway-2.4.0
      pod-template-hash: "5867877686"
    name: k8s-gateway-5867877686-ghpnt
    namespace: network
  timestamp: "2025-02-15T13:10:54Z"
  window: 12.584s
- apiVersion: networking.k8s.io/v1
  kind: IngressClass
  metadata:
    annotations:
      meta.helm.sh/release-name: external-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:51:37Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: external-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: external
    resourceVersion: "14961"
    uid: 09930da0-32ce-4376-bbd8-f6988be43357
  spec:
    controller: k8s.io/external
- apiVersion: networking.k8s.io/v1
  kind: IngressClass
  metadata:
    annotations:
      ingressclass.kubernetes.io/is-default-class: "true"
      meta.helm.sh/release-name: internal-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T19:07:36Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: internal-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: internal
    resourceVersion: "21737"
    uid: e43804af-964f-43c7-8fd0-e41cafbd911e
  spec:
    controller: k8s.io/internal
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: argocd
      meta.helm.sh/release-namespace: argocd
    creationTimestamp: "2025-02-08T09:40:55Z"
    labels:
      app.kubernetes.io/instance: argocd
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: argo-cd
      app.kubernetes.io/version: 2.14.2
      helm.sh/chart: argo-cd-7.1.10
    name: argocd-argo-cd-argocd-app-controller
    resourceVersion: "4204506"
    uid: c94f5d61-a5c1-47a5-a79a-9d470648b490
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: argocd-argo-cd-argocd-app-controller
  subjects:
  - kind: ServiceAccount
    name: argocd-argo-cd-argocd-app-controller
    namespace: argocd
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: argocd
      meta.helm.sh/release-namespace: argocd
    creationTimestamp: "2025-02-08T09:40:55Z"
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: argocd
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: argo-cd
      app.kubernetes.io/version: 2.14.2
      helm.sh/chart: argo-cd-7.1.10
    name: argocd-argo-cd-argocd-server
    resourceVersion: "4204505"
    uid: 06878e41-d62a-4fc7-b73c-d88461787fdb
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: argocd-argo-cd-argocd-server
  subjects:
  - kind: ServiceAccount
    name: argocd-argo-cd-argocd-server
    namespace: argocd
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: argowf
      meta.helm.sh/release-namespace: argowf
    creationTimestamp: "2025-02-08T17:58:48Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: argowf
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: argo-workflows
      app.kubernetes.io/part-of: argo-workflows
      app.kubernetes.io/version: 3.6.3
      helm.sh/chart: argo-workflows-11.1.6
    name: argowf-argo-workflows-argowf-controller
    resourceVersion: "4489262"
    uid: d510f482-8770-403b-abe8-1fe5a5e622a5
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: argowf-argo-workflows-argowf-controller
  subjects:
  - kind: ServiceAccount
    name: argowf-argo-workflows-controller
    namespace: argowf
  - kind: ServiceAccount
    name: argowf-argo-workflows-controller
    namespace: default
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: argowf
      meta.helm.sh/release-namespace: argowf
    creationTimestamp: "2025-02-08T17:58:48Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: argowf
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: argo-workflows
      app.kubernetes.io/version: 3.6.3
      helm.sh/chart: argo-workflows-11.1.6
    name: argowf-argo-workflows-argowf-controller-cluster-template
    resourceVersion: "4489261"
    uid: cb818022-5d54-4fef-a34a-376957895c60
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: argowf-argo-workflows-argowf-controller-cluster-template
  subjects:
  - kind: ServiceAccount
    name: argowf-argo-workflows-controller
    namespace: argowf
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: argowf
      meta.helm.sh/release-namespace: argowf
    creationTimestamp: "2025-02-08T17:58:48Z"
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: argowf
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: argo-workflows
      app.kubernetes.io/part-of: argo-workflows
      app.kubernetes.io/version: 3.6.3
      helm.sh/chart: argo-workflows-11.1.6
    name: argowf-argo-workflows-argowf-server
    resourceVersion: "4489263"
    uid: 4e54fdff-2936-44a7-8f5b-4f60069647cc
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: argowf-argo-workflows-argowf-server
  subjects:
  - kind: ServiceAccount
    name: argowf-argo-workflows-server
    namespace: argowf
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: argowf
      meta.helm.sh/release-namespace: argowf
    creationTimestamp: "2025-02-08T17:58:48Z"
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: argowf
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: argo-workflows
      app.kubernetes.io/part-of: argo-workflows
      app.kubernetes.io/version: 3.6.3
      helm.sh/chart: argo-workflows-11.1.6
    name: argowf-argo-workflows-argowf-server-cluster-template
    resourceVersion: "4489260"
    uid: 42c61483-9a40-4aa3-87dc-42a14b46cede
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: argowf-argo-workflows-argowf-server-cluster-template
  subjects:
  - kind: ServiceAccount
    name: argowf-argo-workflows-server
    namespace: argowf
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-cainjector
    resourceVersion: "2973"
    uid: ff5a306e-6c48-49f8-a6ce-3c901c7af2bf
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cert-manager-cainjector
  subjects:
  - kind: ServiceAccount
    name: cert-manager-cainjector
    namespace: cert-manager
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: cert-manager
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-controller-approve:cert-manager-io
    resourceVersion: "2984"
    uid: ada3128b-2d43-4cac-ac46-7634adaff5ee
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cert-manager-controller-approve:cert-manager-io
  subjects:
  - kind: ServiceAccount
    name: cert-manager
    namespace: cert-manager
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-controller-certificates
    resourceVersion: "2978"
    uid: ac908a0e-aed5-44c1-aed1-5a572f477077
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cert-manager-controller-certificates
  subjects:
  - kind: ServiceAccount
    name: cert-manager
    namespace: cert-manager
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: cert-manager
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-controller-certificatesigningrequests
    resourceVersion: "2985"
    uid: 642b92be-94ee-40ae-bff4-5b877b1d0432
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cert-manager-controller-certificatesigningrequests
  subjects:
  - kind: ServiceAccount
    name: cert-manager
    namespace: cert-manager
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-controller-challenges
    resourceVersion: "2980"
    uid: 62704c32-42e9-4989-8c0a-880886965213
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cert-manager-controller-challenges
  subjects:
  - kind: ServiceAccount
    name: cert-manager
    namespace: cert-manager
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-controller-clusterissuers
    resourceVersion: "2977"
    uid: f6f2fb5a-fc8b-4367-bfc4-4f426464c409
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cert-manager-controller-clusterissuers
  subjects:
  - kind: ServiceAccount
    name: cert-manager
    namespace: cert-manager
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-controller-ingress-shim
    resourceVersion: "2982"
    uid: 378f0a5e-5cdf-4e49-9e9e-93932146b22e
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cert-manager-controller-ingress-shim
  subjects:
  - kind: ServiceAccount
    name: cert-manager
    namespace: cert-manager
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-controller-issuers
    resourceVersion: "2976"
    uid: 09eabe17-0618-4876-8f64-d3273ec084d7
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cert-manager-controller-issuers
  subjects:
  - kind: ServiceAccount
    name: cert-manager
    namespace: cert-manager
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-controller-orders
    resourceVersion: "2979"
    uid: 194c3db2-9077-4b36-852e-c5a899bf788f
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cert-manager-controller-orders
  subjects:
  - kind: ServiceAccount
    name: cert-manager
    namespace: cert-manager
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-webhook:subjectaccessreviews
    resourceVersion: "2986"
    uid: 67d5ae93-0ace-40c9-9adc-07324ccaaf14
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cert-manager-webhook:subjectaccessreviews
  subjects:
  - kind: ServiceAccount
    name: cert-manager-webhook
    namespace: cert-manager
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-02-02T18:13:02Z"
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: cilium
      helm.toolkit.fluxcd.io/name: cilium
      helm.toolkit.fluxcd.io/namespace: kube-system
    name: cilium
    resourceVersion: "2821"
    uid: 384caa36-da32-4b4a-9a61-988128858c81
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cilium
  subjects:
  - kind: ServiceAccount
    name: cilium
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-02-02T18:13:02Z"
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: cilium
      helm.toolkit.fluxcd.io/name: cilium
      helm.toolkit.fluxcd.io/namespace: kube-system
    name: cilium-operator
    resourceVersion: "2823"
    uid: 8d9d3839-b30b-4819-b3e7-0871c3d1da85
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cilium-operator
  subjects:
  - kind: ServiceAccount
    name: cilium-operator
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: cluster-admin
    resourceVersion: "138"
    uid: 95dcf2cc-ee33-4486-ad69-1c2249879e52
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cluster-admin
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:masters
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      kustomize.toolkit.fluxcd.io/ssa: Ignore
    creationTimestamp: "2025-02-02T18:15:14Z"
    labels:
      app.kubernetes.io/instance: flux-system
      app.kubernetes.io/managed-by: flux-operator
      app.kubernetes.io/part-of: flux
      app.kubernetes.io/version: v2.4.0
      fluxcd.controlplane.io/name: flux
      fluxcd.controlplane.io/namespace: flux-system
    name: cluster-reconciler-flux-system
    resourceVersion: "1931"
    uid: be9095ae-6a27-4921-853f-271121d3680a
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cluster-admin
  subjects:
  - kind: ServiceAccount
    name: kustomize-controller
    namespace: flux-system
  - kind: ServiceAccount
    name: helm-controller
    namespace: flux-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: coredns
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-02-02T18:13:47Z"
    labels:
      app.kubernetes.io/instance: coredns
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: coredns
      helm.sh/chart: coredns-1.39.0
      helm.toolkit.fluxcd.io/name: coredns
      helm.toolkit.fluxcd.io/namespace: kube-system
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: CoreDNS
    name: coredns
    resourceVersion: "2769"
    uid: 83b0aa50-20a7-4fff-8a60-afb18b457061
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: coredns
  subjects:
  - kind: ServiceAccount
    name: coredns
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      kustomize.toolkit.fluxcd.io/ssa: Ignore
    creationTimestamp: "2025-02-02T18:15:14Z"
    labels:
      app.kubernetes.io/instance: flux-system
      app.kubernetes.io/managed-by: flux-operator
      app.kubernetes.io/part-of: flux
      app.kubernetes.io/version: v2.4.0
      fluxcd.controlplane.io/name: flux
      fluxcd.controlplane.io/namespace: flux-system
    name: crd-controller-flux-system
    resourceVersion: "1935"
    uid: 0d030faf-32ae-47bb-a977-f02d3bb973b8
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: crd-controller-flux-system
  subjects:
  - kind: ServiceAccount
    name: kustomize-controller
    namespace: flux-system
  - kind: ServiceAccount
    name: helm-controller
    namespace: flux-system
  - kind: ServiceAccount
    name: source-controller
    namespace: flux-system
  - kind: ServiceAccount
    name: notification-controller
    namespace: flux-system
  - kind: ServiceAccount
    name: image-reflector-controller
    namespace: flux-system
  - kind: ServiceAccount
    name: image-automation-controller
    namespace: flux-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: external-dns
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:16:01Z"
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: external-dns
      app.kubernetes.io/version: 0.15.1
      helm.sh/chart: external-dns-1.15.1
      helm.toolkit.fluxcd.io/name: external-dns
      helm.toolkit.fluxcd.io/namespace: network
    name: external-dns-viewer
    resourceVersion: "2795"
    uid: 33a26949-af85-4f23-94fd-115f60428ad9
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: external-dns
  subjects:
  - kind: ServiceAccount
    name: external-dns
    namespace: network
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: external-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:51:37Z"
    labels:
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: external-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: external-ingress-nginx
    resourceVersion: "14942"
    uid: 3f6857cf-2b05-416d-8e4a-2b363d2729b1
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: external-ingress-nginx
  subjects:
  - kind: ServiceAccount
    name: external-ingress-nginx
    namespace: network
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: flux-operator
      meta.helm.sh/release-namespace: flux-system
    creationTimestamp: "2025-02-02T18:14:46Z"
    labels:
      app.kubernetes.io/instance: flux-operator
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: flux-operator
      app.kubernetes.io/version: v0.13.0
      helm.sh/chart: flux-operator-0.13.0
      helm.toolkit.fluxcd.io/name: flux-operator
      helm.toolkit.fluxcd.io/namespace: flux-system
    name: flux-operator
    resourceVersion: "2861"
    uid: f8d82e18-dded-4e36-82b7-5a12df0f6a7f
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cluster-admin
  subjects:
  - kind: ServiceAccount
    name: flux-operator
    namespace: flux-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: internal-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T19:07:36Z"
    labels:
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: internal-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: internal-ingress-nginx
    resourceVersion: "21718"
    uid: 08f4bd45-1ff8-41c8-88da-ec158d7a4a62
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: internal-ingress-nginx
  subjects:
  - kind: ServiceAccount
    name: internal-ingress-nginx
    namespace: network
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: k8s-gateway
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:16:03Z"
    labels:
      app.kubernetes.io/instance: k8s-gateway
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: k8s-gateway
      app.kubernetes.io/version: 0.4.0
      helm.sh/chart: k8s-gateway-2.4.0
      helm.toolkit.fluxcd.io/name: k8s-gateway
      helm.toolkit.fluxcd.io/namespace: network
    name: k8s-gateway
    resourceVersion: "2893"
    uid: c95caadf-21ab-4c1d-8deb-5aae40e3afce
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: k8s-gateway
  subjects:
  - kind: ServiceAccount
    name: k8s-gateway
    namespace: network
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: kube-prometheus-1738574406
      meta.helm.sh/release-namespace: observability
    creationTimestamp: "2025-02-03T09:20:14Z"
    labels:
      app.kubernetes.io/instance: kube-prometheus-1738574406
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-state-metrics
      app.kubernetes.io/version: 2.14.0
      helm.sh/chart: kube-state-metrics-4.3.3
    name: kube-prometheus-1738574406-kube-state-metrics-observability
    resourceVersion: "363768"
    uid: 31a21b19-4b6a-410e-b8d0-ac7c5890e3cf
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: kube-prometheus-1738574406-kube-state-metrics-observability
  subjects:
  - kind: ServiceAccount
    name: kube-prometheus-1738574406-kube-state-metrics
    namespace: observability
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: kube-prometheus-1738574406
      meta.helm.sh/release-namespace: observability
    creationTimestamp: "2025-02-03T09:20:14Z"
    labels:
      app.kubernetes.io/component: operator
      app.kubernetes.io/instance: kube-prometheus-1738574406
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-prometheus
      app.kubernetes.io/version: 0.79.2
      helm.sh/chart: kube-prometheus-10.2.5
    name: kube-prometheus-1738574406-operator
    resourceVersion: "363769"
    uid: edcde249-2e8a-4799-b67f-befc1bb4e25b
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: kube-prometheus-1738574406-operator
  subjects:
  - kind: ServiceAccount
    name: kube-prometheus-1738574406-operator
    namespace: observability
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: kube-prometheus-1738574406
      meta.helm.sh/release-namespace: observability
    creationTimestamp: "2025-02-03T09:20:14Z"
    labels:
      app.kubernetes.io/component: prometheus
      app.kubernetes.io/instance: kube-prometheus-1738574406
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-prometheus
      app.kubernetes.io/version: 0.79.2
      helm.sh/chart: kube-prometheus-10.2.5
    name: kube-prometheus-1738574406-prometheus
    resourceVersion: "363767"
    uid: 62c7ec91-07ec-460b-a367-f65eedf2040b
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: kube-prometheus-1738574406-prometheus
  subjects:
  - kind: ServiceAccount
    name: kube-prometheus-1738574406-prometheus
    namespace: observability
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: longhorn-release
      meta.helm.sh/release-namespace: longhorn-system
    creationTimestamp: "2025-02-03T17:17:41Z"
    labels:
      app.kubernetes.io/instance: longhorn-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: longhorn
      app.kubernetes.io/version: v1.8.0
      helm.sh/chart: longhorn-1.8.0
      helm.toolkit.fluxcd.io/name: longhorn-release
      helm.toolkit.fluxcd.io/namespace: longhorn-system
    name: longhorn-bind
    resourceVersion: "555958"
    uid: cad77ba7-457a-4190-bd5c-a03f2d394b37
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: longhorn-role
  subjects:
  - kind: ServiceAccount
    name: longhorn-service-account
    namespace: longhorn-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: longhorn-release
      meta.helm.sh/release-namespace: longhorn-system
    creationTimestamp: "2025-02-03T17:17:41Z"
    labels:
      app.kubernetes.io/instance: longhorn-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: longhorn
      app.kubernetes.io/version: v1.8.0
      helm.sh/chart: longhorn-1.8.0
      helm.toolkit.fluxcd.io/name: longhorn-release
      helm.toolkit.fluxcd.io/namespace: longhorn-system
    name: longhorn-support-bundle
    resourceVersion: "555957"
    uid: 5bd3087f-faee-4986-8a70-bf806202119d
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cluster-admin
  subjects:
  - kind: ServiceAccount
    name: longhorn-support-bundle
    namespace: longhorn-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: metrics-server
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-02-02T18:16:04Z"
    labels:
      app.kubernetes.io/instance: metrics-server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: metrics-server
      app.kubernetes.io/version: 0.7.2
      helm.sh/chart: metrics-server-3.12.2
      helm.toolkit.fluxcd.io/name: metrics-server
      helm.toolkit.fluxcd.io/namespace: kube-system
    name: metrics-server:system:auth-delegator
    resourceVersion: "2941"
    uid: a5c9e607-8f6f-494f-ba67-95525897b4c7
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:auth-delegator
  subjects:
  - kind: ServiceAccount
    name: metrics-server
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: openebs
      meta.helm.sh/release-namespace: openebs-system
    creationTimestamp: "2025-02-02T18:16:09Z"
    labels:
      app: localpv-provisioner
      app.kubernetes.io/managed-by: Helm
      chart: localpv-provisioner-4.1.4
      component: localpv-provisioner
      helm.toolkit.fluxcd.io/name: openebs
      helm.toolkit.fluxcd.io/namespace: openebs-system
      heritage: Helm
      openebs.io/component-name: openebs-localpv-provisioner
      release: openebs
    name: openebs-localpv-provisioner
    resourceVersion: "3069"
    uid: add55839-0e59-4b5c-8504-c4a94ca507a4
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: openebs-localpv-provisioner
  subjects:
  - kind: ServiceAccount
    name: openebs-localpv-provisioner
    namespace: openebs-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: reloader
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-02-02T18:16:28Z"
    labels:
      app: reloader
      app.kubernetes.io/managed-by: Helm
      chart: reloader-1.2.1
      helm.toolkit.fluxcd.io/name: reloader
      helm.toolkit.fluxcd.io/namespace: kube-system
      heritage: Helm
      release: reloader
    name: reloader-role-binding
    resourceVersion: "3284"
    uid: 2a2972f1-5803-445c-8c4e-b9f15d743cba
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: reloader-role
  subjects:
  - kind: ServiceAccount
    name: reloader
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    creationTimestamp: "2025-02-02T18:10:29Z"
    name: system-bootstrap-approve-node-client-csr
    resourceVersion: "217"
    uid: a5f584d1-3f73-4c7c-a48b-33608c94e764
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:certificates.k8s.io:certificatesigningrequests:nodeclient
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:bootstrappers:nodes
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    creationTimestamp: "2025-02-02T18:10:29Z"
    name: system-bootstrap-node-bootstrapper
    resourceVersion: "218"
    uid: e4644ad3-edbf-4363-95c9-2e2a4e0771e5
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:node-bootstrapper
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:bootstrappers:nodes
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:nodes
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    creationTimestamp: "2025-02-02T18:10:29Z"
    name: system-bootstrap-node-renewal
    resourceVersion: "219"
    uid: 9828a339-4771-45df-a94b-937e5ea6e757
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:certificates.k8s.io:certificatesigningrequests:selfnodeclient
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:nodes
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:basic-user
    resourceVersion: "141"
    uid: 847e4364-00d1-4090-8abb-87cfe39e47fd
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:basic-user
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:authenticated
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:attachdetach-controller
    resourceVersion: "150"
    uid: 5e7bdc7d-5667-4154-894e-fdb1f737ed87
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:attachdetach-controller
  subjects:
  - kind: ServiceAccount
    name: attachdetach-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:certificate-controller
    resourceVersion: "176"
    uid: a8301029-2c15-4d79-bb48-2b984b31cdee
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:certificate-controller
  subjects:
  - kind: ServiceAccount
    name: certificate-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:clusterrole-aggregation-controller
    resourceVersion: "151"
    uid: 6358d545-f96e-4903-a0c4-c3f6669c1fe1
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:clusterrole-aggregation-controller
  subjects:
  - kind: ServiceAccount
    name: clusterrole-aggregation-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:cronjob-controller
    resourceVersion: "152"
    uid: 3eac8a40-43ac-4238-824f-ca80dfd28cb6
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:cronjob-controller
  subjects:
  - kind: ServiceAccount
    name: cronjob-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:daemon-set-controller
    resourceVersion: "153"
    uid: 4d7e8795-2dba-4830-b2d1-098502606e8d
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:daemon-set-controller
  subjects:
  - kind: ServiceAccount
    name: daemon-set-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:deployment-controller
    resourceVersion: "154"
    uid: 209575a4-76b9-4a88-b2de-8f8a3b838c0c
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:deployment-controller
  subjects:
  - kind: ServiceAccount
    name: deployment-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:disruption-controller
    resourceVersion: "155"
    uid: 6231e61a-153a-4fc9-9726-45b788b67797
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:disruption-controller
  subjects:
  - kind: ServiceAccount
    name: disruption-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:endpoint-controller
    resourceVersion: "156"
    uid: 5f82b03c-e771-4e4c-a9a6-6fd7ae952d31
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:endpoint-controller
  subjects:
  - kind: ServiceAccount
    name: endpoint-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:endpointslice-controller
    resourceVersion: "157"
    uid: 8920f403-777f-41e2-a763-07b12c00dec7
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:endpointslice-controller
  subjects:
  - kind: ServiceAccount
    name: endpointslice-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:endpointslicemirroring-controller
    resourceVersion: "158"
    uid: 01f12f3a-da26-45b1-a457-cad14f976c0e
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:endpointslicemirroring-controller
  subjects:
  - kind: ServiceAccount
    name: endpointslicemirroring-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:ephemeral-volume-controller
    resourceVersion: "160"
    uid: 701bb609-9ab3-47ab-ab20-2bd2b7ab785a
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:ephemeral-volume-controller
  subjects:
  - kind: ServiceAccount
    name: ephemeral-volume-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:expand-controller
    resourceVersion: "159"
    uid: b168e45f-66a6-4f29-8183-c40b01c2afe8
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:expand-controller
  subjects:
  - kind: ServiceAccount
    name: expand-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:generic-garbage-collector
    resourceVersion: "161"
    uid: 82c384dd-7f8a-4fbe-9fb4-d62dd7b43219
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:generic-garbage-collector
  subjects:
  - kind: ServiceAccount
    name: generic-garbage-collector
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:horizontal-pod-autoscaler
    resourceVersion: "162"
    uid: 49bc95e8-948c-473c-9a13-3265bce9e613
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:horizontal-pod-autoscaler
  subjects:
  - kind: ServiceAccount
    name: horizontal-pod-autoscaler
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:job-controller
    resourceVersion: "163"
    uid: 14aa02e7-6e39-45ff-aa27-2da7cb7bfae5
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:job-controller
  subjects:
  - kind: ServiceAccount
    name: job-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:legacy-service-account-token-cleaner
    resourceVersion: "182"
    uid: e34786df-1c3b-4c50-b23c-ba8ab7239f5d
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:legacy-service-account-token-cleaner
  subjects:
  - kind: ServiceAccount
    name: legacy-service-account-token-cleaner
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:namespace-controller
    resourceVersion: "164"
    uid: 40c796a8-1b42-45ba-b7c1-2dd2317ba936
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:namespace-controller
  subjects:
  - kind: ServiceAccount
    name: namespace-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:node-controller
    resourceVersion: "165"
    uid: 7c32e558-4c7b-43c8-9c16-5a261c100da7
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:node-controller
  subjects:
  - kind: ServiceAccount
    name: node-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:persistent-volume-binder
    resourceVersion: "166"
    uid: 974dfc9a-5158-43c3-be41-f26e77638ae3
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:persistent-volume-binder
  subjects:
  - kind: ServiceAccount
    name: persistent-volume-binder
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:pod-garbage-collector
    resourceVersion: "167"
    uid: 1148dc28-12b9-4d27-a803-e4b0a6b6cd31
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:pod-garbage-collector
  subjects:
  - kind: ServiceAccount
    name: pod-garbage-collector
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:pv-protection-controller
    resourceVersion: "178"
    uid: adce3b17-2892-4657-940e-337fe705e94f
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:pv-protection-controller
  subjects:
  - kind: ServiceAccount
    name: pv-protection-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:pvc-protection-controller
    resourceVersion: "177"
    uid: ca7b5236-57f5-4ce0-8461-ec22ec8e402a
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:pvc-protection-controller
  subjects:
  - kind: ServiceAccount
    name: pvc-protection-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:replicaset-controller
    resourceVersion: "168"
    uid: 82672ff2-6236-4558-be26-d60063a20817
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:replicaset-controller
  subjects:
  - kind: ServiceAccount
    name: replicaset-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:replication-controller
    resourceVersion: "169"
    uid: 5c1057e4-26dd-46c8-ad56-13fecbf01675
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:replication-controller
  subjects:
  - kind: ServiceAccount
    name: replication-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:resourcequota-controller
    resourceVersion: "170"
    uid: fa7bf53e-cca6-447b-9de4-102bf356f348
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:resourcequota-controller
  subjects:
  - kind: ServiceAccount
    name: resourcequota-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:root-ca-cert-publisher
    resourceVersion: "180"
    uid: a16fc3c0-9c36-404d-9a47-68ce41cc22d0
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:root-ca-cert-publisher
  subjects:
  - kind: ServiceAccount
    name: root-ca-cert-publisher
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:route-controller
    resourceVersion: "171"
    uid: 81c804e7-eb57-45a0-8d33-5f2092de7b54
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:route-controller
  subjects:
  - kind: ServiceAccount
    name: route-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:service-account-controller
    resourceVersion: "172"
    uid: 737710af-3de9-44f7-bcfc-9fbf93814443
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:service-account-controller
  subjects:
  - kind: ServiceAccount
    name: service-account-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:service-controller
    resourceVersion: "173"
    uid: 884750dd-41c6-4734-afa2-e8ab949877d2
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:service-controller
  subjects:
  - kind: ServiceAccount
    name: service-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:statefulset-controller
    resourceVersion: "174"
    uid: 056f3bc2-cbf8-444d-bd1d-1a9f91b15330
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:statefulset-controller
  subjects:
  - kind: ServiceAccount
    name: statefulset-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:ttl-after-finished-controller
    resourceVersion: "179"
    uid: 29087b9d-43ab-41f0-b994-0f088c02f677
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:ttl-after-finished-controller
  subjects:
  - kind: ServiceAccount
    name: ttl-after-finished-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:ttl-controller
    resourceVersion: "175"
    uid: 2340e6a7-20c5-439a-b3b6-d81401a76e26
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:ttl-controller
  subjects:
  - kind: ServiceAccount
    name: ttl-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:59Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:validatingadmissionpolicy-status-controller
    resourceVersion: "181"
    uid: cae14fde-3ac8-4857-a55f-91f67d77db3c
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:controller:validatingadmissionpolicy-status-controller
  subjects:
  - kind: ServiceAccount
    name: validatingadmissionpolicy-status-controller
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:discovery
    resourceVersion: "140"
    uid: 6e505680-7b6c-47bf-8133-9e682307c425
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:discovery
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:authenticated
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:kube-controller-manager
    resourceVersion: "144"
    uid: ce6d0e08-c537-40f8-9e05-f1e90b4c09e2
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:kube-controller-manager
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: system:kube-controller-manager
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:kube-dns
    resourceVersion: "145"
    uid: 0992e9a6-557d-486a-8410-c13a26bd6950
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:kube-dns
  subjects:
  - kind: ServiceAccount
    name: kube-dns
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:kube-scheduler
    resourceVersion: "146"
    uid: 2490a2b6-3b1d-4c4e-9574-890536a01cac
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:kube-scheduler
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: system:kube-scheduler
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: metrics-server
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-02-02T18:16:04Z"
    labels:
      app.kubernetes.io/instance: metrics-server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: metrics-server
      app.kubernetes.io/version: 0.7.2
      helm.sh/chart: metrics-server-3.12.2
      helm.toolkit.fluxcd.io/name: metrics-server
      helm.toolkit.fluxcd.io/namespace: kube-system
    name: system:metrics-server
    resourceVersion: "2942"
    uid: 7a7e0408-0cad-4203-a49e-8ecaf7368a6b
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:metrics-server
  subjects:
  - kind: ServiceAccount
    name: metrics-server
    namespace: kube-system
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:monitoring
    resourceVersion: "139"
    uid: 4b5e91a1-ff5f-4ef3-9a14-19b905c93be1
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:monitoring
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:monitoring
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:node
    resourceVersion: "148"
    uid: c3890439-6f38-4cc2-bc82-33aa46edfd82
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:node
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:node-proxier
    resourceVersion: "143"
    uid: 59e1a000-505c-4309-96e6-4329d6f83485
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:node-proxier
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: system:kube-proxy
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:public-info-viewer
    resourceVersion: "142"
    uid: 0e5d146d-c390-493c-a92b-05e4684b4705
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:public-info-viewer
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:authenticated
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:unauthenticated
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:service-account-issuer-discovery
    resourceVersion: "149"
    uid: 48b0c5b7-fff8-4b99-9d09-a43f3bc8d749
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:service-account-issuer-discovery
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:serviceaccounts
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:volume-scheduler
    resourceVersion: "147"
    uid: 3341f20f-6279-4859-92ee-933fad4e1669
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:volume-scheduler
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: system:kube-scheduler
- aggregationRule:
    clusterRoleSelectors:
    - matchLabels:
        rbac.authorization.k8s.io/aggregate-to-admin: "true"
  apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: admin
    resourceVersion: "4489264"
    uid: 9197d468-1a7b-48c5-9b9f-ff086dc48509
  rules:
  - apiGroups:
    - argoproj.io
    resources:
    - workflows
    - workflows/finalizers
    - workfloweventbindings
    - workfloweventbindings/finalizers
    - workflowtemplates
    - workflowtemplates/finalizers
    - cronworkflows
    - cronworkflows/finalizers
    - clusterworkflowtemplates
    - clusterworkflowtemplates/finalizers
    - workflowtasksets
    - workflowtasksets/finalizers
    verbs:
    - create
    - delete
    - deletecollection
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - cert-manager.io
    resources:
    - certificates
    - certificaterequests
    - issuers
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - cert-manager.io
    resources:
    - certificates/status
    verbs:
    - update
  - apiGroups:
    - acme.cert-manager.io
    resources:
    - challenges
    - orders
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - cert-manager.io
    resources:
    - certificates
    - certificaterequests
    - issuers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - acme.cert-manager.io
    resources:
    - challenges
    - orders
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - argoproj.io
    resources:
    - workflows
    - workflows/finalizers
    - workfloweventbindings
    - workfloweventbindings/finalizers
    - workflowtemplates
    - workflowtemplates/finalizers
    - cronworkflows
    - cronworkflows/finalizers
    - clusterworkflowtemplates
    - clusterworkflowtemplates/finalizers
    verbs:
    - create
    - delete
    - deletecollection
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - notification.toolkit.fluxcd.io
    - source.toolkit.fluxcd.io
    - helm.toolkit.fluxcd.io
    - image.toolkit.fluxcd.io
    - kustomize.toolkit.fluxcd.io
    resources:
    - '*'
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - notification.toolkit.fluxcd.io
    - source.toolkit.fluxcd.io
    - helm.toolkit.fluxcd.io
    - image.toolkit.fluxcd.io
    - kustomize.toolkit.fluxcd.io
    resources:
    - '*'
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - pods/attach
    - pods/exec
    - pods/portforward
    - pods/proxy
    - secrets
    - services/proxy
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - serviceaccounts
    verbs:
    - impersonate
  - apiGroups:
    - ""
    resources:
    - pods
    - pods/attach
    - pods/exec
    - pods/portforward
    - pods/proxy
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - pods/eviction
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - configmaps
    - events
    - persistentvolumeclaims
    - replicationcontrollers
    - replicationcontrollers/scale
    - secrets
    - serviceaccounts
    - services
    - services/proxy
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - serviceaccounts/token
    verbs:
    - create
  - apiGroups:
    - apps
    resources:
    - daemonsets
    - deployments
    - deployments/rollback
    - deployments/scale
    - replicasets
    - replicasets/scale
    - statefulsets
    - statefulsets/scale
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - autoscaling
    resources:
    - horizontalpodautoscalers
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - batch
    resources:
    - cronjobs
    - jobs
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - extensions
    resources:
    - daemonsets
    - deployments
    - deployments/rollback
    - deployments/scale
    - ingresses
    - networkpolicies
    - replicasets
    - replicasets/scale
    - replicationcontrollers/scale
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses
    - networkpolicies
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - create
    - delete
    - deletecollection
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - metrics.k8s.io
    resources:
    - pods
    - nodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - argoproj.io
    resources:
    - workflows
    - workflows/finalizers
    - workfloweventbindings
    - workfloweventbindings/finalizers
    - workflowtemplates
    - workflowtemplates/finalizers
    - cronworkflows
    - cronworkflows/finalizers
    - clusterworkflowtemplates
    - clusterworkflowtemplates/finalizers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - configmaps
    - endpoints
    - persistentvolumeclaims
    - persistentvolumeclaims/status
    - pods
    - replicationcontrollers
    - replicationcontrollers/scale
    - serviceaccounts
    - services
    - services/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - bindings
    - events
    - limitranges
    - namespaces/status
    - pods/log
    - pods/status
    - replicationcontrollers/status
    - resourcequotas
    - resourcequotas/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - discovery.k8s.io
    resources:
    - endpointslices
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    resources:
    - controllerrevisions
    - daemonsets
    - daemonsets/status
    - deployments
    - deployments/scale
    - deployments/status
    - replicasets
    - replicasets/scale
    - replicasets/status
    - statefulsets
    - statefulsets/scale
    - statefulsets/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - autoscaling
    resources:
    - horizontalpodautoscalers
    - horizontalpodautoscalers/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - batch
    resources:
    - cronjobs
    - cronjobs/status
    - jobs
    - jobs/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - extensions
    resources:
    - daemonsets
    - daemonsets/status
    - deployments
    - deployments/scale
    - deployments/status
    - ingresses
    - ingresses/status
    - networkpolicies
    - replicasets
    - replicasets/scale
    - replicasets/status
    - replicationcontrollers/scale
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets
    - poddisruptionbudgets/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses
    - ingresses/status
    - networkpolicies
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - authorization.k8s.io
    resources:
    - localsubjectaccessreviews
    verbs:
    - create
  - apiGroups:
    - rbac.authorization.k8s.io
    resources:
    - rolebindings
    - roles
    verbs:
    - create
    - delete
    - deletecollection
    - get
    - list
    - patch
    - update
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: argocd
      meta.helm.sh/release-namespace: argocd
    creationTimestamp: "2025-02-08T09:40:55Z"
    labels:
      app.kubernetes.io/instance: argocd
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: argo-cd
      app.kubernetes.io/version: 2.14.2
      helm.sh/chart: argo-cd-7.1.10
    name: argocd-argo-cd-argocd-app-controller
    resourceVersion: "4204504"
    uid: f39dc6c7-1f1d-440e-b722-b6bbffc57149
  rules:
  - apiGroups:
    - '*'
    resources:
    - '*'
    verbs:
    - '*'
  - nonResourceURLs:
    - '*'
    verbs:
    - '*'
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: argocd
      meta.helm.sh/release-namespace: argocd
    creationTimestamp: "2025-02-08T09:40:55Z"
    labels:
      app.kubernetes.io/instance: argocd
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: argo-cd
      app.kubernetes.io/version: 2.14.2
      helm.sh/chart: argo-cd-7.1.10
    name: argocd-argo-cd-argocd-server
    resourceVersion: "4204503"
    uid: fd369611-0fc4-4d2e-94c0-850f7e54b72d
  rules:
  - apiGroups:
    - '*'
    resources:
    - '*'
    verbs:
    - delete
    - get
    - patch
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - list
    - create
  - apiGroups:
    - ""
    resources:
    - pods
    - pods/log
    verbs:
    - get
  - apiGroups:
    - argoproj.io
    resources:
    - applications
    verbs:
    - get
    - list
    - update
    - watch
    - create
    - delete
    - patch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: argowf
      meta.helm.sh/release-namespace: argowf
    creationTimestamp: "2025-02-08T17:58:48Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: argowf
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: argo-workflows
      app.kubernetes.io/part-of: argo-workflows
      app.kubernetes.io/version: 3.6.3
      helm.sh/chart: argo-workflows-11.1.6
      rbac.authorization.k8s.io/aggregate-to-admin: "true"
    name: argowf-argo-workflows-argowf-admin
    resourceVersion: "4489249"
    uid: 09c0740b-3adc-48ef-b9c5-b0003bdf23bb
  rules:
  - apiGroups:
    - argoproj.io
    resources:
    - workflows
    - workflows/finalizers
    - workfloweventbindings
    - workfloweventbindings/finalizers
    - workflowtemplates
    - workflowtemplates/finalizers
    - cronworkflows
    - cronworkflows/finalizers
    - clusterworkflowtemplates
    - clusterworkflowtemplates/finalizers
    - workflowtasksets
    - workflowtasksets/finalizers
    verbs:
    - create
    - delete
    - deletecollection
    - get
    - list
    - patch
    - update
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: argowf
      meta.helm.sh/release-namespace: argowf
    creationTimestamp: "2025-02-08T17:58:48Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: argowf
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: argo-workflows
      app.kubernetes.io/part-of: argo-workflows
      app.kubernetes.io/version: 3.6.3
      helm.sh/chart: argo-workflows-11.1.6
    name: argowf-argo-workflows-argowf-controller
    resourceVersion: "4489254"
    uid: 402429a6-ff4a-460e-972d-c10ae1b4572b
  rules:
  - apiGroups:
    - ""
    resources:
    - pods
    - pods/exec
    verbs:
    - create
    - get
    - list
    - watch
    - update
    - patch
    - delete
  - apiGroups:
    - ""
    resources:
    - configmaps
    verbs:
    - get
    - watch
    - list
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    - persistentvolumeclaims/finalizers
    verbs:
    - create
    - update
    - delete
    - get
  - apiGroups:
    - argoproj.io
    resources:
    - workflows
    - workflows/finalizers
    - workflowtasksets
    - workflowtasksets/finalizers
    - workflowartifactgctasks
    verbs:
    - get
    - list
    - watch
    - update
    - patch
    - delete
    - create
  - apiGroups:
    - argoproj.io
    resources:
    - workflowtemplates
    - workflowtemplates/finalizers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - argoproj.io
    resources:
    - cronworkflows
    - cronworkflows/finalizers
    verbs:
    - get
    - list
    - watch
    - update
    - patch
    - delete
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
    - patch
  - apiGroups:
    - argoproj.io
    resources:
    - workflowtaskresults
    verbs:
    - list
    - watch
    - deletecollection
  - apiGroups:
    - ""
    resources:
    - serviceaccounts
    verbs:
    - get
    - list
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets
    verbs:
    - create
    - get
    - delete
  - apiGroups:
    - ""
    resourceNames:
    - argowf-argo-workflows-controller-database
    - argowf-postgresql
    - argo-workflows-agent-ca-certificates
    resources:
    - secrets
    verbs:
    - get
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - create
  - apiGroups:
    - coordination.k8s.io
    resourceNames:
    - workflow-controller
    - workflow-controller-lease
    resources:
    - leases
    verbs:
    - get
    - watch
    - update
    - patch
    - delete
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: argowf
      meta.helm.sh/release-namespace: argowf
    creationTimestamp: "2025-02-08T17:58:48Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: argowf
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: argo-workflows
      app.kubernetes.io/part-of: argo-workflows
      app.kubernetes.io/version: 3.6.3
      helm.sh/chart: argo-workflows-11.1.6
    name: argowf-argo-workflows-argowf-controller-cluster-template
    resourceVersion: "4489248"
    uid: 04eaa37f-3695-43f9-8626-7bb2c05783f1
  rules:
  - apiGroups:
    - argoproj.io
    resources:
    - clusterworkflowtemplates
    - clusterworkflowtemplates/finalizers
    verbs:
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: argowf
      meta.helm.sh/release-namespace: argowf
    creationTimestamp: "2025-02-08T17:58:48Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: argowf
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: argo-workflows
      app.kubernetes.io/part-of: argo-workflows
      app.kubernetes.io/version: 3.6.3
      helm.sh/chart: argo-workflows-11.1.6
      rbac.authorization.k8s.io/aggregate-to-edit: "true"
    name: argowf-argo-workflows-argowf-edit
    resourceVersion: "4489252"
    uid: 2ba7f1c6-2d7c-4b15-ac6a-ff16c08f396e
  rules:
  - apiGroups:
    - argoproj.io
    resources:
    - workflows
    - workflows/finalizers
    - workfloweventbindings
    - workfloweventbindings/finalizers
    - workflowtemplates
    - workflowtemplates/finalizers
    - cronworkflows
    - cronworkflows/finalizers
    - clusterworkflowtemplates
    - clusterworkflowtemplates/finalizers
    verbs:
    - create
    - delete
    - deletecollection
    - get
    - list
    - patch
    - update
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: argowf
      meta.helm.sh/release-namespace: argowf
    creationTimestamp: "2025-02-08T17:58:48Z"
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: argowf
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: argo-workflows
      app.kubernetes.io/part-of: argo-workflows
      app.kubernetes.io/version: 3.6.3
      helm.sh/chart: argo-workflows-11.1.6
    name: argowf-argo-workflows-argowf-server
    resourceVersion: "4489253"
    uid: b4226669-3e14-4272-8a5f-065133167f90
  rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    - events
    verbs:
    - get
    - watch
    - list
  - apiGroups:
    - ""
    resources:
    - pods
    - pods/exec
    - pods/log
    verbs:
    - get
    - list
    - watch
    - delete
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - watch
    - create
    - patch
  - apiGroups:
    - ""
    resourceNames:
    - argowf-argo-workflows-controller-database
    - argowf-postgresql
    resources:
    - secrets
    verbs:
    - get
  - apiGroups:
    - argoproj.io
    resources:
    - eventsources
    - sensors
    - workflows
    - workfloweventbindings
    - workflowtemplates
    - cronworkflows
    verbs:
    - create
    - get
    - list
    - watch
    - update
    - patch
    - delete
  - apiGroups:
    - dataflow.argoproj.io
    resources:
    - pipelines
    verbs:
    - create
    - get
    - list
    - watch
    - update
    - patch
    - delete
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: argowf
      meta.helm.sh/release-namespace: argowf
    creationTimestamp: "2025-02-08T17:58:48Z"
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: argowf
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: argo-workflows
      app.kubernetes.io/part-of: argo-workflows
      app.kubernetes.io/version: 3.6.3
      helm.sh/chart: argo-workflows-11.1.6
    name: argowf-argo-workflows-argowf-server-cluster-template
    resourceVersion: "4489250"
    uid: 46e598af-96ae-4c3d-8db5-68609d1e3eac
  rules:
  - apiGroups:
    - argoproj.io
    resources:
    - clusterworkflowtemplates
    verbs:
    - get
    - list
    - watch
    - create
    - update
    - patch
    - delete
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: argowf
      meta.helm.sh/release-namespace: argowf
    creationTimestamp: "2025-02-08T17:58:48Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: argowf
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: argo-workflows
      app.kubernetes.io/part-of: argo-workflows
      app.kubernetes.io/version: 3.6.3
      helm.sh/chart: argo-workflows-11.1.6
      rbac.authorization.k8s.io/aggregate-to-view: "true"
    name: argowf-argo-workflows-argowf-view
    resourceVersion: "4489251"
    uid: e7aee20f-7e82-45fd-9a5f-89c18806fa67
  rules:
  - apiGroups:
    - argoproj.io
    resources:
    - workflows
    - workflows/finalizers
    - workfloweventbindings
    - workfloweventbindings/finalizers
    - workflowtemplates
    - workflowtemplates/finalizers
    - cronworkflows
    - cronworkflows/finalizers
    - clusterworkflowtemplates
    - clusterworkflowtemplates/finalizers
    verbs:
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-cainjector
    resourceVersion: "2926"
    uid: f0455480-5221-4a38-a1d1-fbef80a03587
  rules:
  - apiGroups:
    - cert-manager.io
    resources:
    - certificates
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - get
    - create
    - update
    - patch
  - apiGroups:
    - admissionregistration.k8s.io
    resources:
    - validatingwebhookconfigurations
    - mutatingwebhookconfigurations
    verbs:
    - get
    - list
    - watch
    - update
    - patch
  - apiGroups:
    - apiregistration.k8s.io
    resources:
    - apiservices
    verbs:
    - get
    - list
    - watch
    - update
    - patch
  - apiGroups:
    - apiextensions.k8s.io
    resources:
    - customresourcedefinitions
    verbs:
    - get
    - list
    - watch
    - update
    - patch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
      rbac.authorization.k8s.io/aggregate-to-cluster-reader: "true"
    name: cert-manager-cluster-view
    resourceVersion: "2936"
    uid: cc2566c8-ef9a-45a9-9b1b-81491ad39544
  rules:
  - apiGroups:
    - cert-manager.io
    resources:
    - clusterissuers
    verbs:
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: cert-manager
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-controller-approve:cert-manager-io
    resourceVersion: "2952"
    uid: 5f46f171-037e-4d35-8323-0cea4cd50059
  rules:
  - apiGroups:
    - cert-manager.io
    resourceNames:
    - issuers.cert-manager.io/*
    - clusterissuers.cert-manager.io/*
    resources:
    - signers
    verbs:
    - approve
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-controller-certificates
    resourceVersion: "2929"
    uid: 405cdd18-6236-4ba5-abda-d86b298f47bd
  rules:
  - apiGroups:
    - cert-manager.io
    resources:
    - certificates
    - certificates/status
    - certificaterequests
    - certificaterequests/status
    verbs:
    - update
    - patch
  - apiGroups:
    - cert-manager.io
    resources:
    - certificates
    - certificaterequests
    - clusterissuers
    - issuers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - cert-manager.io
    resources:
    - certificates/finalizers
    - certificaterequests/finalizers
    verbs:
    - update
  - apiGroups:
    - acme.cert-manager.io
    resources:
    - orders
    verbs:
    - create
    - delete
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - get
    - list
    - watch
    - create
    - update
    - delete
    - patch
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
    - patch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: cert-manager
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-controller-certificatesigningrequests
    resourceVersion: "2959"
    uid: 19866cc0-831a-4284-a30c-a313f9688246
  rules:
  - apiGroups:
    - certificates.k8s.io
    resources:
    - certificatesigningrequests
    verbs:
    - get
    - list
    - watch
    - update
  - apiGroups:
    - certificates.k8s.io
    resources:
    - certificatesigningrequests/status
    verbs:
    - update
    - patch
  - apiGroups:
    - certificates.k8s.io
    resourceNames:
    - issuers.cert-manager.io/*
    - clusterissuers.cert-manager.io/*
    resources:
    - signers
    verbs:
    - sign
  - apiGroups:
    - authorization.k8s.io
    resources:
    - subjectaccessreviews
    verbs:
    - create
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-controller-challenges
    resourceVersion: "2933"
    uid: ba332e91-424e-4b7b-bd99-ccc81ad205b8
  rules:
  - apiGroups:
    - acme.cert-manager.io
    resources:
    - challenges
    - challenges/status
    verbs:
    - update
    - patch
  - apiGroups:
    - acme.cert-manager.io
    resources:
    - challenges
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - cert-manager.io
    resources:
    - issuers
    - clusterissuers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
    - patch
  - apiGroups:
    - ""
    resources:
    - pods
    - services
    verbs:
    - get
    - list
    - watch
    - create
    - delete
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses
    verbs:
    - get
    - list
    - watch
    - create
    - delete
    - update
  - apiGroups:
    - gateway.networking.k8s.io
    resources:
    - httproutes
    verbs:
    - get
    - list
    - watch
    - create
    - delete
    - update
  - apiGroups:
    - route.openshift.io
    resources:
    - routes/custom-host
    verbs:
    - create
  - apiGroups:
    - acme.cert-manager.io
    resources:
    - challenges/finalizers
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-controller-clusterissuers
    resourceVersion: "2928"
    uid: c6193cba-ccf1-4c98-bd55-21dc01c66f97
  rules:
  - apiGroups:
    - cert-manager.io
    resources:
    - clusterissuers
    - clusterissuers/status
    verbs:
    - update
    - patch
  - apiGroups:
    - cert-manager.io
    resources:
    - clusterissuers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - get
    - list
    - watch
    - create
    - update
    - delete
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
    - patch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-controller-ingress-shim
    resourceVersion: "2934"
    uid: c92ed042-f62c-4b23-8b9b-ce821333be2e
  rules:
  - apiGroups:
    - cert-manager.io
    resources:
    - certificates
    - certificaterequests
    verbs:
    - create
    - update
    - delete
  - apiGroups:
    - cert-manager.io
    resources:
    - certificates
    - certificaterequests
    - issuers
    - clusterissuers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses/finalizers
    verbs:
    - update
  - apiGroups:
    - gateway.networking.k8s.io
    resources:
    - gateways
    - httproutes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - gateway.networking.k8s.io
    resources:
    - gateways/finalizers
    - httproutes/finalizers
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
    - patch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-controller-issuers
    resourceVersion: "2927"
    uid: 4879fff4-2f1d-4120-a55a-9a1f4ea549f6
  rules:
  - apiGroups:
    - cert-manager.io
    resources:
    - issuers
    - issuers/status
    verbs:
    - update
    - patch
  - apiGroups:
    - cert-manager.io
    resources:
    - issuers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - get
    - list
    - watch
    - create
    - update
    - delete
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
    - patch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-controller-orders
    resourceVersion: "2930"
    uid: 9a582c5a-58ca-4104-a43e-de1e4251c129
  rules:
  - apiGroups:
    - acme.cert-manager.io
    resources:
    - orders
    - orders/status
    verbs:
    - update
    - patch
  - apiGroups:
    - acme.cert-manager.io
    resources:
    - orders
    - challenges
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - cert-manager.io
    resources:
    - clusterissuers
    - issuers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - acme.cert-manager.io
    resources:
    - challenges
    verbs:
    - create
    - delete
  - apiGroups:
    - acme.cert-manager.io
    resources:
    - orders/finalizers
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
    - patch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
      rbac.authorization.k8s.io/aggregate-to-admin: "true"
      rbac.authorization.k8s.io/aggregate-to-edit: "true"
    name: cert-manager-edit
    resourceVersion: "2947"
    uid: 3f29fde4-994f-45d7-b3cf-722739753d0c
  rules:
  - apiGroups:
    - cert-manager.io
    resources:
    - certificates
    - certificaterequests
    - issuers
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - cert-manager.io
    resources:
    - certificates/status
    verbs:
    - update
  - apiGroups:
    - acme.cert-manager.io
    resources:
    - challenges
    - orders
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
      rbac.authorization.k8s.io/aggregate-to-admin: "true"
      rbac.authorization.k8s.io/aggregate-to-cluster-reader: "true"
      rbac.authorization.k8s.io/aggregate-to-edit: "true"
      rbac.authorization.k8s.io/aggregate-to-view: "true"
    name: cert-manager-view
    resourceVersion: "2940"
    uid: c8445d48-a072-486b-94ec-608e22d4fa91
  rules:
  - apiGroups:
    - cert-manager.io
    resources:
    - certificates
    - certificaterequests
    - issuers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - acme.cert-manager.io
    resources:
    - challenges
    - orders
    verbs:
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-02-02T18:14:27Z"
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-webhook:subjectaccessreviews
    resourceVersion: "2967"
    uid: fb6651e4-43f5-4461-bb3e-6b61c5aaaac7
  rules:
  - apiGroups:
    - authorization.k8s.io
    resources:
    - subjectaccessreviews
    verbs:
    - create
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-02-02T18:13:02Z"
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: cilium
      helm.toolkit.fluxcd.io/name: cilium
      helm.toolkit.fluxcd.io/namespace: kube-system
    name: cilium
    resourceVersion: "2799"
    uid: dba652f4-b21c-402d-8456-8f18f79898fd
  rules:
  - apiGroups:
    - networking.k8s.io
    resources:
    - networkpolicies
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - discovery.k8s.io
    resources:
    - endpointslices
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - namespaces
    - services
    - pods
    - endpoints
    - nodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - create
    - get
    - update
    - list
    - delete
  - apiGroups:
    - apiextensions.k8s.io
    resources:
    - customresourcedefinitions
    verbs:
    - list
    - watch
    - get
  - apiGroups:
    - cilium.io
    resources:
    - ciliumloadbalancerippools
    - ciliumbgppeeringpolicies
    - ciliumbgpnodeconfigs
    - ciliumbgpadvertisements
    - ciliumbgppeerconfigs
    - ciliumclusterwideenvoyconfigs
    - ciliumclusterwidenetworkpolicies
    - ciliumegressgatewaypolicies
    - ciliumendpoints
    - ciliumendpointslices
    - ciliumenvoyconfigs
    - ciliumidentities
    - ciliumlocalredirectpolicies
    - ciliumnetworkpolicies
    - ciliumnodes
    - ciliumnodeconfigs
    - ciliumcidrgroups
    - ciliuml2announcementpolicies
    - ciliumpodippools
    verbs:
    - list
    - watch
  - apiGroups:
    - cilium.io
    resources:
    - ciliumidentities
    - ciliumendpoints
    - ciliumnodes
    verbs:
    - create
  - apiGroups:
    - cilium.io
    resources:
    - ciliumidentities
    verbs:
    - update
  - apiGroups:
    - cilium.io
    resources:
    - ciliumendpoints
    verbs:
    - delete
    - get
  - apiGroups:
    - cilium.io
    resources:
    - ciliumnodes
    - ciliumnodes/status
    verbs:
    - get
    - update
  - apiGroups:
    - cilium.io
    resources:
    - ciliumendpoints/status
    - ciliumendpoints
    - ciliuml2announcementpolicies/status
    - ciliumbgpnodeconfigs/status
    verbs:
    - patch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-02-02T18:13:02Z"
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: cilium
      helm.toolkit.fluxcd.io/name: cilium
      helm.toolkit.fluxcd.io/namespace: kube-system
    name: cilium-operator
    resourceVersion: "2806"
    uid: 6bc44c7e-2e3a-479e-8c86-47e1f821c13b
  rules:
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - get
    - list
    - watch
    - delete
  - apiGroups:
    - ""
    resourceNames:
    - cilium-config
    resources:
    - configmaps
    verbs:
    - patch
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - nodes
    - nodes/status
    verbs:
    - patch
  - apiGroups:
    - discovery.k8s.io
    resources:
    - endpointslices
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - services/status
    verbs:
    - update
    - patch
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - services
    - endpoints
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - cilium.io
    resources:
    - ciliumnetworkpolicies
    - ciliumclusterwidenetworkpolicies
    verbs:
    - create
    - update
    - deletecollection
    - patch
    - get
    - list
    - watch
  - apiGroups:
    - cilium.io
    resources:
    - ciliumnetworkpolicies/status
    - ciliumclusterwidenetworkpolicies/status
    verbs:
    - patch
    - update
  - apiGroups:
    - cilium.io
    resources:
    - ciliumendpoints
    - ciliumidentities
    verbs:
    - delete
    - list
    - watch
  - apiGroups:
    - cilium.io
    resources:
    - ciliumidentities
    verbs:
    - update
  - apiGroups:
    - cilium.io
    resources:
    - ciliumnodes
    verbs:
    - create
    - update
    - get
    - list
    - watch
    - delete
  - apiGroups:
    - cilium.io
    resources:
    - ciliumnodes/status
    verbs:
    - update
  - apiGroups:
    - cilium.io
    resources:
    - ciliumendpointslices
    - ciliumenvoyconfigs
    - ciliumbgppeerconfigs
    - ciliumbgpadvertisements
    - ciliumbgpnodeconfigs
    verbs:
    - create
    - update
    - get
    - list
    - watch
    - delete
    - patch
  - apiGroups:
    - apiextensions.k8s.io
    resources:
    - customresourcedefinitions
    verbs:
    - create
    - get
    - list
    - watch
  - apiGroups:
    - apiextensions.k8s.io
    resourceNames:
    - ciliumloadbalancerippools.cilium.io
    - ciliumbgppeeringpolicies.cilium.io
    - ciliumbgpclusterconfigs.cilium.io
    - ciliumbgppeerconfigs.cilium.io
    - ciliumbgpadvertisements.cilium.io
    - ciliumbgpnodeconfigs.cilium.io
    - ciliumbgpnodeconfigoverrides.cilium.io
    - ciliumclusterwideenvoyconfigs.cilium.io
    - ciliumclusterwidenetworkpolicies.cilium.io
    - ciliumegressgatewaypolicies.cilium.io
    - ciliumendpoints.cilium.io
    - ciliumendpointslices.cilium.io
    - ciliumenvoyconfigs.cilium.io
    - ciliumexternalworkloads.cilium.io
    - ciliumidentities.cilium.io
    - ciliumlocalredirectpolicies.cilium.io
    - ciliumnetworkpolicies.cilium.io
    - ciliumnodes.cilium.io
    - ciliumnodeconfigs.cilium.io
    - ciliumcidrgroups.cilium.io
    - ciliuml2announcementpolicies.cilium.io
    - ciliumpodippools.cilium.io
    resources:
    - customresourcedefinitions
    verbs:
    - update
  - apiGroups:
    - cilium.io
    resources:
    - ciliumloadbalancerippools
    - ciliumpodippools
    - ciliumbgppeeringpolicies
    - ciliumbgpclusterconfigs
    - ciliumbgpnodeconfigoverrides
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - cilium.io
    resources:
    - ciliumpodippools
    verbs:
    - create
  - apiGroups:
    - cilium.io
    resources:
    - ciliumloadbalancerippools/status
    verbs:
    - patch
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - create
    - get
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: cluster-admin
    resourceVersion: "74"
    uid: b58a10df-4935-4930-9262-4432a319d294
  rules:
  - apiGroups:
    - '*'
    resources:
    - '*'
    verbs:
    - '*'
  - nonResourceURLs:
    - '*'
    verbs:
    - '*'
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: coredns
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-02-02T18:13:47Z"
    labels:
      app.kubernetes.io/instance: coredns
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: coredns
      helm.sh/chart: coredns-1.39.0
      helm.toolkit.fluxcd.io/name: coredns
      helm.toolkit.fluxcd.io/namespace: kube-system
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: CoreDNS
    name: coredns
    resourceVersion: "2760"
    uid: b8b8d6b5-ca53-49d9-8104-b686551d7002
  rules:
  - apiGroups:
    - ""
    resources:
    - endpoints
    - services
    - pods
    - namespaces
    verbs:
    - list
    - watch
  - apiGroups:
    - discovery.k8s.io
    resources:
    - endpointslices
    verbs:
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      kustomize.toolkit.fluxcd.io/ssa: Ignore
    creationTimestamp: "2025-02-02T18:15:14Z"
    labels:
      app.kubernetes.io/instance: flux-system
      app.kubernetes.io/managed-by: flux-operator
      app.kubernetes.io/part-of: flux
      app.kubernetes.io/version: v2.4.0
      fluxcd.controlplane.io/name: flux
      fluxcd.controlplane.io/namespace: flux-system
    name: crd-controller-flux-system
    resourceVersion: "1928"
    uid: a3add55a-55b6-4b3b-a37e-d47d944edd6a
  rules:
  - apiGroups:
    - source.toolkit.fluxcd.io
    resources:
    - '*'
    verbs:
    - '*'
  - apiGroups:
    - kustomize.toolkit.fluxcd.io
    resources:
    - '*'
    verbs:
    - '*'
  - apiGroups:
    - helm.toolkit.fluxcd.io
    resources:
    - '*'
    verbs:
    - '*'
  - apiGroups:
    - notification.toolkit.fluxcd.io
    resources:
    - '*'
    verbs:
    - '*'
  - apiGroups:
    - image.toolkit.fluxcd.io
    resources:
    - '*'
    verbs:
    - '*'
  - apiGroups:
    - ""
    resources:
    - namespaces
    - secrets
    - configmaps
    - serviceaccounts
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
    - patch
  - apiGroups:
    - ""
    resources:
    - configmaps
    verbs:
    - get
    - list
    - watch
    - create
    - update
    - patch
    - delete
  - apiGroups:
    - ""
    resources:
    - configmaps/status
    verbs:
    - get
    - update
    - patch
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - get
    - list
    - watch
    - create
    - update
    - patch
    - delete
  - nonResourceURLs:
    - /livez/ping
    verbs:
    - head
  - apiGroups:
    - fluxcd.controlplane.io
    resources:
    - '*'
    verbs:
    - '*'
- aggregationRule:
    clusterRoleSelectors:
    - matchLabels:
        rbac.authorization.k8s.io/aggregate-to-edit: "true"
  apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
      rbac.authorization.k8s.io/aggregate-to-admin: "true"
    name: edit
    resourceVersion: "4489258"
    uid: 68d572b5-de03-445d-ae5e-4d286355e47c
  rules:
  - apiGroups:
    - argoproj.io
    resources:
    - workflows
    - workflows/finalizers
    - workfloweventbindings
    - workfloweventbindings/finalizers
    - workflowtemplates
    - workflowtemplates/finalizers
    - cronworkflows
    - cronworkflows/finalizers
    - clusterworkflowtemplates
    - clusterworkflowtemplates/finalizers
    verbs:
    - create
    - delete
    - deletecollection
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - cert-manager.io
    resources:
    - certificates
    - certificaterequests
    - issuers
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - cert-manager.io
    resources:
    - certificates/status
    verbs:
    - update
  - apiGroups:
    - acme.cert-manager.io
    resources:
    - challenges
    - orders
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - cert-manager.io
    resources:
    - certificates
    - certificaterequests
    - issuers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - acme.cert-manager.io
    resources:
    - challenges
    - orders
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - notification.toolkit.fluxcd.io
    - source.toolkit.fluxcd.io
    - helm.toolkit.fluxcd.io
    - image.toolkit.fluxcd.io
    - kustomize.toolkit.fluxcd.io
    resources:
    - '*'
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - notification.toolkit.fluxcd.io
    - source.toolkit.fluxcd.io
    - helm.toolkit.fluxcd.io
    - image.toolkit.fluxcd.io
    - kustomize.toolkit.fluxcd.io
    resources:
    - '*'
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - pods/attach
    - pods/exec
    - pods/portforward
    - pods/proxy
    - secrets
    - services/proxy
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - serviceaccounts
    verbs:
    - impersonate
  - apiGroups:
    - ""
    resources:
    - pods
    - pods/attach
    - pods/exec
    - pods/portforward
    - pods/proxy
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - pods/eviction
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - configmaps
    - events
    - persistentvolumeclaims
    - replicationcontrollers
    - replicationcontrollers/scale
    - secrets
    - serviceaccounts
    - services
    - services/proxy
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - serviceaccounts/token
    verbs:
    - create
  - apiGroups:
    - apps
    resources:
    - daemonsets
    - deployments
    - deployments/rollback
    - deployments/scale
    - replicasets
    - replicasets/scale
    - statefulsets
    - statefulsets/scale
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - autoscaling
    resources:
    - horizontalpodautoscalers
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - batch
    resources:
    - cronjobs
    - jobs
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - extensions
    resources:
    - daemonsets
    - deployments
    - deployments/rollback
    - deployments/scale
    - ingresses
    - networkpolicies
    - replicasets
    - replicasets/scale
    - replicationcontrollers/scale
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses
    - networkpolicies
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - create
    - delete
    - deletecollection
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - metrics.k8s.io
    resources:
    - pods
    - nodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - argoproj.io
    resources:
    - workflows
    - workflows/finalizers
    - workfloweventbindings
    - workfloweventbindings/finalizers
    - workflowtemplates
    - workflowtemplates/finalizers
    - cronworkflows
    - cronworkflows/finalizers
    - clusterworkflowtemplates
    - clusterworkflowtemplates/finalizers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - configmaps
    - endpoints
    - persistentvolumeclaims
    - persistentvolumeclaims/status
    - pods
    - replicationcontrollers
    - replicationcontrollers/scale
    - serviceaccounts
    - services
    - services/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - bindings
    - events
    - limitranges
    - namespaces/status
    - pods/log
    - pods/status
    - replicationcontrollers/status
    - resourcequotas
    - resourcequotas/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - discovery.k8s.io
    resources:
    - endpointslices
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    resources:
    - controllerrevisions
    - daemonsets
    - daemonsets/status
    - deployments
    - deployments/scale
    - deployments/status
    - replicasets
    - replicasets/scale
    - replicasets/status
    - statefulsets
    - statefulsets/scale
    - statefulsets/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - autoscaling
    resources:
    - horizontalpodautoscalers
    - horizontalpodautoscalers/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - batch
    resources:
    - cronjobs
    - cronjobs/status
    - jobs
    - jobs/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - extensions
    resources:
    - daemonsets
    - daemonsets/status
    - deployments
    - deployments/scale
    - deployments/status
    - ingresses
    - ingresses/status
    - networkpolicies
    - replicasets
    - replicasets/scale
    - replicasets/status
    - replicationcontrollers/scale
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets
    - poddisruptionbudgets/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses
    - ingresses/status
    - networkpolicies
    verbs:
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: external-dns
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:16:01Z"
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: external-dns
      app.kubernetes.io/version: 0.15.1
      helm.sh/chart: external-dns-1.15.1
      helm.toolkit.fluxcd.io/name: external-dns
      helm.toolkit.fluxcd.io/namespace: network
    name: external-dns
    resourceVersion: "2794"
    uid: 37470352-f38a-4f4d-aa07-3ffad49f1731
  rules:
  - apiGroups:
    - extensions
    - networking.k8s.io
    resources:
    - ingresses
    verbs:
    - get
    - watch
    - list
  - apiGroups:
    - externaldns.k8s.io
    resources:
    - dnsendpoints
    verbs:
    - get
    - watch
    - list
  - apiGroups:
    - externaldns.k8s.io
    resources:
    - dnsendpoints/status
    verbs:
    - '*'
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: external-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:51:37Z"
    labels:
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: external-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: external-ingress-nginx
    resourceVersion: "14940"
    uid: f4317671-0e1f-4075-b6fd-0f6ea28f8d53
  rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    - endpoints
    - nodes
    - pods
    - secrets
    - namespaces
    verbs:
    - list
    - watch
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - get
  - apiGroups:
    - ""
    resources:
    - services
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
    - patch
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses/status
    verbs:
    - update
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingressclasses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - discovery.k8s.io
    resources:
    - endpointslices
    verbs:
    - list
    - watch
    - get
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      kustomize.toolkit.fluxcd.io/ssa: Ignore
    creationTimestamp: "2025-02-02T18:15:14Z"
    labels:
      app.kubernetes.io/instance: flux-system
      app.kubernetes.io/managed-by: flux-operator
      app.kubernetes.io/part-of: flux
      app.kubernetes.io/version: v2.4.0
      fluxcd.controlplane.io/name: flux
      fluxcd.controlplane.io/namespace: flux-system
      rbac.authorization.k8s.io/aggregate-to-admin: "true"
      rbac.authorization.k8s.io/aggregate-to-edit: "true"
    name: flux-edit-flux-system
    resourceVersion: "1929"
    uid: 5489480e-67bd-4e1e-8ed7-7d70c8533bcf
  rules:
  - apiGroups:
    - notification.toolkit.fluxcd.io
    - source.toolkit.fluxcd.io
    - helm.toolkit.fluxcd.io
    - image.toolkit.fluxcd.io
    - kustomize.toolkit.fluxcd.io
    resources:
    - '*'
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      kustomize.toolkit.fluxcd.io/ssa: Ignore
    creationTimestamp: "2025-02-02T18:15:14Z"
    labels:
      app.kubernetes.io/instance: flux-system
      app.kubernetes.io/managed-by: flux-operator
      app.kubernetes.io/part-of: flux
      app.kubernetes.io/version: v2.4.0
      fluxcd.controlplane.io/name: flux
      fluxcd.controlplane.io/namespace: flux-system
      rbac.authorization.k8s.io/aggregate-to-admin: "true"
      rbac.authorization.k8s.io/aggregate-to-edit: "true"
      rbac.authorization.k8s.io/aggregate-to-view: "true"
    name: flux-view-flux-system
    resourceVersion: "1930"
    uid: fa02ec4f-0183-41f8-8278-b6df4b0bbcb5
  rules:
  - apiGroups:
    - notification.toolkit.fluxcd.io
    - source.toolkit.fluxcd.io
    - helm.toolkit.fluxcd.io
    - image.toolkit.fluxcd.io
    - kustomize.toolkit.fluxcd.io
    resources:
    - '*'
    verbs:
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: internal-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T19:07:36Z"
    labels:
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: internal-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: internal-ingress-nginx
    resourceVersion: "21717"
    uid: 9e2a7332-f1f7-4879-8e2e-c79a0b8e70cc
  rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    - endpoints
    - nodes
    - pods
    - secrets
    - namespaces
    verbs:
    - list
    - watch
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - get
  - apiGroups:
    - ""
    resources:
    - services
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
    - patch
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses/status
    verbs:
    - update
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingressclasses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - discovery.k8s.io
    resources:
    - endpointslices
    verbs:
    - list
    - watch
    - get
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: k8s-gateway
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:16:03Z"
    labels:
      app.kubernetes.io/instance: k8s-gateway
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: k8s-gateway
      app.kubernetes.io/version: 0.4.0
      helm.sh/chart: k8s-gateway-2.4.0
      helm.toolkit.fluxcd.io/name: k8s-gateway
      helm.toolkit.fluxcd.io/namespace: network
    name: k8s-gateway
    resourceVersion: "2892"
    uid: 6883189f-110e-479a-a34c-5ef295afb929
  rules:
  - apiGroups:
    - ""
    resources:
    - services
    - namespaces
    verbs:
    - list
    - watch
  - apiGroups:
    - extensions
    - networking.k8s.io
    resources:
    - ingresses
    verbs:
    - list
    - watch
  - apiGroups:
    - gateway.networking.k8s.io
    resources:
    - '*'
    verbs:
    - watch
    - list
  - apiGroups:
    - k8s.nginx.org
    resources:
    - '*'
    verbs:
    - watch
    - list
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: kube-prometheus-1738574406
      meta.helm.sh/release-namespace: observability
    creationTimestamp: "2025-02-03T09:20:14Z"
    labels:
      app.kubernetes.io/instance: kube-prometheus-1738574406
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-state-metrics
      app.kubernetes.io/version: 2.14.0
      helm.sh/chart: kube-state-metrics-4.3.3
    name: kube-prometheus-1738574406-kube-state-metrics-observability
    resourceVersion: "363765"
    uid: dd1a00eb-3ff4-444c-bce4-65a59c173c9a
  rules:
  - apiGroups:
    - certificates.k8s.io
    resources:
    - certificatesigningrequests
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - configmaps
    verbs:
    - list
    - watch
  - apiGroups:
    - batch
    resources:
    - cronjobs
    verbs:
    - list
    - watch
  - apiGroups:
    - extensions
    - apps
    resources:
    - daemonsets
    verbs:
    - list
    - watch
  - apiGroups:
    - extensions
    - apps
    resources:
    - deployments
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - endpoints
    verbs:
    - list
    - watch
  - apiGroups:
    - autoscaling
    resources:
    - horizontalpodautoscalers
    verbs:
    - list
    - watch
  - apiGroups:
    - extensions
    - networking.k8s.io
    resources:
    - ingresses
    verbs:
    - list
    - watch
  - apiGroups:
    - batch
    resources:
    - jobs
    verbs:
    - list
    - watch
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - limitranges
    verbs:
    - list
    - watch
  - apiGroups:
    - admissionregistration.k8s.io
    resources:
    - mutatingwebhookconfigurations
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - list
    - watch
  - apiGroups:
    - networking.k8s.io
    resources:
    - networkpolicies
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumes
    verbs:
    - list
    - watch
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - list
    - watch
  - apiGroups:
    - extensions
    - apps
    resources:
    - replicasets
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - replicationcontrollers
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - resourcequotas
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - services
    verbs:
    - list
    - watch
  - apiGroups:
    - apps
    resources:
    - statefulsets
    verbs:
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - storageclasses
    verbs:
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - volumeattachments
    verbs:
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: kube-prometheus-1738574406
      meta.helm.sh/release-namespace: observability
    creationTimestamp: "2025-02-03T09:20:14Z"
    labels:
      app.kubernetes.io/component: operator
      app.kubernetes.io/instance: kube-prometheus-1738574406
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-prometheus
      app.kubernetes.io/version: 0.79.2
      helm.sh/chart: kube-prometheus-10.2.5
    name: kube-prometheus-1738574406-operator
    resourceVersion: "363766"
    uid: 275dab5e-ba8b-4e4a-a89d-967a1b44693d
  rules:
  - apiGroups:
    - apiextensions.k8s.io
    resources:
    - customresourcedefinitions
    verbs:
    - create
  - apiGroups:
    - apiextensions.k8s.io
    resourceNames:
    - alertmanagers.monitoring.coreos.com
    - podmonitors.monitoring.coreos.com
    - prometheuses.monitoring.coreos.com
    - prometheusrules.monitoring.coreos.com
    - servicemonitors.monitoring.coreos.com
    - thanosrulers.monitoring.coreos.com
    - probes.monitoring.coreos.com
    - scrapeconfigs.monitoring.coreos.com
    - prometheusagents.monitoring.coreos.com
    resources:
    - customresourcedefinitions
    verbs:
    - get
    - update
  - apiGroups:
    - monitoring.coreos.com
    resources:
    - alertmanagers
    - alertmanagers/status
    - alertmanagers/finalizers
    - alertmanagerconfigs
    - prometheuses
    - prometheuses/status
    - prometheuses/finalizers
    - thanosrulers
    - thanosrulers/finalizers
    - thanosrulers/status
    - servicemonitors
    - podmonitors
    - probes
    - prometheusrules
    - scrapeconfigs
    - prometheusagents
    - prometheusagents/finalizers
    - prometheusagents/status
    verbs:
    - '*'
  - apiGroups:
    - apps
    resources:
    - statefulsets
    verbs:
    - '*'
  - apiGroups:
    - ""
    resources:
    - configmaps
    - secrets
    verbs:
    - '*'
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - list
    - delete
  - apiGroups:
    - ""
    resources:
    - services
    - services/finalizers
    - endpoints
    verbs:
    - get
    - create
    - update
    - delete
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - patch
    - create
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - storageclasses
    verbs:
    - get
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: kube-prometheus-1738574406
      meta.helm.sh/release-namespace: observability
    creationTimestamp: "2025-02-03T09:20:14Z"
    labels:
      app.kubernetes.io/component: prometheus
      app.kubernetes.io/instance: kube-prometheus-1738574406
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-prometheus
      app.kubernetes.io/version: 0.79.2
      helm.sh/chart: kube-prometheus-10.2.5
    name: kube-prometheus-1738574406-prometheus
    resourceVersion: "363764"
    uid: 3af93e54-0ff7-4523-b2d3-f3fcbcd22ecc
  rules:
  - apiGroups:
    - ""
    resources:
    - nodes/metrics
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - nodes
    - nodes/proxy
    - services
    - endpoints
    - pods
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - extensions
    - networking.k8s.io
    resources:
    - ingresses
    verbs:
    - get
    - list
    - watch
  - nonResourceURLs:
    - /metrics
    verbs:
    - get
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: longhorn-release
      meta.helm.sh/release-namespace: longhorn-system
    creationTimestamp: "2025-02-03T17:17:41Z"
    labels:
      app.kubernetes.io/instance: longhorn-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: longhorn
      app.kubernetes.io/version: v1.8.0
      helm.sh/chart: longhorn-1.8.0
      helm.toolkit.fluxcd.io/name: longhorn-release
      helm.toolkit.fluxcd.io/namespace: longhorn-system
    name: longhorn-role
    resourceVersion: "555956"
    uid: db52c33d-76ce-4070-8b68-4b13746ab2c1
  rules:
  - apiGroups:
    - apiextensions.k8s.io
    resources:
    - customresourcedefinitions
    verbs:
    - '*'
  - apiGroups:
    - ""
    resources:
    - pods
    - events
    - persistentvolumes
    - persistentvolumeclaims
    - persistentvolumeclaims/status
    - nodes
    - proxy/nodes
    - pods/log
    - secrets
    - services
    - endpoints
    - configmaps
    - serviceaccounts
    verbs:
    - '*'
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - get
    - list
  - apiGroups:
    - apps
    resources:
    - daemonsets
    - statefulsets
    - deployments
    verbs:
    - '*'
  - apiGroups:
    - batch
    resources:
    - jobs
    - cronjobs
    verbs:
    - '*'
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets
    - podsecuritypolicies
    verbs:
    - '*'
  - apiGroups:
    - scheduling.k8s.io
    resources:
    - priorityclasses
    verbs:
    - watch
    - list
  - apiGroups:
    - storage.k8s.io
    resources:
    - storageclasses
    - volumeattachments
    - volumeattachments/status
    - csinodes
    - csidrivers
    verbs:
    - '*'
  - apiGroups:
    - snapshot.storage.k8s.io
    resources:
    - volumesnapshotclasses
    - volumesnapshots
    - volumesnapshotcontents
    - volumesnapshotcontents/status
    verbs:
    - '*'
  - apiGroups:
    - longhorn.io
    resources:
    - volumes
    - volumes/status
    - engines
    - engines/status
    - replicas
    - replicas/status
    - settings
    - settings/status
    - engineimages
    - engineimages/status
    - nodes
    - nodes/status
    - instancemanagers
    - instancemanagers/status
    - sharemanagers
    - sharemanagers/status
    - backingimages
    - backingimages/status
    - backingimagemanagers
    - backingimagemanagers/status
    - backingimagedatasources
    - backingimagedatasources/status
    - backuptargets
    - backuptargets/status
    - backupvolumes
    - backupvolumes/status
    - backups
    - backups/status
    - recurringjobs
    - recurringjobs/status
    - orphans
    - orphans/status
    - snapshots
    - snapshots/status
    - supportbundles
    - supportbundles/status
    - systembackups
    - systembackups/status
    - systemrestores
    - systemrestores/status
    - volumeattachments
    - volumeattachments/status
    - backupbackingimages
    - backupbackingimages/status
    verbs:
    - '*'
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - '*'
  - apiGroups:
    - metrics.k8s.io
    resources:
    - pods
    - nodes
    verbs:
    - get
    - list
  - apiGroups:
    - apiregistration.k8s.io
    resources:
    - apiservices
    verbs:
    - list
    - watch
  - apiGroups:
    - admissionregistration.k8s.io
    resources:
    - mutatingwebhookconfigurations
    - validatingwebhookconfigurations
    verbs:
    - get
    - list
    - create
    - patch
    - delete
  - apiGroups:
    - rbac.authorization.k8s.io
    resources:
    - roles
    - rolebindings
    - clusterrolebindings
    - clusterroles
    verbs:
    - '*'
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: openebs
      meta.helm.sh/release-namespace: openebs-system
    creationTimestamp: "2025-02-02T18:16:09Z"
    labels:
      app: localpv-provisioner
      app.kubernetes.io/managed-by: Helm
      chart: localpv-provisioner-4.1.4
      component: localpv-provisioner
      helm.toolkit.fluxcd.io/name: openebs
      helm.toolkit.fluxcd.io/namespace: openebs-system
      heritage: Helm
      openebs.io/component-name: openebs-localpv-provisioner
      release: openebs
    name: openebs-localpv-provisioner
    resourceVersion: "3068"
    uid: 7f0cd2d8-3c08-4ae5-acb4-8736bedaf96a
  rules:
  - apiGroups:
    - '*'
    resources:
    - nodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - '*'
    resources:
    - namespaces
    - pods
    - events
    - endpoints
    verbs:
    - '*'
  - apiGroups:
    - '*'
    resources:
    - resourcequotas
    - limitranges
    verbs:
    - list
    - watch
  - apiGroups:
    - '*'
    resources:
    - storageclasses
    - persistentvolumeclaims
    - persistentvolumes
    verbs:
    - '*'
  - apiGroups:
    - apiextensions.k8s.io
    resources:
    - customresourcedefinitions
    verbs:
    - get
    - list
    - create
    - update
    - delete
    - patch
  - apiGroups:
    - openebs.io
    resources:
    - '*'
    verbs:
    - '*'
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - get
    - create
    - update
  - nonResourceURLs:
    - /metrics
    verbs:
    - get
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: reloader
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-02-02T18:16:28Z"
    labels:
      app: reloader
      app.kubernetes.io/managed-by: Helm
      chart: reloader-1.2.1
      helm.toolkit.fluxcd.io/name: reloader
      helm.toolkit.fluxcd.io/namespace: kube-system
      heritage: Helm
      release: reloader
    name: reloader-role
    resourceVersion: "3283"
    uid: 9fda9264-ffa6-4016-a98b-be26e1765706
  rules:
  - apiGroups:
    - ""
    resources:
    - secrets
    - configmaps
    verbs:
    - list
    - get
    - watch
  - apiGroups:
    - apps
    resources:
    - deployments
    - daemonsets
    - statefulsets
    verbs:
    - list
    - get
    - update
    - patch
  - apiGroups:
    - batch
    resources:
    - cronjobs
    verbs:
    - list
    - get
  - apiGroups:
    - batch
    resources:
    - jobs
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
    - patch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
      rbac.authorization.k8s.io/aggregate-to-admin: "true"
    name: system:aggregate-to-admin
    resourceVersion: "82"
    uid: e4ac67d3-8b72-4a02-a007-8ceedd122dc2
  rules:
  - apiGroups:
    - authorization.k8s.io
    resources:
    - localsubjectaccessreviews
    verbs:
    - create
  - apiGroups:
    - rbac.authorization.k8s.io
    resources:
    - rolebindings
    - roles
    verbs:
    - create
    - delete
    - deletecollection
    - get
    - list
    - patch
    - update
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
      rbac.authorization.k8s.io/aggregate-to-edit: "true"
    name: system:aggregate-to-edit
    resourceVersion: "83"
    uid: 1e7d4ae8-0aaf-474c-9789-ea057d17d200
  rules:
  - apiGroups:
    - ""
    resources:
    - pods/attach
    - pods/exec
    - pods/portforward
    - pods/proxy
    - secrets
    - services/proxy
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - serviceaccounts
    verbs:
    - impersonate
  - apiGroups:
    - ""
    resources:
    - pods
    - pods/attach
    - pods/exec
    - pods/portforward
    - pods/proxy
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - pods/eviction
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - configmaps
    - events
    - persistentvolumeclaims
    - replicationcontrollers
    - replicationcontrollers/scale
    - secrets
    - serviceaccounts
    - services
    - services/proxy
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - serviceaccounts/token
    verbs:
    - create
  - apiGroups:
    - apps
    resources:
    - daemonsets
    - deployments
    - deployments/rollback
    - deployments/scale
    - replicasets
    - replicasets/scale
    - statefulsets
    - statefulsets/scale
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - autoscaling
    resources:
    - horizontalpodautoscalers
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - batch
    resources:
    - cronjobs
    - jobs
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - extensions
    resources:
    - daemonsets
    - deployments
    - deployments/rollback
    - deployments/scale
    - ingresses
    - networkpolicies
    - replicasets
    - replicasets/scale
    - replicationcontrollers/scale
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses
    - networkpolicies
    verbs:
    - create
    - delete
    - deletecollection
    - patch
    - update
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - create
    - delete
    - deletecollection
    - get
    - list
    - patch
    - update
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
      rbac.authorization.k8s.io/aggregate-to-view: "true"
    name: system:aggregate-to-view
    resourceVersion: "84"
    uid: 9216bbce-5e7d-4de3-bfd5-cb8f86e39f48
  rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    - endpoints
    - persistentvolumeclaims
    - persistentvolumeclaims/status
    - pods
    - replicationcontrollers
    - replicationcontrollers/scale
    - serviceaccounts
    - services
    - services/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - bindings
    - events
    - limitranges
    - namespaces/status
    - pods/log
    - pods/status
    - replicationcontrollers/status
    - resourcequotas
    - resourcequotas/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - discovery.k8s.io
    resources:
    - endpointslices
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    resources:
    - controllerrevisions
    - daemonsets
    - daemonsets/status
    - deployments
    - deployments/scale
    - deployments/status
    - replicasets
    - replicasets/scale
    - replicasets/status
    - statefulsets
    - statefulsets/scale
    - statefulsets/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - autoscaling
    resources:
    - horizontalpodautoscalers
    - horizontalpodautoscalers/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - batch
    resources:
    - cronjobs
    - cronjobs/status
    - jobs
    - jobs/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - extensions
    resources:
    - daemonsets
    - daemonsets/status
    - deployments
    - deployments/scale
    - deployments/status
    - ingresses
    - ingresses/status
    - networkpolicies
    - replicasets
    - replicasets/scale
    - replicasets/status
    - replicationcontrollers/scale
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets
    - poddisruptionbudgets/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses
    - ingresses/status
    - networkpolicies
    verbs:
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:auth-delegator
    resourceVersion: "89"
    uid: 62d39b88-6767-41a1-91b2-8de6619364b4
  rules:
  - apiGroups:
    - authentication.k8s.io
    resources:
    - tokenreviews
    verbs:
    - create
  - apiGroups:
    - authorization.k8s.io
    resources:
    - subjectaccessreviews
    verbs:
    - create
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:basic-user
    resourceVersion: "77"
    uid: 082265f7-6df4-45c9-b2bc-5ef2eb6b0597
  rules:
  - apiGroups:
    - authorization.k8s.io
    resources:
    - selfsubjectaccessreviews
    - selfsubjectrulesreviews
    verbs:
    - create
  - apiGroups:
    - authentication.k8s.io
    resources:
    - selfsubjectreviews
    verbs:
    - create
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:certificates.k8s.io:certificatesigningrequests:nodeclient
    resourceVersion: "94"
    uid: 7b57f464-14ec-4126-acb8-876366022480
  rules:
  - apiGroups:
    - certificates.k8s.io
    resources:
    - certificatesigningrequests/nodeclient
    verbs:
    - create
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:certificates.k8s.io:certificatesigningrequests:selfnodeclient
    resourceVersion: "95"
    uid: c721979b-4bf6-4ab0-bace-743678909dc0
  rules:
  - apiGroups:
    - certificates.k8s.io
    resources:
    - certificatesigningrequests/selfnodeclient
    verbs:
    - create
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:certificates.k8s.io:kube-apiserver-client-approver
    resourceVersion: "99"
    uid: a6b642ad-649f-4279-9c0d-88f9881f9a76
  rules:
  - apiGroups:
    - certificates.k8s.io
    resourceNames:
    - kubernetes.io/kube-apiserver-client
    resources:
    - signers
    verbs:
    - approve
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:certificates.k8s.io:kube-apiserver-client-kubelet-approver
    resourceVersion: "100"
    uid: 21ef7943-a78e-46ef-80ad-4a63dcc0a93f
  rules:
  - apiGroups:
    - certificates.k8s.io
    resourceNames:
    - kubernetes.io/kube-apiserver-client-kubelet
    resources:
    - signers
    verbs:
    - approve
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:certificates.k8s.io:kubelet-serving-approver
    resourceVersion: "98"
    uid: 92d0ccd4-0944-45d3-a3b9-2483d6fd3461
  rules:
  - apiGroups:
    - certificates.k8s.io
    resourceNames:
    - kubernetes.io/kubelet-serving
    resources:
    - signers
    verbs:
    - approve
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:certificates.k8s.io:legacy-unknown-approver
    resourceVersion: "97"
    uid: b950dff3-b598-4425-b9e5-bf84518e5b8f
  rules:
  - apiGroups:
    - certificates.k8s.io
    resourceNames:
    - kubernetes.io/legacy-unknown
    resources:
    - signers
    verbs:
    - approve
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:attachdetach-controller
    resourceVersion: "105"
    uid: 3e4ed2cc-c3f6-457e-90c0-38185d4705e2
  rules:
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    - persistentvolumes
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - nodes/status
    verbs:
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
  - apiGroups:
    - storage.k8s.io
    resources:
    - volumeattachments
    verbs:
    - create
    - delete
    - get
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - csidrivers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - csinodes
    verbs:
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:certificate-controller
    resourceVersion: "131"
    uid: a10b83f5-cfa4-44ee-9bfd-fbeedebce535
  rules:
  - apiGroups:
    - certificates.k8s.io
    resources:
    - certificatesigningrequests
    verbs:
    - delete
    - get
    - list
    - watch
  - apiGroups:
    - certificates.k8s.io
    resources:
    - certificatesigningrequests/approval
    - certificatesigningrequests/status
    verbs:
    - update
  - apiGroups:
    - certificates.k8s.io
    resourceNames:
    - kubernetes.io/kube-apiserver-client-kubelet
    resources:
    - signers
    verbs:
    - approve
  - apiGroups:
    - certificates.k8s.io
    resourceNames:
    - kubernetes.io/kube-apiserver-client
    - kubernetes.io/kube-apiserver-client-kubelet
    - kubernetes.io/kubelet-serving
    - kubernetes.io/legacy-unknown
    resources:
    - signers
    verbs:
    - sign
  - apiGroups:
    - authorization.k8s.io
    resources:
    - subjectaccessreviews
    verbs:
    - create
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:clusterrole-aggregation-controller
    resourceVersion: "106"
    uid: c922eb9a-b367-4fd9-b210-41b7cca75776
  rules:
  - apiGroups:
    - rbac.authorization.k8s.io
    resources:
    - clusterroles
    verbs:
    - escalate
    - get
    - list
    - patch
    - update
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:cronjob-controller
    resourceVersion: "107"
    uid: 488b1179-82a7-4e55-9141-ebe76a52388c
  rules:
  - apiGroups:
    - batch
    resources:
    - cronjobs
    verbs:
    - get
    - list
    - update
    - watch
  - apiGroups:
    - batch
    resources:
    - jobs
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - batch
    resources:
    - cronjobs/status
    verbs:
    - update
  - apiGroups:
    - batch
    resources:
    - cronjobs/finalizers
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - delete
    - list
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:daemon-set-controller
    resourceVersion: "108"
    uid: 3a2314fd-ee7e-4c17-a9e4-4f05dd6c75f3
  rules:
  - apiGroups:
    - apps
    - extensions
    resources:
    - daemonsets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    - extensions
    resources:
    - daemonsets/status
    verbs:
    - update
  - apiGroups:
    - apps
    - extensions
    resources:
    - daemonsets/finalizers
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - create
    - delete
    - list
    - patch
    - watch
  - apiGroups:
    - ""
    resources:
    - pods/binding
    verbs:
    - create
  - apiGroups:
    - apps
    resources:
    - controllerrevisions
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:deployment-controller
    resourceVersion: "109"
    uid: 501b6dc2-2904-4ecb-8177-dff3bded1599
  rules:
  - apiGroups:
    - apps
    - extensions
    resources:
    - deployments
    verbs:
    - get
    - list
    - update
    - watch
  - apiGroups:
    - apps
    - extensions
    resources:
    - deployments/status
    verbs:
    - update
  - apiGroups:
    - apps
    - extensions
    resources:
    - deployments/finalizers
    verbs:
    - update
  - apiGroups:
    - apps
    - extensions
    resources:
    - replicasets
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - get
    - list
    - update
    - watch
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:disruption-controller
    resourceVersion: "110"
    uid: 0fcd9f7d-29e5-4e2a-8c99-315a5e68d824
  rules:
  - apiGroups:
    - apps
    - extensions
    resources:
    - deployments
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    - extensions
    resources:
    - replicasets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - replicationcontrollers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    resources:
    - statefulsets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets/status
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - pods/status
    verbs:
    - patch
    - update
  - apiGroups:
    - '*'
    resources:
    - '*/scale'
    verbs:
    - get
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:endpoint-controller
    resourceVersion: "111"
    uid: 66953db0-8089-4ae6-b54d-f1878c905237
  rules:
  - apiGroups:
    - ""
    resources:
    - pods
    - services
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - endpoints
    verbs:
    - create
    - delete
    - get
    - list
    - update
  - apiGroups:
    - ""
    resources:
    - endpoints/restricted
    verbs:
    - create
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:endpointslice-controller
    resourceVersion: "112"
    uid: 044ce7db-4638-4e6e-8cb6-e2451a95692a
  rules:
  - apiGroups:
    - ""
    resources:
    - nodes
    - pods
    - services
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - services/finalizers
    verbs:
    - update
  - apiGroups:
    - discovery.k8s.io
    resources:
    - endpointslices
    verbs:
    - create
    - delete
    - get
    - list
    - update
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:endpointslicemirroring-controller
    resourceVersion: "113"
    uid: 4df12bf0-a71d-4413-bce9-506046416a48
  rules:
  - apiGroups:
    - ""
    resources:
    - endpoints
    - services
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - services/finalizers
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - endpoints/finalizers
    verbs:
    - update
  - apiGroups:
    - discovery.k8s.io
    resources:
    - endpointslices
    verbs:
    - create
    - delete
    - get
    - list
    - update
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:ephemeral-volume-controller
    resourceVersion: "115"
    uid: 3eb632a0-7c1c-41ce-a743-e016a5c3cebf
  rules:
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - pods/finalizers
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    verbs:
    - create
    - get
    - list
    - watch
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:expand-controller
    resourceVersion: "114"
    uid: f2464d11-00bc-4385-807b-6e4b50f91235
  rules:
  - apiGroups:
    - ""
    resources:
    - persistentvolumes
    verbs:
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims/status
    verbs:
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - services
    verbs:
    - get
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:generic-garbage-collector
    resourceVersion: "116"
    uid: 61dd55cd-0aaf-45b6-981d-c7c87bf09423
  rules:
  - apiGroups:
    - '*'
    resources:
    - '*'
    verbs:
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:horizontal-pod-autoscaler
    resourceVersion: "117"
    uid: 1d137b9f-fd3a-455f-a80e-960a4b5ad5dd
  rules:
  - apiGroups:
    - autoscaling
    resources:
    - horizontalpodautoscalers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - autoscaling
    resources:
    - horizontalpodautoscalers/status
    verbs:
    - update
  - apiGroups:
    - '*'
    resources:
    - '*/scale'
    verbs:
    - get
    - update
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - list
  - apiGroups:
    - metrics.k8s.io
    resources:
    - pods
    verbs:
    - list
  - apiGroups:
    - custom.metrics.k8s.io
    resources:
    - '*'
    verbs:
    - get
    - list
  - apiGroups:
    - external.metrics.k8s.io
    resources:
    - '*'
    verbs:
    - get
    - list
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:job-controller
    resourceVersion: "118"
    uid: 53042fac-421c-4a7a-b405-efaa3711e153
  rules:
  - apiGroups:
    - batch
    resources:
    - jobs
    verbs:
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - batch
    resources:
    - jobs/status
    verbs:
    - update
  - apiGroups:
    - batch
    resources:
    - jobs/finalizers
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - create
    - delete
    - list
    - patch
    - watch
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:legacy-service-account-token-cleaner
    resourceVersion: "137"
    uid: 8de02864-4b17-4335-a6ba-b18e069b6a6e
  rules:
  - apiGroups:
    - ""
    resourceNames:
    - kube-apiserver-legacy-service-account-token-tracking
    resources:
    - configmaps
    verbs:
    - get
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - delete
    - patch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:namespace-controller
    resourceVersion: "119"
    uid: 111cbac7-5eab-4830-a30f-09f90d518082
  rules:
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - delete
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - namespaces/finalize
    - namespaces/status
    verbs:
    - update
  - apiGroups:
    - '*'
    resources:
    - '*'
    verbs:
    - delete
    - deletecollection
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:node-controller
    resourceVersion: "120"
    uid: 127f8f96-7bcb-42ac-94ff-bdb0545d6aae
  rules:
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - delete
    - get
    - list
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - nodes/status
    verbs:
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - pods/status
    verbs:
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - delete
    - get
    - list
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:persistent-volume-binder
    resourceVersion: "121"
    uid: 7a0e55a0-be6b-4ff3-8cc0-5d0333f6ea1b
  rules:
  - apiGroups:
    - ""
    resources:
    - persistentvolumes
    verbs:
    - create
    - delete
    - get
    - list
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumes/status
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    verbs:
    - get
    - list
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims/status
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - create
    - delete
    - get
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - storageclasses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - watch
  - apiGroups:
    - ""
    resources:
    - services
    verbs:
    - get
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:pod-garbage-collector
    resourceVersion: "122"
    uid: 400172fa-3ffb-4100-b12b-3113cb3efbb3
  rules:
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - delete
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - get
    - list
  - apiGroups:
    - ""
    resources:
    - pods/status
    verbs:
    - patch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:pv-protection-controller
    resourceVersion: "133"
    uid: 475137ef-bafa-48bc-9971-01140dbef62a
  rules:
  - apiGroups:
    - ""
    resources:
    - persistentvolumes
    verbs:
    - get
    - list
    - update
    - watch
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:pvc-protection-controller
    resourceVersion: "132"
    uid: 0f463cf2-4d91-4f6e-b31c-bc41ca01f7ac
  rules:
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    verbs:
    - get
    - list
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:replicaset-controller
    resourceVersion: "123"
    uid: 7463d405-59fa-4429-8051-92d90f33f53d
  rules:
  - apiGroups:
    - apps
    - extensions
    resources:
    - replicasets
    verbs:
    - get
    - list
    - update
    - watch
  - apiGroups:
    - apps
    - extensions
    resources:
    - replicasets/status
    verbs:
    - update
  - apiGroups:
    - apps
    - extensions
    resources:
    - replicasets/finalizers
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - create
    - delete
    - list
    - patch
    - watch
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:replication-controller
    resourceVersion: "124"
    uid: 23dec926-2ac6-465d-9e5d-963a48c9371c
  rules:
  - apiGroups:
    - ""
    resources:
    - replicationcontrollers
    verbs:
    - get
    - list
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - replicationcontrollers/status
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - replicationcontrollers/finalizers
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - create
    - delete
    - list
    - patch
    - watch
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:resourcequota-controller
    resourceVersion: "125"
    uid: 8da9b303-ed89-4b84-ad26-81e70474e008
  rules:
  - apiGroups:
    - '*'
    resources:
    - '*'
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - resourcequotas/status
    verbs:
    - update
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:root-ca-cert-publisher
    resourceVersion: "135"
    uid: 8bd8db33-0dfb-4068-9804-2100ec5f89c5
  rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    verbs:
    - create
    - update
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:route-controller
    resourceVersion: "126"
    uid: 026aacba-9d9f-4c88-b30d-b2fd0519d085
  rules:
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - nodes/status
    verbs:
    - patch
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:service-account-controller
    resourceVersion: "127"
    uid: 06c8021b-26ed-4661-a966-15852de3daf9
  rules:
  - apiGroups:
    - ""
    resources:
    - serviceaccounts
    verbs:
    - create
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:service-controller
    resourceVersion: "128"
    uid: 8e4339d9-e654-49a3-adaf-f8e52407b26f
  rules:
  - apiGroups:
    - ""
    resources:
    - services
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - services/status
    verbs:
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:statefulset-controller
    resourceVersion: "129"
    uid: cfe5d1b3-2fc9-44b1-b240-7b7e06f2cf3e
  rules:
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - list
    - watch
  - apiGroups:
    - apps
    resources:
    - statefulsets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    resources:
    - statefulsets/status
    verbs:
    - update
  - apiGroups:
    - apps
    resources:
    - statefulsets/finalizers
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - create
    - delete
    - get
    - patch
    - update
  - apiGroups:
    - apps
    resources:
    - controllerrevisions
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    verbs:
    - create
    - get
    - list
    - watch
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    verbs:
    - delete
    - update
  - apiGroups:
    - ""
    resources:
    - pods/finalizers
    verbs:
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:ttl-after-finished-controller
    resourceVersion: "134"
    uid: 412dcf87-1546-4f94-becb-bfbe32d4e13d
  rules:
  - apiGroups:
    - batch
    resources:
    - jobs
    verbs:
    - delete
    - get
    - list
    - watch
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:ttl-controller
    resourceVersion: "130"
    uid: 39c3db5c-8b46-4f30-bd1e-417319c590d3
  rules:
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:controller:validatingadmissionpolicy-status-controller
    resourceVersion: "136"
    uid: 1b6b7323-3442-46ce-896f-40b0239d9184
  rules:
  - apiGroups:
    - admissionregistration.k8s.io
    resources:
    - validatingadmissionpolicies
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - admissionregistration.k8s.io
    resources:
    - validatingadmissionpolicies/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:discovery
    resourceVersion: "75"
    uid: 3d0ad43d-41f9-41e5-934a-eb33f95ad00c
  rules:
  - nonResourceURLs:
    - /api
    - /api/*
    - /apis
    - /apis/*
    - /healthz
    - /livez
    - /openapi
    - /openapi/*
    - /readyz
    - /version
    - /version/
    verbs:
    - get
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:heapster
    resourceVersion: "85"
    uid: 055adcab-d57d-416c-951a-04310c603901
  rules:
  - apiGroups:
    - ""
    resources:
    - events
    - namespaces
    - nodes
    - pods
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - extensions
    resources:
    - deployments
    verbs:
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:kube-aggregator
    resourceVersion: "90"
    uid: baed2bda-4c4e-4c76-8b09-c6d69b89175a
  rules:
  - apiGroups:
    - ""
    resources:
    - endpoints
    - services
    verbs:
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:kube-controller-manager
    resourceVersion: "91"
    uid: 8089f805-ebdb-42a6-9f87-6dd8d4b8bd1b
  rules:
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - create
  - apiGroups:
    - coordination.k8s.io
    resourceNames:
    - kube-controller-manager
    resources:
    - leases
    verbs:
    - get
    - update
  - apiGroups:
    - ""
    resources:
    - secrets
    - serviceaccounts
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - delete
  - apiGroups:
    - ""
    resources:
    - configmaps
    - namespaces
    - secrets
    - serviceaccounts
    verbs:
    - get
  - apiGroups:
    - ""
    resources:
    - secrets
    - serviceaccounts
    verbs:
    - update
  - apiGroups:
    - authentication.k8s.io
    resources:
    - tokenreviews
    verbs:
    - create
  - apiGroups:
    - authorization.k8s.io
    resources:
    - subjectaccessreviews
    verbs:
    - create
  - apiGroups:
    - '*'
    resources:
    - '*'
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - serviceaccounts/token
    verbs:
    - create
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:kube-dns
    resourceVersion: "92"
    uid: 1f39d1b7-2e6f-45e3-85e2-6c4c1b0006ab
  rules:
  - apiGroups:
    - ""
    resources:
    - endpoints
    - services
    verbs:
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:kube-scheduler
    resourceVersion: "104"
    uid: 8b0ee715-b3e5-4fcb-b519-e305457a0ba4
  rules:
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - create
  - apiGroups:
    - coordination.k8s.io
    resourceNames:
    - kube-scheduler
    resources:
    - leases
    verbs:
    - get
    - list
    - update
    - watch
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leasecandidates
    verbs:
    - create
    - delete
    - deletecollection
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - delete
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - bindings
    - pods/binding
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - pods/status
    verbs:
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - replicationcontrollers
    - services
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    - extensions
    resources:
    - replicasets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    resources:
    - statefulsets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    - persistentvolumes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - authentication.k8s.io
    resources:
    - tokenreviews
    verbs:
    - create
  - apiGroups:
    - authorization.k8s.io
    resources:
    - subjectaccessreviews
    verbs:
    - create
  - apiGroups:
    - storage.k8s.io
    resources:
    - csinodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - volumeattachments
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - csidrivers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - csistoragecapacities
    verbs:
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:kubelet-api-admin
    resourceVersion: "102"
    uid: ff4fa15d-5ca8-42ad-8dc7-f9287f01f67c
  rules:
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - proxy
  - apiGroups:
    - ""
    resources:
    - nodes/log
    - nodes/metrics
    - nodes/proxy
    - nodes/stats
    verbs:
    - '*'
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: metrics-server
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-02-02T18:16:04Z"
    labels:
      app.kubernetes.io/instance: metrics-server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: metrics-server
      app.kubernetes.io/version: 0.7.2
      helm.sh/chart: metrics-server-3.12.2
      helm.toolkit.fluxcd.io/name: metrics-server
      helm.toolkit.fluxcd.io/namespace: kube-system
    name: system:metrics-server
    resourceVersion: "2938"
    uid: ef352118-5e56-4fe7-8489-0a9367ab2823
  rules:
  - apiGroups:
    - ""
    resources:
    - nodes/metrics
    verbs:
    - get
  - apiGroups:
    - ""
    resources:
    - pods
    - nodes
    - namespaces
    - configmaps
    verbs:
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      meta.helm.sh/release-name: metrics-server
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-02-02T18:16:04Z"
    labels:
      app.kubernetes.io/instance: metrics-server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: metrics-server
      app.kubernetes.io/version: 0.7.2
      helm.sh/chart: metrics-server-3.12.2
      helm.toolkit.fluxcd.io/name: metrics-server
      helm.toolkit.fluxcd.io/namespace: kube-system
      rbac.authorization.k8s.io/aggregate-to-admin: "true"
      rbac.authorization.k8s.io/aggregate-to-edit: "true"
      rbac.authorization.k8s.io/aggregate-to-view: "true"
    name: system:metrics-server-aggregated-reader
    resourceVersion: "2939"
    uid: 9fceb771-fd2a-437e-a547-2701779c0947
  rules:
  - apiGroups:
    - metrics.k8s.io
    resources:
    - pods
    - nodes
    verbs:
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:monitoring
    resourceVersion: "76"
    uid: 24e057fd-dab0-458b-8b5d-b2bd9e5b6584
  rules:
  - nonResourceURLs:
    - /healthz
    - /healthz/*
    - /livez
    - /livez/*
    - /metrics
    - /metrics/slis
    - /readyz
    - /readyz/*
    verbs:
    - get
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:node
    resourceVersion: "86"
    uid: d01f23f5-cd60-4336-8f22-fa889d18f0c7
  rules:
  - apiGroups:
    - authentication.k8s.io
    resources:
    - tokenreviews
    verbs:
    - create
  - apiGroups:
    - authorization.k8s.io
    resources:
    - localsubjectaccessreviews
    - subjectaccessreviews
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - services
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - create
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - nodes/status
    verbs:
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - create
    - delete
  - apiGroups:
    - ""
    resources:
    - pods/status
    verbs:
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - pods/eviction
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - configmaps
    - secrets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    - persistentvolumes
    verbs:
    - get
  - apiGroups:
    - ""
    resources:
    - endpoints
    verbs:
    - get
  - apiGroups:
    - certificates.k8s.io
    resources:
    - certificatesigningrequests
    verbs:
    - create
    - get
    - list
    - watch
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - create
    - delete
    - get
    - patch
    - update
  - apiGroups:
    - storage.k8s.io
    resources:
    - volumeattachments
    verbs:
    - get
  - apiGroups:
    - ""
    resources:
    - serviceaccounts/token
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - storage.k8s.io
    resources:
    - csidrivers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - csinodes
    verbs:
    - create
    - delete
    - get
    - patch
    - update
  - apiGroups:
    - node.k8s.io
    resources:
    - runtimeclasses
    verbs:
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:node-bootstrapper
    resourceVersion: "88"
    uid: 419b130d-1938-46a7-a351-4baba2500fb0
  rules:
  - apiGroups:
    - certificates.k8s.io
    resources:
    - certificatesigningrequests
    verbs:
    - create
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:node-problem-detector
    resourceVersion: "87"
    uid: 68302275-37b8-4d51-80bb-d53efe9daec0
  rules:
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - get
  - apiGroups:
    - ""
    resources:
    - nodes/status
    verbs:
    - patch
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:node-proxier
    resourceVersion: "103"
    uid: 4d0563bc-5405-4eb4-9566-c0e4fa5874f7
  rules:
  - apiGroups:
    - ""
    resources:
    - endpoints
    - services
    verbs:
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
  - apiGroups:
    - discovery.k8s.io
    resources:
    - endpointslices
    verbs:
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:persistent-volume-provisioner
    resourceVersion: "93"
    uid: df863d26-7ec7-47ec-9913-3e8a85062f1e
  rules:
  - apiGroups:
    - ""
    resources:
    - persistentvolumes
    verbs:
    - create
    - delete
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    verbs:
    - get
    - list
    - update
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - storageclasses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - watch
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:public-info-viewer
    resourceVersion: "78"
    uid: eafa8430-e0cf-482f-8d66-fce0ca5025df
  rules:
  - nonResourceURLs:
    - /healthz
    - /livez
    - /readyz
    - /version
    - /version/
    verbs:
    - get
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:service-account-issuer-discovery
    resourceVersion: "101"
    uid: 34a60d1e-195d-4623-b306-0130cef686fb
  rules:
  - nonResourceURLs:
    - /.well-known/openid-configuration
    - /.well-known/openid-configuration/
    - /openid/v1/jwks
    - /openid/v1/jwks/
    verbs:
    - get
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
    name: system:volume-scheduler
    resourceVersion: "96"
    uid: aa6bf9c6-3525-4aed-8e81-9968b5189f44
  rules:
  - apiGroups:
    - ""
    resources:
    - persistentvolumes
    verbs:
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - storageclasses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    verbs:
    - get
    - list
    - patch
    - update
    - watch
- aggregationRule:
    clusterRoleSelectors:
    - matchLabels:
        rbac.authorization.k8s.io/aggregate-to-view: "true"
  apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      rbac.authorization.kubernetes.io/autoupdate: "true"
    creationTimestamp: "2025-02-02T18:09:58Z"
    labels:
      kubernetes.io/bootstrapping: rbac-defaults
      rbac.authorization.k8s.io/aggregate-to-edit: "true"
    name: view
    resourceVersion: "4489256"
    uid: dba29a90-952c-4de7-a82a-a0388251d69a
  rules:
  - apiGroups:
    - argoproj.io
    resources:
    - workflows
    - workflows/finalizers
    - workfloweventbindings
    - workfloweventbindings/finalizers
    - workflowtemplates
    - workflowtemplates/finalizers
    - cronworkflows
    - cronworkflows/finalizers
    - clusterworkflowtemplates
    - clusterworkflowtemplates/finalizers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - cert-manager.io
    resources:
    - certificates
    - certificaterequests
    - issuers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - acme.cert-manager.io
    resources:
    - challenges
    - orders
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - notification.toolkit.fluxcd.io
    - source.toolkit.fluxcd.io
    - helm.toolkit.fluxcd.io
    - image.toolkit.fluxcd.io
    - kustomize.toolkit.fluxcd.io
    resources:
    - '*'
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - configmaps
    - endpoints
    - persistentvolumeclaims
    - persistentvolumeclaims/status
    - pods
    - replicationcontrollers
    - replicationcontrollers/scale
    - serviceaccounts
    - services
    - services/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - bindings
    - events
    - limitranges
    - namespaces/status
    - pods/log
    - pods/status
    - replicationcontrollers/status
    - resourcequotas
    - resourcequotas/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - discovery.k8s.io
    resources:
    - endpointslices
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    resources:
    - controllerrevisions
    - daemonsets
    - daemonsets/status
    - deployments
    - deployments/scale
    - deployments/status
    - replicasets
    - replicasets/scale
    - replicasets/status
    - statefulsets
    - statefulsets/scale
    - statefulsets/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - autoscaling
    resources:
    - horizontalpodautoscalers
    - horizontalpodautoscalers/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - batch
    resources:
    - cronjobs
    - cronjobs/status
    - jobs
    - jobs/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - extensions
    resources:
    - daemonsets
    - daemonsets/status
    - deployments
    - deployments/scale
    - deployments/status
    - ingresses
    - ingresses/status
    - networkpolicies
    - replicasets
    - replicasets/scale
    - replicasets/status
    - replicationcontrollers/scale
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets
    - poddisruptionbudgets/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses
    - ingresses/status
    - networkpolicies
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - metrics.k8s.io
    resources:
    - pods
    - nodes
    verbs:
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: external-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:51:37Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: external-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: external-ingress-nginx
    namespace: network
    resourceVersion: "14944"
    uid: fa11ebaa-703e-4451-a19d-e42bf80a4ebb
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: external-ingress-nginx
  subjects:
  - kind: ServiceAccount
    name: external-ingress-nginx
    namespace: network
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    annotations:
      meta.helm.sh/release-name: internal-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T19:07:36Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: internal-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: internal-ingress-nginx
    namespace: network
    resourceVersion: "21720"
    uid: d6827ae8-ec02-45b4-be9b-9b6f83b1bf74
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: internal-ingress-nginx
  subjects:
  - kind: ServiceAccount
    name: internal-ingress-nginx
    namespace: network
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    annotations:
      meta.helm.sh/release-name: external-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T18:51:37Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: external-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: external-ingress-nginx
    namespace: network
    resourceVersion: "14943"
    uid: 57adfc8e-ef3e-44bd-9a49-83f885a19e5c
  rules:
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - get
  - apiGroups:
    - ""
    resources:
    - configmaps
    - pods
    - secrets
    - endpoints
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - services
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses/status
    verbs:
    - update
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingressclasses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - coordination.k8s.io
    resourceNames:
    - external-ingress-nginx-leader
    resources:
    - leases
    verbs:
    - get
    - update
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
    - patch
  - apiGroups:
    - discovery.k8s.io
    resources:
    - endpointslices
    verbs:
    - list
    - watch
    - get
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    annotations:
      meta.helm.sh/release-name: internal-ingress-nginx
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-02-02T19:07:36Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      helm.toolkit.fluxcd.io/name: internal-ingress-nginx
      helm.toolkit.fluxcd.io/namespace: network
    name: internal-ingress-nginx
    namespace: network
    resourceVersion: "21719"
    uid: c1b5586e-530c-43e5-a3a7-2c9d339d689a
  rules:
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - get
  - apiGroups:
    - ""
    resources:
    - configmaps
    - pods
    - secrets
    - endpoints
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - services
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses/status
    verbs:
    - update
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingressclasses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - coordination.k8s.io
    resourceNames:
    - internal-ingress-nginx-leader
    resources:
    - leases
    verbs:
    - get
    - update
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
    - patch
  - apiGroups:
    - discovery.k8s.io
    resources:
    - endpointslices
    verbs:
    - list
    - watch
    - get
- apiVersion: scheduling.k8s.io/v1
  description: Ensure Longhorn pods have the highest priority to prevent any unexpected
    eviction by the Kubernetes scheduler under node pressure
  kind: PriorityClass
  metadata:
    annotations:
      meta.helm.sh/release-name: longhorn-release
      meta.helm.sh/release-namespace: longhorn-system
    creationTimestamp: "2025-02-03T17:17:41Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: longhorn-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: longhorn
      app.kubernetes.io/version: v1.8.0
      helm.sh/chart: longhorn-1.8.0
      helm.toolkit.fluxcd.io/name: longhorn-release
      helm.toolkit.fluxcd.io/namespace: longhorn-system
    name: longhorn-critical
    resourceVersion: "555921"
    uid: 9f13f054-7a02-40df-a664-54dbd3397dc2
  preemptionPolicy: PreemptLowerPriority
  value: 1000000000
- apiVersion: scheduling.k8s.io/v1
  description: Used for system critical pods that must run in the cluster, but can
    be moved to another node if necessary.
  kind: PriorityClass
  metadata:
    creationTimestamp: "2025-02-02T18:09:58Z"
    generation: 1
    name: system-cluster-critical
    resourceVersion: "73"
    uid: a09c78f6-248b-436b-915b-096b445e7153
  preemptionPolicy: PreemptLowerPriority
  value: 2000000000
- apiVersion: scheduling.k8s.io/v1
  description: Used for system critical pods that must not be moved from their current
    node.
  kind: PriorityClass
  metadata:
    creationTimestamp: "2025-02-02T18:09:58Z"
    generation: 1
    name: system-node-critical
    resourceVersion: "72"
    uid: d61246a8-c32b-49b5-8a57-ec4bf28bbe05
  preemptionPolicy: PreemptLowerPriority
  value: 2000001000
- apiVersion: storage.k8s.io/v1
  kind: CSIDriver
  metadata:
    annotations:
      driver.longhorn.io/git-commit: 1f343ee4c467de1264682ecb069d8f2a62850977
      driver.longhorn.io/version: v1.8.0
    creationTimestamp: "2025-02-03T17:18:43Z"
    name: driver.longhorn.io
    resourceVersion: "557157"
    uid: 32a3aa6a-3666-4e36-8706-95cb80f6c292
  spec:
    attachRequired: true
    fsGroupPolicy: ReadWriteOnceWithFSType
    podInfoOnMount: true
    requiresRepublish: false
    seLinuxMount: false
    storageCapacity: false
    volumeLifecycleModes:
    - Persistent
- apiVersion: storage.k8s.io/v1
  kind: CSINode
  metadata:
    annotations:
      storage.alpha.kubernetes.io/migrated-plugins: kubernetes.io/aws-ebs,kubernetes.io/azure-disk,kubernetes.io/azure-file,kubernetes.io/cinder,kubernetes.io/gce-pd,kubernetes.io/portworx-volume,kubernetes.io/vsphere-volume
    creationTimestamp: "2025-02-02T18:10:42Z"
    name: ldit1
    ownerReferences:
    - apiVersion: v1
      kind: Node
      name: ldit1
      uid: 3ef9a61c-5531-4cb3-a0b4-a8d0308d8408
    resourceVersion: "557629"
    uid: 53fba5aa-220d-4462-966b-52d365ca1b2a
  spec:
    drivers:
    - name: driver.longhorn.io
      nodeID: ldit1
      topologyKeys: null
- apiVersion: storage.k8s.io/v1
  kind: CSINode
  metadata:
    annotations:
      storage.alpha.kubernetes.io/migrated-plugins: kubernetes.io/aws-ebs,kubernetes.io/azure-disk,kubernetes.io/azure-file,kubernetes.io/cinder,kubernetes.io/gce-pd,kubernetes.io/portworx-volume,kubernetes.io/vsphere-volume
    creationTimestamp: "2025-02-02T18:10:37Z"
    name: ldit2
    ownerReferences:
    - apiVersion: v1
      kind: Node
      name: ldit2
      uid: d1aa63a0-ee4b-4e35-8f1e-99d1387eb318
    resourceVersion: "615380"
    uid: 5cac9f14-2d2e-4700-9d68-8d6b675e1f16
  spec:
    drivers:
    - name: driver.longhorn.io
      nodeID: ldit2
      topologyKeys: null
- apiVersion: storage.k8s.io/v1
  kind: CSINode
  metadata:
    annotations:
      storage.alpha.kubernetes.io/migrated-plugins: kubernetes.io/aws-ebs,kubernetes.io/azure-disk,kubernetes.io/azure-file,kubernetes.io/cinder,kubernetes.io/gce-pd,kubernetes.io/portworx-volume,kubernetes.io/vsphere-volume
    creationTimestamp: "2025-02-02T18:10:39Z"
    name: lditdb
    ownerReferences:
    - apiVersion: v1
      kind: Node
      name: lditdb
      uid: a4172af2-d0ac-4e74-853c-5c066d5eb89f
    resourceVersion: "1285090"
    uid: c4a4380c-f1cc-4138-9d7f-d2f07a377895
  spec:
    drivers:
    - name: driver.longhorn.io
      nodeID: lditdb
      topologyKeys: null
- apiVersion: storage.k8s.io/v1
  kind: CSINode
  metadata:
    annotations:
      storage.alpha.kubernetes.io/migrated-plugins: kubernetes.io/aws-ebs,kubernetes.io/azure-disk,kubernetes.io/azure-file,kubernetes.io/cinder,kubernetes.io/gce-pd,kubernetes.io/portworx-volume,kubernetes.io/vsphere-volume
    creationTimestamp: "2025-02-02T18:11:02Z"
    name: ldite1
    ownerReferences:
    - apiVersion: v1
      kind: Node
      name: ldite1
      uid: 5094814a-de49-4f04-8eea-696a9373c8d6
    resourceVersion: "557583"
    uid: cc27ad49-04d3-475d-94f3-1e1dd6dfe18c
  spec:
    drivers:
    - name: driver.longhorn.io
      nodeID: ldite1
      topologyKeys: null
- apiVersion: storage.k8s.io/v1
  kind: CSINode
  metadata:
    annotations:
      storage.alpha.kubernetes.io/migrated-plugins: kubernetes.io/aws-ebs,kubernetes.io/azure-disk,kubernetes.io/azure-file,kubernetes.io/cinder,kubernetes.io/gce-pd,kubernetes.io/portworx-volume,kubernetes.io/vsphere-volume
    creationTimestamp: "2025-02-02T18:10:42Z"
    name: ldite2
    ownerReferences:
    - apiVersion: v1
      kind: Node
      name: ldite2
      uid: d0af6d97-77a5-469b-acfe-e9fba8b4dc6b
    resourceVersion: "620141"
    uid: bce2074b-617b-4303-812a-6bcd300d1690
  spec:
    drivers:
    - name: driver.longhorn.io
      nodeID: ldite2
      topologyKeys: null
- apiVersion: storage.k8s.io/v1
  kind: CSINode
  metadata:
    annotations:
      storage.alpha.kubernetes.io/migrated-plugins: kubernetes.io/aws-ebs,kubernetes.io/azure-disk,kubernetes.io/azure-file,kubernetes.io/cinder,kubernetes.io/gce-pd,kubernetes.io/portworx-volume,kubernetes.io/vsphere-volume
    creationTimestamp: "2025-02-02T18:10:57Z"
    name: ldite3
    ownerReferences:
    - apiVersion: v1
      kind: Node
      name: ldite3
      uid: c2bd72f7-b22a-4ea3-a736-1845770425d1
    resourceVersion: "616149"
    uid: 5e26887b-b3ea-4094-b99c-4277a5ee9a68
  spec:
    drivers:
    - name: driver.longhorn.io
      nodeID: ldite3
      topologyKeys: null
- allowVolumeExpansion: true
  apiVersion: storage.k8s.io/v1
  kind: StorageClass
  metadata:
    annotations:
      longhorn.io/last-applied-configmap: |
        kind: StorageClass
        apiVersion: storage.k8s.io/v1
        metadata:
          name: longhorn
          annotations:
            storageclass.kubernetes.io/is-default-class: "true"
        provisioner: driver.longhorn.io
        allowVolumeExpansion: true
        reclaimPolicy: "Delete"
        volumeBindingMode: Immediate
        parameters:
          numberOfReplicas: "3"
          staleReplicaTimeout: "30"
          fromBackup: ""
          fsType: "ext4"
          dataLocality: "disabled"
          unmapMarkSnapChainRemoved: "ignored"
          disableRevisionCounter: "true"
          dataEngine: "v1"
      storageclass.kubernetes.io/is-default-class: "true"
    creationTimestamp: "2025-02-03T17:18:03Z"
    name: longhorn
    resourceVersion: "556369"
    uid: 678574f6-23d4-481e-9892-6888eaf4f6db
  parameters:
    dataEngine: v1
    dataLocality: disabled
    disableRevisionCounter: "true"
    fromBackup: ""
    fsType: ext4
    numberOfReplicas: "3"
    staleReplicaTimeout: "30"
    unmapMarkSnapChainRemoved: ignored
  provisioner: driver.longhorn.io
  reclaimPolicy: Delete
  volumeBindingMode: Immediate
- allowVolumeExpansion: true
  apiVersion: storage.k8s.io/v1
  kind: StorageClass
  metadata:
    creationTimestamp: "2025-02-03T17:18:05Z"
    name: longhorn-static
    resourceVersion: "556550"
    uid: 29a23634-e5d9-455b-9f03-6711fabdc3b1
  parameters:
    staleReplicaTimeout: "30"
  provisioner: driver.longhorn.io
  reclaimPolicy: Delete
  volumeBindingMode: Immediate
- apiVersion: storage.k8s.io/v1
  kind: StorageClass
  metadata:
    annotations:
      cas.openebs.io/config: |
        - name: StorageType
          value: "hostpath"
        - name: BasePath
          value: "/var/openebs/local"
      meta.helm.sh/release-name: openebs
      meta.helm.sh/release-namespace: openebs-system
      openebs.io/cas-type: local
    creationTimestamp: "2025-02-02T18:16:09Z"
    labels:
      app.kubernetes.io/managed-by: Helm
      helm.toolkit.fluxcd.io/name: openebs
      helm.toolkit.fluxcd.io/namespace: openebs-system
    name: openebs-hostpath
    resourceVersion: "3067"
    uid: 95702f33-6761-40e0-b997-a9765b9bf58b
  provisioner: openebs.io/local
  reclaimPolicy: Delete
  volumeBindingMode: WaitForFirstConsumer
- apiVersion: storage.k8s.io/v1
  kind: VolumeAttachment
  metadata:
    annotations:
      csi.alpha.kubernetes.io/node-id: lditdb
    creationTimestamp: "2025-02-10T21:58:51Z"
    finalizers:
    - external-attacher/driver-longhorn-io
    name: csi-018df6a1049137ee2e22fd9377ba732a5314af2603c49aa650e1c6995aab7016
    resourceVersion: "6288830"
    uid: 7a0298c7-0b20-46f0-9083-8dcf40065fb6
  spec:
    attacher: driver.longhorn.io
    nodeName: lditdb
    source:
      persistentVolumeName: pvc-c556995f-79bb-44f1-a4a3-e50beb7f415a
  status:
    attached: true
- apiVersion: storage.k8s.io/v1
  kind: VolumeAttachment
  metadata:
    annotations:
      csi.alpha.kubernetes.io/node-id: ldite1
    creationTimestamp: "2025-02-10T21:02:53Z"
    finalizers:
    - external-attacher/driver-longhorn-io
    name: csi-52623cc8fc95a3e04840eab6f12e6b454e6d600f40eb7cec25107966f46f2be6
    resourceVersion: "6253698"
    uid: fc60229d-756f-43b8-99be-fb54d47528f2
  spec:
    attacher: driver.longhorn.io
    nodeName: ldite1
    source:
      persistentVolumeName: pvc-41cff22a-126e-4d0f-bde8-74aa06671c3d
  status:
    attached: true
- apiVersion: storage.k8s.io/v1
  kind: VolumeAttachment
  metadata:
    annotations:
      csi.alpha.kubernetes.io/node-id: lditdb
    creationTimestamp: "2025-02-10T21:58:50Z"
    finalizers:
    - external-attacher/driver-longhorn-io
    name: csi-5364bb83ae71261341ff7684b9cac406569f41fa3bc0c9f7c7ec7e3546eafd69
    resourceVersion: "6288806"
    uid: b7e949f3-558c-494c-8c8f-d0b816adaa6d
  spec:
    attacher: driver.longhorn.io
    nodeName: lditdb
    source:
      persistentVolumeName: pvc-8e559de1-d158-43f9-81f9-8f7f00d2d799
  status:
    attached: true
- apiVersion: storage.k8s.io/v1
  kind: VolumeAttachment
  metadata:
    annotations:
      csi.alpha.kubernetes.io/node-id: ldite2
    creationTimestamp: "2025-02-10T21:02:53Z"
    finalizers:
    - external-attacher/driver-longhorn-io
    name: csi-558bf3e4efc984cb16a80c8af84cc37220260038315944a2f1b2070a41df3ca9
    resourceVersion: "6253700"
    uid: 1b67aaa7-5698-41eb-8459-1e1803e8f06a
  spec:
    attacher: driver.longhorn.io
    nodeName: ldite2
    source:
      persistentVolumeName: pvc-ed0a9c28-0e66-4e9d-ae84-b1b62292e0c4
  status:
    attached: true
- apiVersion: storage.k8s.io/v1
  kind: VolumeAttachment
  metadata:
    annotations:
      csi.alpha.kubernetes.io/node-id: lditdb
    creationTimestamp: "2025-02-10T21:02:53Z"
    finalizers:
    - external-attacher/driver-longhorn-io
    name: csi-5bf908008dd5adae4f8319d3702e557869556cdf34a06d3ad14e89df1c569cb4
    resourceVersion: "6253702"
    uid: e0bcd015-38c3-4cf7-a6cc-2dc1692dffbc
  spec:
    attacher: driver.longhorn.io
    nodeName: lditdb
    source:
      persistentVolumeName: pvc-70431a4a-aa41-4079-b7ff-f319c245241b
  status:
    attached: true
- apiVersion: storage.k8s.io/v1
  kind: VolumeAttachment
  metadata:
    annotations:
      csi.alpha.kubernetes.io/node-id: ldite2
    creationTimestamp: "2025-02-05T17:34:01Z"
    finalizers:
    - external-attacher/driver-longhorn-io
    name: csi-854057493e1621d7477215d1f884a67dfa818f2c7ffff2e78d24e77347723d4b
    resourceVersion: "1994722"
    uid: de58551d-03fa-437a-8f05-8972c02b13ac
  spec:
    attacher: driver.longhorn.io
    nodeName: ldite2
    source:
      persistentVolumeName: pvc-e0f6bc34-46fd-4f9f-8f90-d3c8aef8b286
  status:
    attached: true
- apiVersion: storage.k8s.io/v1
  kind: VolumeAttachment
  metadata:
    annotations:
      csi.alpha.kubernetes.io/node-id: ldit2
    creationTimestamp: "2025-02-10T21:02:53Z"
    finalizers:
    - external-attacher/driver-longhorn-io
    name: csi-8def51a01a9a51e019b49cab6131a272ecd365d2bdcbad5bf800590714b59141
    resourceVersion: "6253699"
    uid: d06598fa-be61-4e08-8ac4-c27daa63ce1d
  spec:
    attacher: driver.longhorn.io
    nodeName: ldit2
    source:
      persistentVolumeName: pvc-17e2804d-3d1e-402b-a1c2-f29db3a2a16f
  status:
    attached: true
- apiVersion: storage.k8s.io/v1
  kind: VolumeAttachment
  metadata:
    annotations:
      csi.alpha.kubernetes.io/node-id: ldite2
    creationTimestamp: "2025-02-03T20:55:58Z"
    finalizers:
    - external-attacher/driver-longhorn-io
    name: csi-973bea730f37032ff0aa1184cfceeb80551a773402cdf6f0fd2051493fa0f48e
    resourceVersion: "663288"
    uid: d6bcac9a-cd7b-46b5-b747-cfd23d50890d
  spec:
    attacher: driver.longhorn.io
    nodeName: ldite2
    source:
      persistentVolumeName: pvc-36a1ff41-148d-4dc2-8a10-a380f8d08b7f
  status:
    attached: true
- apiVersion: storage.k8s.io/v1
  kind: VolumeAttachment
  metadata:
    annotations:
      csi.alpha.kubernetes.io/node-id: ldite2
    creationTimestamp: "2025-02-05T18:30:50Z"
    finalizers:
    - external-attacher/driver-longhorn-io
    name: csi-9acfbcaf65cd8fc026c2f4012a2171417904bf947f67a86545640961fef5d952
    resourceVersion: "2023978"
    uid: ae0bd0b4-9992-402f-99a4-014a8a42393d
  spec:
    attacher: driver.longhorn.io
    nodeName: ldite2
    source:
      persistentVolumeName: pvc-b0728dfa-49bb-4c8e-a317-ad0ee2be2bc4
  status:
    attached: true
- apiVersion: storage.k8s.io/v1
  kind: VolumeAttachment
  metadata:
    annotations:
      csi.alpha.kubernetes.io/node-id: lditdb
    creationTimestamp: "2025-02-08T17:58:51Z"
    finalizers:
    - external-attacher/driver-longhorn-io
    name: csi-b272bf9ff9aed599f517c688858a211a36c2edf22ae026f03c51bb57748e4e21
    resourceVersion: "4489613"
    uid: 422fe5f4-5723-4d2f-915e-0879ce2b3dda
  spec:
    attacher: driver.longhorn.io
    nodeName: lditdb
    source:
      persistentVolumeName: pvc-82d6bed5-323b-41de-bef0-aeea180fd2ef
  status:
    attached: true
- apiVersion: storage.k8s.io/v1
  kind: VolumeAttachment
  metadata:
    annotations:
      csi.alpha.kubernetes.io/node-id: ldit1
    creationTimestamp: "2025-02-10T21:02:52Z"
    finalizers:
    - external-attacher/driver-longhorn-io
    name: csi-ccff991ec00a39a737b9ae04330cf6c5758abfa5f99a99d25fdbb54d63e19b4e
    resourceVersion: "6253664"
    uid: b39b3974-e87a-45d4-b27c-e2d596fed2ee
  spec:
    attacher: driver.longhorn.io
    nodeName: ldit1
    source:
      persistentVolumeName: pvc-2faa6a05-6ec3-4013-923a-e744f046299d
  status:
    attached: true
- apiVersion: storage.k8s.io/v1
  kind: VolumeAttachment
  metadata:
    annotations:
      csi.alpha.kubernetes.io/node-id: ldite2
    creationTimestamp: "2025-02-05T17:34:01Z"
    finalizers:
    - external-attacher/driver-longhorn-io
    name: csi-de8b81932f6feb6c312095958e59a61fe68a512c17d95398274394dba8ace161
    resourceVersion: "1994727"
    uid: a66e4032-d03d-4121-93c2-785e8ca6b95d
  spec:
    attacher: driver.longhorn.io
    nodeName: ldite2
    source:
      persistentVolumeName: pvc-6bcfff4b-1640-4573-b1e7-c43cd6af9a85
  status:
    attached: true
- apiVersion: storage.k8s.io/v1
  kind: VolumeAttachment
  metadata:
    annotations:
      csi.alpha.kubernetes.io/node-id: ldit2
    creationTimestamp: "2025-02-08T09:40:59Z"
    finalizers:
    - external-attacher/driver-longhorn-io
    name: csi-fa03e75f45b911f29215d142f3402a4974dc1fd6db22c608d45b12ad2789c0e4
    resourceVersion: "4204878"
    uid: 999041a2-8c84-4557-b493-b52d4acafe77
  spec:
    attacher: driver.longhorn.io
    nodeName: ldit2
    source:
      persistentVolumeName: pvc-f30a4328-12ae-429d-b673-5e6be31b2a1d
  status:
    attached: true
kind: List
metadata:
  resourceVersion: ""
